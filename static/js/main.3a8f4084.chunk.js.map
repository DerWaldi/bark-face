{"version":3,"sources":["examples.js","svg/SVGUtils.js","svg/random.js","svg/geometry.js","WriteDemo.js","SketchDemo.js","App.js","serviceWorker.js","index.js"],"names":["A_1","CHARS","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","length","a","c","h","l","m","q","s","t","v","z","segment","parsePath","path","data","replace","_","command","args","type","toLowerCase","numbers","match","number","map","Number","parseValues","push","concat","splice","unshift","Error","writePath","segments","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","seg","value","i","err","return","seed","random","x","Math","sin","floor","resetSeed","val","rounden","srcPath","points","normals","roundingMagnitude","newPath","bbox","reduce","acc","x0","x1","y0","y","y1","roundingFunction","point","PI","pointer","lastSeg","Vector2D","stretch","magn","totalNormal","lastNormal","roughenPath","newPathSmoothed","roughPath","getSubPaths","subPath","properties","require","svgPathProperties","getTotalLength","startPoint","getPointAtLength","subPaths","j","crackPoints","age","_analyzePath","analyzePath","_loop","crackPoint","tangent","getTangentAtLength","crackNormal","crackWidth","crackLength","crackLength2","crackWidth2","crackOpositePoint","insidePolygon","add","crackMidPoint","some","pow","crack","apply","vs","inside","xi","yi","xj","yj","smoothPath","smoothing","newPoints","pathToPoints","bezierCommandCalc","controlPoint","cps","cpe","bezierCommand","line","smooth","current","previous","reverse","angle","cos","pointA","pointB","lengthX","lengthY","sqrt","atan2","endNormal","lastMIndex","lastMNormal","Array","fill","startNormal","copy","norm","normal","sign","arguments","Object","classCallCheck","this","createClass","key","vec","isNull","len","maxAge","WriteDemo","props","_this","possibleConstructorReturn","getPrototypeOf","call","transformLetter","_this$state","state","text","resPath","circles","lines","min","setState","handleSelect","e","target","setTimeout","play","_this2","setInterval","_this2$state","_this3","classes","_this$state2","svgText","index","join","react_default","createElement","className","Grid","container","item","xs","style","padding","Typography","variant","IconButton","onClick","index_es","icon","faDice","TextField","fullWidth","label","onChange","toUpperCase","FormHelperText","es5","max","Button","transformContainer","viewBox","maxHeight","transform","d","href","encodeURIComponent","download","downloadBtn","faDownload","Component","withStyles","height","canvas","width","position","top","right","SketchDemo","App","AppBar","Toolbar","aria-label","menuButton","src","color","grow","react_router","component","marginLeft","marginRight","root","flexGrow","Boolean","window","location","hostname","baseUrl","document","getElementsByTagName","getAttribute","theme","createMuiTheme","palette","primary","main","secondary","error","red","contrastThreshold","tonalOffset","typography","useNextVariants","ReactDOM","render","react_router_dom","basename","MuiThemeProvider","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a8f4084.chunk.js","sourcesContent":["export const A_1 = \"M1538,1381.59l58,13c2,1,21,6,31,8c5,1,9,3,17,1l-12-7l-84-21c-14-2-18-9-23-23c-4-12-8-25-11-37c-2-8-3-15-4-23l-2-11 c-5-30-10-60-22-87c-19-43-37-88-54-136c-11-31-21-63-29-94c-5-19-9-32-30-45c-1,0-2-1-3-2c-4-2-7-4-7-1s1,4,0,6c-15,30-26,65-36,97 c-7,22-15,44-23,68c-8,23-18,47-26,71c-13,39-27,79-43,115c-4,9-9,11-20,9l-27-6c-7-2-13-3-19-4c-7-1-14-2-27-1c16,7,25,10,34,10 c1,0,3,1,5,1l25,6c17,4,19,9,15,19c-4,11-6,22-9,33c-2,7-4,15-6,22l-5,14l-4,10c-4,10-6,19-9,28c-15,44-27,86-27,130v26 c6-5,8-17,8-20v-14c0-46,12-80,29-127c7-20,18-52,23-73c2-8,4-18,8-28c3-8,8-11,24-8c2,1,16,5,29,9l21,7c21,7,41,11,61,15 c14,3,28,8,43,11c9,2,18,4,27,6c18,4,37,9,55,15c30,10,39,18,45,34c3,8,5,16,8,24c5,14,10,28,13,42c7,33,36,116,52,166 c7,22,11,37,12,40c7,21,11,43,16,65l21,87c6,24,14,49,24,73c3,7,4,13,6,20c1,3,2,5,5,5c3-1,1-4,1-8c0-7-3-15-7-24c-3-7-5-13-7-20 l-7-22c-6-19-11-38-16-57c-4-16-8-31-11-46l-6-29c-5-25-11-48-19-72l-6-17c-8-22-20-59-26-78c-2-6-3-10-4-12c-2-5-6-18-11-36 C1562,1462.59,1550,1409.59,1538,1381.59z M1372,927.59c10,5,19,24,22,32c3,7,4,14,6,21c3,10,6,20,9,29c15,45,31,90,49,135l18,45 c12,30,16,58,24,90c1,4,1,8,2,12c3,12,4,24,8,37c3,9,7,25,7,34c0,1-7-2-10-3l-114-29c-25-6-44-8-69-15c-11-3-25-8-38-13 c-10-4-20-7-29-9c-16-4-18-8-15-16l13-33c6-16,12-32,18-48l30-83l36-105c4-11,6-21,10-32c4-10,7-21,11-31 C1365,933.59,1368,927.59,1372,927.59z\";\r\n\r\nexport const A_2 = \"M1196,1391.59v1h-22l22,2v1h1v-1v-1v-1v-1H1196z M1201,1391.59v1v1v1l4-1l3,1h2h2l-2-1l-3-1L1201,1391.59z M1341,1329.59v6 l1,8l1-8v-4l1-7h-1h-1h-1h-1L1341,1329.59z M1336,1321.59h1h1h1h1v-1h-1l-1-10l-1-10l-1,20V1321.59z M1440,1348.59l1,30l1,4l1-28 l1-6v-1h-1h-1h-1h-1V1348.59z M1440,1345.59h1h1h1h1v-1l-1-20l-1-3v13l-2,10V1345.59z M1196,1297.59l2-9l1,12v-10l2-5v-1h-1h-1h-1 l-4,17L1196,1297.59z M1170,1271.59v3h1h1h1v-1l-1-5l-1-1l-1-7l-1,2L1170,1271.59z M1651,1819.59h-4l-4,1h7l7,2h1v-1v-1h-4h-1 L1651,1819.59z M1661,1809.59v1v1v1v1h6l7-2l-2-1l-2,1h-6L1661,1809.59z M1574,1542.59l-4,1l-8,1l4,1l4-1l11,2v-1v-1v-1v-1H1574z  M1584,1540.59v1v1v1v1h1l4-1l10-1l-10-1l-4-1H1584z M1567,1499.59l-20,1l-5,1h15l10,2h1v-1v-1v-1v-1H1567z M1571,1498.59v1v1v1v1h1 l6-3l14,1l-10-3l-10,1H1571z M1557,1467.59l-10,1l-10,1l10,1l10,1h1v-1v-1v-1v-1H1557z M1407,987.59v1v1v1v1h7l4-1l10-1h-7h-9 L1407,987.59z M1406,980.59v1v1v1v1v-1l6-2l12,1l-7-1l-5-2L1406,980.59z M1248,1237.59h-3l-10,2h2h9l6,1v-1v-1v-1v-1L1248,1237.59z  M1257,1232.59v1v1v1v1h1l6,1l10-3l-10,1l-6-3H1257z M1485,1212.59l-20,1l-10-1l10,3l20,1h1v-1v-1v-1v-1H1485z M1490,1208.59v1v1v1 v1h1l10-2h10v-1l-20-1H1490z M1310,1071.59v1l-14,1l14,1v1h1v-1v-1v-1v-1H1310z M1314,1072.59v1v1v1v1h1l4-3l3,1l8-2l-6,1 L1314,1072.59z M1538,1381.59l58,13c2,1,21,6,31,8c5,1,9,3,17,1l-12-7l-84-21c-14-2-18-9-23-23c-4-12-8-25-11-37c-2-8-3-15-4-23 l-2-11c-5-30-10-60-22-87c-19-43-37-88-54-136c-11-31-21-63-29-94c-5-19-9-32-30-45c-1,0-2-1-3-2c-4-2-7-4-7-1s1,4,0,6 c-15,30-26,65-36,97c-7,22-15,44-23,68c-8,23-18,47-26,71c-13,39-27,79-43,115c-4,9-9,11-20,9l-27-6c-7-2-13-3-19-4c-7-1-14-2-27-1 c16,7,25,10,34,10c1,0,3,1,5,1l25,6c17,4,19,9,15,19c-4,11-6,22-9,33c-2,7-4,15-6,22l-5,14l-4,10c-4,10-6,19-9,28 c-15,44-27,86-27,130v26c6-5,8-17,8-20v-14c0-46,12-80,29-127c7-20,18-52,23-73c2-8,4-18,8-28c3-8,8-11,24-8c2,1,16,5,29,9l21,7 c21,7,41,11,61,15c14,3,28,7,43,10c9,2,18,5,27,7c18,4,37,9,55,15c30,10,39,18,45,34c3,8,5,16,8,24c5,14,10,28,13,42 c7,34,36,116,52,166c7,22,11,37,12,40c7,21,11,43,16,65l21,87c6,24,14,49,24,73c3,7,4,13,6,20c1,3,2,5,5,5c3-1,1-4,1-8 c0-7-3-15-7-24c-3-7-5-13-7-20l-7-22c-6-19-11-38-16-57c-4-16-8-31-11-46l-6-29c-5-25-11-48-19-72l-6-17c-8-22-20-59-26-78 c-2-6-3-10-4-12c-2-5-6-18-11-36C1562,1462.59,1550,1409.59,1538,1381.59z M1372,927.59c10,5,19,24,22,32c3,7,4,14,6,21 c3,10,6,20,9,29c15,45,31,90,49,135l18,45c12,30,16,58,24,90c1,4,1,8,2,12c3,12,4,24,8,37c3,9,7,25,7,34c0,1-7-2-10-3l-114-29 c-25-6-44-8-69-15c-11-3-25-8-38-13c-10-4-20-7-29-9c-16-4-18-8-15-16l13-33c6-16,12-32,18-48l30-83l36-105c4-11,6-21,10-32 c4-10,7-21,11-31C1365,933.59,1368,927.59,1372,927.59z\";\r\n\r\nexport const A_3 = \"M1180.82,1379.82h-20l-12,1l10,3l4,1l19-1v-1v-1v-1v-1H1180.82z M1185.82,1379.82v1v1v1l7,1l10,1l12,1h2l-2-1l-5-1 L1185.82,1379.82z M1325.82,1317.82v16l1,8l1-8l2-14l-1-7h-1h-1h-1h-1L1325.82,1317.82z M1320.82,1309.82h1h1h1h1v-1h-1l-1-10l-1-10 l-1,20V1309.82z M1424.82,1336.82l1,40l1,4l1-38l1-6v-1h-1h-1h-1h-1V1336.82z M1424.82,1333.82h1h1h1h1v-1l-1-30l-1-3v13l-2,20 V1333.82z M1180.82,1295.82l2-13l1,16l2-14l1-10l-1-2h-1h-1h-1l-5,27L1180.82,1295.82z M1154.82,1259.82v3h1h1h1l-2-11l1-5l-1-1 l-1-17l-1,12L1154.82,1259.82z M1644.82,1806.82l-3,1l-4,1h7l17,2h1v-11v6h-4h-4L1644.82,1806.82z M1665.82,1797.82v1v1v1v5l16-2 l17-4l-6-1l-6-2l-18,3L1665.82,1797.82z M1575.82,1530.82l-14,1l-8,1l4,1l4-1l21,2v-1v-1v-1v-1H1575.82z M1585.82,1528.82v1v1v1v1h1 l4-1l40-1l-40-1l-4-1H1585.82z M1568.82,1487.82l-30,1l-5,1h15l20,2h1v-1v-1v-1v-1H1568.82z M1572.82,1486.82v1v1v1v1h1l18-1l22-1 l-10-3l-30,1H1572.82z M1558.82,1455.82l-20,1l-10,1l10,1l9,2l12-1v-1v-1v-1v-1H1558.82z M1401.82,975.82v1v1v1v1l12,1l9-2l10-1 l-7-1l-19,1L1401.82,975.82z M1400.82,968.82v1v1v1v1v-1l11-1h17l-7-1l-10-2L1400.82,968.82z M1222.82,1225.82h-3l-10,2h2h9l16,1v-1 v-1v-1v-5L1222.82,1225.82z M1241.82,1220.82v1v1v1v4l1,1l26-3l10-3l-10,1l-26-3H1241.82z M1472.82,1197.82l-30,4l-10-1l10,3l26-1 l15,2v-1v-1v-1v-1L1472.82,1197.82z M1487.82,1190.82v1v7v1v1h1h12l28-2l10-1l-34-3L1487.82,1190.82z M1299.82,1059.82l-24,1l-8,2 l9,1h23h1v-1v-1v-1v-1H1299.82z M1303.82,1060.82v1v1v1v1h1l11-2h16l8-2l-6,1L1303.82,1060.82z M1542.82,1373.82l2-1h4l4,1l3,2h6 l4,2l16,3l7,1h4l10,4l5,2l6-1l4,2l8,2l10,1l9,3l3-4l-5-3l-9-4l-5-5l-6-1l-6-2l-6-1l-5-1l-3-1l-7,1l-6,1l-2-2l-6-6h-4l-7,2l-7-2h-3 l-6-5l-9,3l-6-3l-3-3l-4-5v-3l-2-5l-2-8l-2-5l-1-5l1-6l-3-4l2-5l-3-5v-5v-5l-1-7v-5l-3-10l1-6l-1-7l1-7l-2-4v-5v-6l-3-5l-1-5l-3-8 l-4-6l-1-6l-3-4l-1-4l-4-3l-2-4l-3-4l-1-7l-7-7l-4-3l-1-5v-7l-1-3l-6-5v-3l-3-5l-1-6l-2-3l-2-6l-2-4l-1-4l-2-5l-4-5l-1-5l-3-6l-1-3 l-2-5l1-5l-2-5l-5-5v-5l-3-4l-2-4l-2-4l-3-7v-3l-5-11l-2-5v-3l-3-4l-2-7l1-4l-2-3l-2-7l-1-4l-1-4l-2-5l-4-5l-1-4l-1-5l-1-5l-2-6 l-1-3l-1-4v-5l-4-10v-6l-3-4l-1-6l-3-4l-2-4l-7-4l-3-3l-2-3l-3-4l-9-3l-9-3l-4,5l-3,7l-2,4l-3,5v4l-3,5v3l-5,6v3l-1,6l-4,5v4l-2,3 l-2,6l-1,4l-2,7l-4,3v5l-2,3l-1,5l-3,5l-3,9l1,5l-4,5l-1,7l-2,5l-2,5v3l-2,4l-3,6l1,5l-2,4l-4,6l-2,5l-4,10v4l-4,6l-1,4v3l-5,5l-2,5 l1,5l-4,5l-2,5l-1,3l-2,7l-2,3l-1,6l-3,8l-1,5l-3,6l-1,4l-1,6l-1,3l-3,4l-2,7l1,4l-3,3l-3,5l-2,6l-1,4l-3,3l-2,6v6l-2,2l-2,7l-4,3 l-1,5v4l-4,4l-2,6v5l-5,8l-5,5h-1l-4-2l-8-1h-6l-6-2l-6-3h-13l-6-2l-4-3h-11l-6,2h-5l-9-1v1l7,3l4,3h5l4,2l7,1h8l9,2l3,2l6,1l4,2 l13,3l3-1l4,2l1,7l1,3l-4,11v4l-1,5l-4,3l2,6l-3,6l-2,8l-2,3l-1,5v6l-6,8l-2,5l-2,8l-4,10l-3,7l1,4l-3,4l-1,4l-4,11v5l-2,5l-1,4 l-3,4l-1,5l-1,6l-1,3l-2,4l-2,5v6v4l-2,4v7l-3,4l-3,5l1,3v7l-2,4l-2,4l2,7l-4,5l-1,3l2,7v5l-2,4l2,9l-2,5l2,7v5l7,7l8-11v-6v-9v-7 l1-10v-3l1-6v-5l-1-4l3-5l-1-6v-4l3-4v-3l-1-7l2-5l2-5l1-5l2-6l1-6v-5l2-3l1-6l2-3l1-5l3-6l1-4l2-6l3-5l1-7l2-6l2-4l4-7v-4l2-3l4-7 l2-4l1-6l4-2l1-6l-1-5l1-5l1-7l4-8l1-6l1-3v-5l1-4l4-11l1-1l5-2l2,1l8-2l7,3l6,2h6l4,1l7,4l10,2l6,2l5,1l9,2l4,5l5-1l4,3l9,1h2l5,1 l6,1l3,2h8l3,3l6-1l9,3l5,2l5,1l10,2h6l4,1h5l10,5l4,1l7,1l4-1l5,2l9,2l7,1l4,2l4,2l7,1l6,2h4l4,3h5l6,3l10,3h4l5,3l5,2l7,3l4,2l3,1 l4,4l3,4l1,4l4,5l3,8v5l3,3l2,7l3,8l2,7l2,2l2,7l-2,4l3,5l2,5l2,3l3,11l-1,5l3,5v4l2,3l1,6l1,4l3,7l1,2l1,6l1,6l3,4l1,6v3l1,4l2,6 l4,4l1,4l1,7l1,5l2,2l2,6l3,5l1,5l1,5l2,3l1,6l4,6v4l3,5l1,5l1,2l2,7l1,5l2,9l4,5l1,6l2,4l-1,5l2,6l4,5l1,9v5l4,4v6l1,6l1,4l3,5v5 l2,5l2,5v3l2,5l3,10l1,6l1,4l1,5l3,12l1,2v6l2,6v5l2,3l3,6l-1,3l1,6l2,4v5l3,7l3,7l1,7l2,5l1,5l1,3l1,6l2,4l2,5v5l5,6l2,3l2,3l3,6 l1,6l5,10l1,6l5,12l13,24l-5-26l-1-9l-3-3v-7l-3-3l-3-10l-1-4l-1-6l-5-11v-3l-2-4l-1-4l-4-10l-2-6l-1-3v-6l-2-4l-4-6l1-4l-2-5l-1-4 l-2-5v-5l-3-11v-4l-3-5l-2-6v-5l-2-4l-1-4l-1-7l-3-9l-2-5v-5l-2-6l-1-5l-2-9l1-4l-3-6l-1-4v-5l-2-5v-4l-4-5v-6l-2-4l-1-5v-5l-3-3 l-1-6l-5-10v-3l-3-4l-1-9v-6l-5-4v-5l-2-5l-1-6l-2-5l-3-5v-3l-2-4l-3-6l-1-6l-1-4l-3-6l-2-4l-4-8l-1-6l-2-7l-2-4l-2-5l-1-3l-2-6l1-3 l-3-6l-3-10v-5l-3-4v-5l-3-4l-1-6l-2-4v-6v-4l-4-6l1-4l-3-7l-2-4l-1-3v-6l-1-6l-2-5l-1-5l-3-4l-1-5v-5l-3-3L1542.82,1373.82z  M1362.82,918.82h2l5,4l3,2l2,5l5,6v5l2,2l7,11l-2,4l3,5l4,11l2,4l1,7v3l2,7l3,8l2,4l-1,5l4,6v4l2,4l1,5l2,6l2,3l2,5l1,5l1,5l3,6 l3,4l1,5l2,3l2,6l2,3l2,5v5l3,5l1,5l2,4l4,3v6l4,4v6l3,3l4,10l1,3l4,5l2,5v5l2,3l2,7l3,2l1,5l2,10l2,6l3,4l2,4v5l3,3v7v5l3,3l1,4 l1,7l2,3v5l3,6l1,5v3l2,6l-1,4l3,11l2,11l3,4l-1,6v4l3,5l2,4l-1,4l5,9l1,5l2,5l1,6l-1,6l3,5l-6-2l-8-2h-3l-4-1l-5-1l-4-2l-6-1h-4h-6 l-5-3l-8-2l-3-1l-4-2h-4h-5l-8-2l-3-2l-5-1l-4-1l-4-2l-7,1l-6-2l-4-1l-6-1l-12-3h-4l-3-1l-5-2l-12-3l-4-2h-5l-7-1l-4,1l-6-2h-5l-5-2 l-9-4h-5l-7-2l-2-1l-8-5l-5,1l-4-1l-10-4l-4-2l-6-2l-5-1l-4-3l-13-3l-4,1l-4-4v-4l4-9l2-5l1-6l1-4l5-8l3-10l2-4l3-7v-5l3-3l2-6l4-8 v-7l6-9v-5l1-3l3-5l2-5v-5l3-5l2-3l3-6l1-5l1-3l2-5l1-5l4-5l-1-4l2-3l3-5l5-10l2-6l1-5v-3l2-6l3-5l2-5l1-3l2-6l1-3l4-5l-2-5l3-5l2-6 v-3l1-6l4-5l1-4l1-5l4-6v-5l4-9l2-4v-4l2-5v-5l4-4l6-8l-1-6l2-3l2-4v-6l3-5l2-10l2-3L1362.82,918.82z\";\r\n\r\nexport const A_4 = \"M1175.32,1351.59h-23l-13,1l11,3l5,1l21-1v-1v-1v-1v-1H1175.32z M1180.32,1351.59v1v1v1l8,1l11,2h2h3l-3-1l-5-1 L1180.32,1351.59z M1336.32,1289.59v6l1,8l2-8v-4l1-7h-1h-2h-1h-1L1336.32,1289.59z M1331.32,1281.59h1h1h1h1v-1h-1l-1-10l-1-10 l-1,20V1281.59z M1447.32,1308.59l1,40l1,4l1-38l1-6v-1h-1h-1h-1h-1V1308.59z M1447.32,1305.59h1h1h1h1v-1l-1-20l-1-3v13l-2,10 V1305.59z M1175.32,1267.59l2-13l1,16l2-14l1-10l-1-2h-1h-1h-1l-6,27L1175.32,1267.59z M1146.32,1231.59v3h1h1h1l-2-11l1-5l-1-1 l-1-17l-1,12L1146.32,1231.59z M1663.32,1779.59h-4l-5,1h8l19,2h1v-1v-1h-4h-2L1663.32,1779.59z M1685.32,1769.59v1v1v1v1h7l19-2 l-7-1l-6,1h-9L1685.32,1769.59z M1615.32,1502.59l-16,1l-8,1l4,1l4-1l24,2v-1v-1v-1v-1H1615.32z M1626.32,1500.59v1v1v1v1h1l5-1 l44-1l-44-1l-5-1H1626.32z M1607.32,1459.59l-33,1l-6,1h17l22,2h1v-1v-1v-1v-1H1607.32z M1612.32,1458.59v1v1v1v1h1l7-3l26,1l-11-3 l-22,1H1612.32z M1596.32,1427.59l-22,1l-11,1l11,1l10,2l13-1v-1v-1v-1v-1H1596.32z M1421.32,947.59v1v1v1v1l13,1l10-2l12-1l-8-1 l-21,1L1421.32,947.59z M1420.32,940.59v1v1v1v1v-1l12-1h19l-8-1l-11-2L1420.32,940.59z M1221.32,1197.59h-3l-11,2h2h10l18,1v-1v-1 v-1v-5L1221.32,1197.59z M1243.32,1192.59v1v1v1v4l1,1l29-3l11-3l-11,1l-29-3H1243.32z M1511.32,1172.59l-33,1l-11-1l11,3l18-1l16,2 v-1v-1v-1v-1H1511.32z M1517.32,1162.59v1v7v1v1h1h13l20-2l12-1l-27-3L1517.32,1162.59z M1307.32,1031.59l-15,1l-9,2l10,1h14h1v-1 v-1v-1v-1H1307.32z M1312.32,1032.59v1v1v1v1h1l12-2h7l9-2l-7,1L1312.32,1032.59z M1604.32,1354.59v-3l3,1h1h1l1,1l3,1l19,4l11,1h1 l12,4l9,2h4h1l11,3l10,1l26,6l24-3l-23-9l-19-6h-11h-2l-5-2l-10-2l-5-1l-6-3l-6-3l-2,1h-5l-8-1l-4-1l-4-2l-12-3h-4l-6-2h-9l-3-1 l-5-4l-1-2v-4l-3-7l-4-8v-3l-4-5v-6l-3-5l-2-4l-2-6l-1-7l-3-3v-7v-4l-3-10v-10l-5-5l-1-6v-5l-1-4v-4l-4-8v-4l-1-5v-2l-3-6v-6l-5-4 v-6v-2l-5-6v-6l-5-8l-3-5l-2-5l-3-4l-2-6l-4-4v-3v-4l-5-6l-2-3l-3-6l-4-4l-3-7v-2l-4-5l-2-8l-3-6l-1-4l-2-1l-3-4l-5-8l-1-5l-6-4v-6 l-1-4l-3-4l-2-5v-3l-5-10l-1-3v-3l-3-3l-5-8l-1-7l-2-2l-6-10l-1-3l-1-2l-1-8l-2-2l-2-6l-1-5l-1-6l-6-6v-3l-2-3v-4l-4-10v-6l-3-3 l-1-6l-4-4l-2-5l-9-4l-2-2l-2-3l-6-6l-15-5l-19-6l-8,9l-6,7l-2,4l-4,7v4l-3,5v3l-5,6v2l-1,8l-5,5v3l-1,1l-3,6l-2,4l-4,10l-3,3v4 l-2,4l-1,5l-2,2l-4,10l1,6l-4,6l-1,7l-3,2l-3,7v3l-1,2l-5,8l2,5l-2,2l-5,9v2l-7,12v5l-5,6l-1,2v5l-4,5l-2,4l1,5l-5,6l-2,2l-2,3 l-2,10l-2,3l-1,3l-4,8v5l-3,6l-3,5l-1,6l-1,5l-3,4l-2,5l1,5l-4,4l-2,2l-3,6l-4,7l-2,3l-2,4v8l-2,2l-1,7l-4,3l-1,3v6l-5,4l-3,5v5 l-6,5l-1,1l-2-2h-1l-2-1h-7l-5-2h-6l-15-5h-10l-5,1l-14-4l-8,3h-2l-32,1l10,3l10,7l9,1h5l2,1l12,2l10,1l4,1l5,2l8,1l3,2l12,1h1l4,4 l2,6l1,2l-6,12v3l-1,7l-3,2l1,5l-2,5l-2,11l-4,3l-1,3v7l-4,6l-2,5l-2,8l-5,10l-5,8l1,5l-3,5l-1,1l-4,12v6l-2,3l-2,7l-3,4l-1,2l-3,6 l-1,3l-2,4l-3,7v5v5l-2,4v7l-1,2l-4,7l1,2v8l-1,2l-2,5l1,8l-3,3l-2,4l2,7v6l-2,4l2,8l4,2l2,3l3,5l20,13l22-6l9-11l4-11v-9l-1-5l4-3 l-2-7v-7l2-2l-1-7l4-5v-2v-6v-4l2-3l-1-5l3-5l2-5l2-7l1-6v-6l2-4l1-6l3-3v-2l2-6l2-4l2-6l5-8l1-5l2-5l1-7l4-6v-4l1-1l1-3l2-4l5-7v-4 l1-7l4-4l1-3l1-9l1-2l1-4l1-3v-5l1-3l2-4v-3v-2l-1-3l1,1v-2l2-2h5h2h8l13,2l5,2l10,2l3,1l7,8l9-2l2,1l16,2h1l3,1h4l4,3h8l3,4l13-2 l8,3l3,1l8,2l14,2h5l3,1h5l10,4l7,2l12,1h2l5,1l11,2h4l5,3l3,1l23,2l7,2h3l4,3h7l8,3l11,3h3l6,3l4,2l-5,3l2,1h1l4,3l3,3l1,4l4,8l2,7 v4l3,2l-2,10l4,8l1,4l3,2l1,9l-1,4l3,6l1,2l3,3l-2,13l-1,4l3,5v4l2,2l1,8l1,2l2,6l3,3l2,8l1,4l3,4l2,8v3l1,5l2,3l3,4l1,6l1,7l1,3 l3,2l4,9l2,2v7l2,6l1,2l1,4l5,6v5l4,4l2,8l1,2l2,7l1,5l2,6l1,5l1,6l4,7l2,6l-2,4l4,6l-1,11v4l1,4l-1,7l2,5v8l1,3v5l1,7l-1,3v3l2,7 l-1,6l-1,6l1,4l-3,7l-3,8v5l-2,7l-1,6l-2,4l-2,5l-2,4l-2,3v4l-2,11v8l2,6v8l-1,6l1,7l-1,5l1,2l1,4l2,4l1,6l-1,5l6,7v1l-2,6v4l5,6 l7,15l12,15l13,13l21,9l19-3l20-6l11-8l5-13v-10v-6l-4-4v-4l-5-7l2-3l-3-6v-4l1-10l-1-8v-2l1-9l-2-7l-2-4l-3-7l-2-8l-1-4v-4l-4-6 l-3-5l1-4v-4l-3-6l1-4l-1-6v-6v-6l-1-10l-2-3l2-5l-3-8l-3-6v-9l-3-5l-3-6l1-3l1-4l-1-5l1-4l-2-6v-5l-1-7l1-2l-2-3l1-7v-4l-10-28v-3 l-3-3l-1-9l-4-4v-7l-1-5l-2-7l-1-6l-3-5l-2-3v-3l-6-6l-1-3l-1-8l-2-5l-5-6l-1-2l-4-10l-1-5l-3-8l-2-4l-3-5l-1-3l-1-5l1-3l-4-7v-9v-4 l-3-4v-5l-5-3l-1-6l-2-5v-7v-2l-6-8l2-4l-4-8l-2-4v-2v-6l-2-7l-2-5l-1-2l-4-4l-1-7v-4l-3-5L1604.32,1354.59z M1376.32,936.59v-1l1,2 v1v1v1l-1,5l4,6v3l1,8v3l3,8l6,7l1,2v5l6,6v4l3,6v5l3,6l1,3l2,3l1,6l2,6l1,3l6,4l1,5l2,3l2,6l2,3l3,6l1,5l3,4l2,8l2,1l4,4v5l4,4v6 l4,3l2,9l2,4l5,5l2,6v5l3,5l2,5l3,2l8,9l4,8l2,3l5,7l1,2v4l4,3l3,9v4l2,2l2,6l1,5l2,4v5l9,8v4v3l2,6l-1,4l3,11l2,9l4,5l-1,7v3l3,7 l1,2l-1,4l7,8l1,8l3,5l2,1l-2,1l2,1v1l1,1v1v1l-5-1l-2-1l-3-4h-11l-8-4l-9,2h-1l-4-3h-4l-18-2l-12-3h-4l-6-1l-6-1h-2l-4-2l-10-3 l-3-1l-7-1l-15-3h-5l-3-1l-6-2h-13l-4-2h-5l-10-6l-6,2l-5-1h-5l-3-2l-10-1l-5-2l-8-2l-3-2l-9-1l-5-2l-5-1l-12-5l-2-1l-7-2l-5-1l-1-1 l-3-3l3-5l3-11l5-4l1-4l1-6l2-8l2-10l3-4l3-6v-6l5-3l1-3l5-10v-7l3-9v-4v-2l3-5l3-7v-5l2-3l4-6l3-3l1-5v-3l3-5v-8l5-4l-1-4l4-4l1-2 l4-9l4-7l1-6v-3l1-5l3-5l2-5l2-3l2-6l2-4v-8v-1l4-5l3-7v-3v-8l3-5l1-2l1-7l6-6v-4l5-7v-6v-4l2-5v-5l-2-3l1-2l1-1l2-3l1-1l1-1v-1 L1376.32,936.59z\";\r\n\r\nexport const A_5 = \"M1447.21,1272.97c-18,0-68-15-111-15c-19,0-27-9-25-23c3-22,16-54,23-70c18-41,51-12,79,26 C1440.21,1227.97,1462.21,1272.97,1447.21,1272.97z M1458.21,1391.97c58,15,83,190,83,244c0,56-88,222,24,312s200,97,267,9 c79-104,10-196-10-275c-20-80-128-241-73-229c56,12,111,5,129-38c19-45-168-39-181-105c-20-100-82-237-145-313 c-66-80-160-213-213-175s-222,322-236,359c-14,38-35,42-71,37c-38-5-108-4-62,44s98,24,74,50c-28,30-91,202-45,266 c38,53,148,76,208,45c51-26,65-223,91-250C1329.21,1340.97,1387.21,1373.97,1458.21,1391.97z\";\r\n\r\nexport const A_6 = \"M1390.78,1228.85c-14,7-21-6-58-1c-8,1-10-8-6-20c5-16,10-22,19-35c6-8,14-9,28,12 C1388.78,1206.85,1403.78,1221.85,1390.78,1228.85z M1437.78,1414.85c8,1,46,144,46,224c0,87-83,203,61,312c121,91,268,94,336,9 c93-116,25-166-3-275c-8-31-114-206-92-202c86,16,157-9,152-65c-8-86-174-27-191-105c-22-100-85-226-161-313 c-108-124-244-221-310-175c-76,53-222,336-230,359c-1,3,5,22-33,17c-91-12-147,15-98,64c10,10,74,49,73,50c-75,75-92,205-47,266 c37,50,211,78,278,45c68-33,75-169,90-205C1317.78,1398.85,1367.78,1405.85,1437.78,1414.85z\";\r\n\r\nexport const A_ALL = [A_1, A_2, A_3, A_4, A_5, A_6];\r\n\r\nexport const B_1 = \"M1277.36,1679.82c0-29-1-60-1-89l1-91c0-19,1-38,2-59c27-4,54-5,79-5c45,0,78,9,104,19c49,19,117,51,144,88 c23,32,39,62,33,100c-7,43-61,82-114,99c-67,22-123,22-237,22l-2-18C1283.36,1722.82,1277.36,1701.82,1277.36,1679.82z  M1270.36,1228.82c0-38,2-73,2-106v-42c35,22,38,22,86,43c46,20,84,49,129,84c17,13,30,41,41,81c-13,41-35,74-47,85 c-20,18-52,33-78,38c-11,2-47,10-86,15l-38,5c2-42,6-87-1-128C1278.36,1303.82,1270.36,1249.82,1270.36,1228.82z M1250.36,1436.82 l8,4l11,1c-3,19-3,40-3,58c0,31,0,60,0,91v89c0,23,9,44,10,68l1,16c-31,0-65-1-92-4l4,8c30,3,58,4,89,4c1,9,3,20,3,29l9-3 c0-9,0-17-1-26c130,0,172-3,239-22c57-16,111-64,119-106c8-40-10-73-34-105c-30-41-74-65-146-90c-26-9-68-21-114-21l53-9 c24-4,54-21,81-40c14-10,38-46,51-88c-9-35-19-69-46-90c-48-37-84-60-128-82c-39-20-53-21-88-47c-16-12-47-31-70-38l11,10 c19,11,25,15,43,27c0,19,3,36,3,52c0,34-1,68-3,106c-1,19,9,76,9,76c6,40,2,85,0,128L1250.36,1436.82z\";\r\n\r\nexport const C_1 = \"M1218.4,1479.6c4.8-37.8,14-87.8,23.9-123l31.1-98.8l65.4-46.3c38-26.5,133.3-88.7,117.1-77.9c40.8-29,84.8-52.5,131.5-69.9c6.8-2.5,27.9-7.9,28.8-5.2L1597,1069c-34.5,11.5-66.8,27.6-98,45.7c-5.8,3.4-146.3,98.3-152.2,102.2l-66.2,46.8l-28.3,90.2c-13.7,56.4-25.4,86.7-25.4,143.2c5.9,46.2,16,64.2,42.1,90.8c27.7,23.2,53.9,46.3,82.8,72c24,17.8,50.4,33.2,77.1,47.4c91,43.7,176.5,68.9,176.7,68.2c-0.9,3.5-20.3-0.6-30.7-3c-52.2-10.9-115.1-40.3-171.9-69.7c-56-29.2-51-33.7-149.6-116.5C1219.8,1539.9,1218.4,1528.5,1218.4,1479.6z M1218.9,1485.1l0.6-11l0.7-2.9l0.7-6l0.8-4.9l0.7-4l0.8-4.9l0.8-6l1.8-6l-0.1-2.9l0.8-5l0.9-4.9l1-6l0.9-5.9l1-4.9l1-5l1-2.9l1-5.9l1.1-3.9l1.1-6.9l1.1-3.9l1.2-5.9l1.2-3.9l1.2-3.8l1.3-5.8l2.8-9.5l1.5-4.7l1.4-5.7l1.5-2.7l1.5-5.7l1.5-5.7l1.5-4.7l1.4-3.7l1.5-5.7l1.5-4.7l1.5-3.8l1.5-4.7l1.5-3.7l1.4-5.7l1.5-3.7l1.5-5.7l1.5-4.7l1.5-4.7l1.4-5.7l0.5-2.7l5.6-8.6l3.1-1.9l5.1-3.9l5.1-2.9l3-1.9l4.1-2.9l4.1-2.9l5.1-3.8l3.1-1.9l4.1-2.9l8.2-5.8l3-2.9l4.1-2.9l5.1-2.9l9.2-5.7l4.1-3.9l6.3-4.7l6.2-3.8l3.2-1.8l3.2-2.8l6.2-3.8l4.2-2.9l2.2-0.8l5.2-3.8l3.3-2.8l4.3-2.9l5.2-3.8l5.3-1.9l4.4-3.8l2.3-1.9l5.4-3.9l3.4-1.9l5.5-3l3.5-2.9l4.5-2l6.7-4.1l3.7-3l5.7-4.1l2.6-2l6.1-2.7l1.1-1.3l2.3-1.7l4.1-2.8l5.1-3.8l2.1-1.8l4.2-2.7l4.2-2.7l4.2-2.6l5.2-2.7l4.3-3.5l5.3-2.6l4.3-2.5l3.3-2.5l4.3-2.4l3.4-1.4l6.4-3.4l3.4-1.3l4.4-3.3l5.4-2.2l2.5-1.2l11-5.3l4.5-1.1l2.5-2l6.6-3l2.6-1l4.6-1.9l4.6-1.9l4.6-1.8l6.6-1.8l7.4-4.3l4.8-1.4l4.9-0.2l4.9-1l9.7-1.7l-4.6,2.7l-8.2,4.5l-2.8,1.3l-7.5,3.2l-3.6,1.6l-4.6,0.7l-6.6,2.8l-3.6,1.8l-5.6,1.8l-2.5,2l-6.5,2.9l-2.5,1l-5.5,2.1l-4.5,2l-5.4,3.2l-4.4,2.1l-2.4,1.2l-4.4,2.3l-6.4,3.3l-2.3,1.3l-4.3,2.3l-5.4,2.4l-5.3,3.4l-4.2,1.4l-6.5,5.2l-6.1,2.7l-3.1,2.8l-5.1,2.7l-4.2,2.8l-3.1,2.7l-8.2,5.6l-3.1,1.7l-6.1,3.8l-2.1,1.7l-10.2,6.6l-3.2,2.7l-3.1,1.8l-4.1,2.8l-5.1,3.7l-4.1,2.8l-5.1,2.8l-3.2,2.8l-3.1,2.7l-6.1,3.8l-2.2,0.8l-8.3,6.6l-5.2,2.9l-3.2,1.8l-6.2,3.8l-2.3,1.9l-6.3,3.9l-8.7,5.9l-3.3,2.9l-4.4,1.9l-3.2,2.9l-5.8,3.5l-6.6,5.6l-4.2,1.9l-4.1,4l-3.1,1.9l-3.2,1.9l-6.1,4l-4.2,2.9l-3.1,2.9l-5.1,2.9l-4.2,3l-4.1,3.9l-4.1,2.9l-4.2,2.9l-4.1,1.9l-7,4.5l-1.8,6.1l-2.5,6.8l-1.5,2.7l-0.5,5.8l-1.4,4.7l-2.5,3.8l-1.5,6.7l-1.5,4.8l-0.5,3.7l-1.5,4.8l-1.5,3.7l-1.5,5.8l-2.5,4.7l-1.5,5.8l-2.9,9.5l-0.5,3.7l-1.5,3.8l-2.7,9.6l-2.2,7l-1.3,4.9l-1.2,2.9l-0.3,5.9l-1.3,4.9l-1.2,3.9l-1.3,6.9l-1.3,3.8l-1.2,4.9l-2.2,5.8l-1.2,3.9l-1.2,3.9l-1.1,6.8l-1,3.9v3.9l-0.9,5.9l-1.9,5.9l0.2,4l-0.7,5.9l-0.6,3l-0.6,7l-0.5,3l-1.3,7l-0.4,4.1l-0.2,4l0.8,7.1l-0.1,3l0.7,10l-0.3,7l1.8,3.9l-0.1,5.9l2,3.8l0.1,5.8l1.3,2.7l1.4,4.7l2.6,5.6l0.8,4.5l2.9,5.4l2.2,4.3l2.3,3.2l1.6,4l4.7,5l1.9,2.9l2,2.8l4.2,4.7l2.2,4.6l3.4,3.6l7.2,4.7l4.8,4.2l3.8,4.2l2.8,3.3l4.8,2.2l4.8,4.2l1.8,1.3l3.7,4.2l8.6,6.6l3.7,3.3l3.8,3.2l2.7,2.3l3.8,3.3l3.7,4.3l3.8,2.3l4.7,4.3l2.7,2.3l3.8,3.3l4.7,4.4l3.8,3.3l8.8,7.3l2.1,1.9l4.1,1.9l5.1,3.8l3.2,2.8l6.3,3.7l2.2,0.7l4.3,2.7l5.3,3.6l4.3,2.6l3.3,1.6l6.4,4.5l4.3,1.5l2.4,2.5l4.4,1.4l3.4,2.4l5.5,3.4l12.8,5.8l3.6,2.2l7.8,4.2l2.7,0.1l5.7,2.2l4.7,3.1l9.5,4.1l4.8,3.1l3.8,1l5.8,3l1.8,1l4.8,3l8.9,1.9l3.8,2l6.9,2.9l3.8,0.9l5.9,0.9l4.9,1.9l3.9,1.8l5,1.9l4.9,1.8l5.9,1.8l4,1.8l5,1.8l4,1.7l5.9,2.7l4,0.7l7,1.7l2.9,2.6l5.9,0.6l5.7,2.5l4.6,0.5l3.3,1.3l2.9,0.9l4.9,1l-3.5,0.6l-5.2-0.5l-7.2-0.7l-5.2-2h-3.1l-12.1-2.3l-2.8-1.1l-5.9-1.2l-4.8-1.3l-3.8-1.4l-5.8-2.4l-5.8-1.5l-3.8-0.6l-5.7-2.6l-4.8-1.6l-3.7-1.7l-4.7-0.8l-4.7-1.7l-3.7-1.9l-4.7-1.8l-6.7-2.9l-3.6-1.9l-5.6-2l-2.7-1l-6.6-3l-2.6-1l-5.6-2.1l-5.6-3l-2.6-1.1l-4.5-2.2l-5.6-2.1l-3.5-2.2l-4.6-2.2l-10-5.4l-4.5-1.2l-4.6-3.3l-5.5-3.2l-4.5-2.3l-4.4-1.3l-2.5-1.3l-9.9-5.6l-3.4-2.4l-5.4-2.3l-5.3-2.4l-4.2-2.5l-4.2-2.4l-4.1-2.6l-3-1.6l-7-5.5l-2.9-2.8l-4.9-3l-1.9-2.2l-6.9-5.2l-3.9-3.2l-1.9-2.4l-4.9-3.4l-2.9-2.4l-5.2-5l-3.6-2.3l-4.8-5.8l-5.7-4.8l-5.8-5.3l-3.8-2.3l-1.8-1.3l-3.8-4.3l-5.8-4.3l-2.8-2.3l-3.8-3.3l-3.8-4.2l-3.8-2.3l-2.8-3.2l-4.8-3.3l-4.8-4.2l-3.8-3.3l-2.9-3.2l-6.8-6.4l-3-4.2l-2.9-3.3l-1.9-3.2l-3.8-6.3l-2.7-3.3l-2.6-5.4l-1.5-3.3l-2.2-5.5l-2.1-2.4l-2.8-6.6l-1.6-4.6l-2.3-9.4l-0.8-4.9l-0.7-2.9l-0.4-4.9l-0.3-6.1l-0.2-6l-0.1-3l-0.1-6.1V1485.1z\"\r\n\r\nexport const D_1 = \"M1269.55,1421.32c3,58,10,284,15,314c2,12,8,14,19,9c37-17,77-26,112-48c52-33,113-73,149-123c18-25,51-71,72-111 c9-17,43-75,44-81s-29-55-45-79c-27-40-94-96-143-129s-67-39-137-69c-28-12-64-29-100-34c-8-1-12,3-12,9c0,5,1,74,7,131 C1251.55,1219.32,1266.55,1367.32,1269.55,1421.32z M1148.55,1030.32c-13-10,28,7,65,18c14,4,19,6,21-1c2-6,9-3,9,3c0,5,1,10,24,15 c41,9,80,27,119,44c78,34,80,28,174,105c33,27,62,57,84,87c14,19,44,80,44,82c0,1-25,51-29,57c-32,48-85,132-92,143 c-28,44-96,87-152,123c-20,13-88,38-118,48c-6,2-10,5-8,16c1,5,4,20,4,28c0,19-3,6-11-20c-5-16-7-19-23-15c-11,3-58,19-58,19 c-3,0-7,2-10,1c-2-1-1-3,3-5c21-10,31-14,68-24c11-3,16-5,14-16c-1-7-14-307-15-316c-6-51.9-16-188-18-205c-4-31-8-136-8-138 c0-13-6-16-20-22C1197.55,1049.32,1163.55,1042.32,1148.55,1030.32z\";\r\n\r\nexport const E_1 = \"M1556.32,1228.02c-3,4-9,3-22,5c-39,6-126,18-147,22c-19,4-36,1-56,1c-18,0-66,3-72,3c-7,0-12,2-12,8 c0,3-2,91-3,106c-4,60-6,66,3,153c3,28,4,56,7,83c2,20,3,25,5,34c0,4,3,5,11,4c19-2,41-3,60-5c31-3,59-4,89-6c28-2,57-2,85-4 c23-2,46-4,69-7c11,0,23-1,35-2c-2,6-6,7-11,7c-21,3-91,10-98,10c-45,0-89,3-134,7l-93,8c-8,1-14,2-12,10c1,5,1,62-1,96 c-1,14-2,35,1,47l-12,24c-3-5,2-14,4-27c-1-32,0-58,0-91c0-14,1-43-1-57c-40,4-47,10-52,8s-1-4,1-5c10-5,38-7,44-9c5-2,7-5,7-9 c-3-15-7-45-7-55c0-28-5-57-8-84c-3-31-6-63-4-95c1-19,5-61,6-73c2-19,1-39,1-59c0-13-1-16-19-13c-6,1-12,4-18,0c0-6,15-7,26-8 c8-3,10-4,10-10c0-25-4-49-6-74c-1-16-4-32-7-49c-1-5-2-42-2-44c0-6-3-9-11-8c-10,3-36,9-43,6l6-4c10-3,21-7,30-8c23-3,45-8,65-13 c34-8,69-14,103-22c25-6,52-9,78-11c24-2,47-2,71-1c42,2,85-2,129-13c4-1,10-3,14,1c-2,8-51,10-83,16c-21,4-41,4-62,4 c-33,0-65,0-98,4c-39,5-115,22-146,29c-13,3-24,5-35,9c-6,2-10,6-10,12c0,9,0,20,1,31c1,15,5,42,6,50c2,14,8,62,8,85c1,5,4,6,10,6 c8,0,51-2,63-2c32,0,54,2,119-9c23-4,86-14,107-14C1547.32,1226.02,1554.32,1227.02,1556.32,1228.02z\"\r\n\r\nexport const F_1 = \"M1659.14,1047.32c-9,6-22,10-35,11c-17,1-35,2-51,2h-38c-34,0-68,3-103,5c-15,1-31,3-46,5c-38,5-76,6-114,6 c-27,0-54-2-81-2c-4,0-10,1-14,2c-1,1-2,3-2,4s2,3,3,3c3,0,8-1,12-1c7,0,17,0,24,1c8,1,14,2,15,12l3,34c1,16,3,33,3,49v68 c-2,20-3,40-1,61c1,13,1,17-11,17c-5,0-4,8,2,8c7,0,12,2,12,10c0,27,2,54,3,81c1,19,2,39,4,58c4,38,6,77-4,115c-3,11-3,22-5,32 l-13,65c-2,11-7,23-7,35c0,18,6,36,1,54c0,2-1,5,0,5c3,0,5-1,5-2c2-6,3-12,3-18c-3-23-3-46,5-69c3-9,3-18,6-27c4-25,7-50,12-75 c8-39,10-79,5-118l-3-24l-5-92v-19c0-9,1-13,15-13c26,0,53-2,81-2c11,0,25,1,37,0c30-2,60-2,89,2c6,0,13,0,19,0c3,0,10-2,12-5 c-3-1-10-1-13-1l-43-3c-16-1-33-1-48-1c-44,0-86,0-129,2c-19,1-21,0-23-17s0-34,1-51c2-26,1-51,0-77c-1-27-3-53-5-80 c-1-14,4-15,19-14c37,2,73,0,111-3c22-2,42-6,64-7l91-5c15-1,31-1,47-1h32c15,0,30-2,44-4 C1660.14,1061.32,1660.14,1063.32,1659.14,1047.32z\";\r\n\r\nexport const G_1 = \"M1113,1368.1c0,54-4.4,108.5,9.2,155.6c25.1,87.8,51.8,124.5,131.4,182.2c63.9,46.3,130.3,68.2,209,68.2c93.3,0.1,136.4-134.4,165-224.2c-2.9,72-17.3,221.8-16.6,231.7l7.7-11.7c-0.3-3.8,1.6-28.2,4.2-61c4.5-55.5,15.5-134.1,15.6-173.2c25.1,2.9,55.6,6.1,83.8,10l-13.8-9c-28.5-3.9-49.5-7.1-74.8-10l-5.6-0.6c-63-7.1-121.7-10.7-200.2-15.7c-6.3-0.4-15.9-2.9-26.7-3.3c-18.5-0.7-48-3.8-59.6-2.6l10,3.5c17.4,1.6,57.8,9.2,75.8,10.4c77.7,5,132,9.5,194.4,16.4c-29.4,90-63.3,230.4-159.2,230.3c-76.9,0-142.2-21.5-204.6-66.8c-78.1-56.6-103-91.1-127.5-176.9c-10.5-36.6-10.8-78-10.2-121.1c2.5-132.5,19-228.4,119.9-289.9c38.5-23.5,82.2-49.3,126.1-49.3c35.5,0,71.2,10.8,104.5,20.5c19.2,5.7,55.2,15.7,80.4,22l0.2-3.3c-21.4-8.4-58-21.4-78.4-27.4c-33.4-9.7-70.1-19.8-106.7-19.8c-45.9,0-91.6,24.5-130.1,48.4C1136.2,1163.7,1113,1249.8,1113,1368.1z M1113.5,1362.6v12.1v5l-0.1,5.1l-0.1,5v4.1l-0.1,6l-0.1,3.1l-0.1,7.1v3l-0.1,7.1v4l-0.1,5.1v4l0.1,7.1v4l0.1,4.1l0.2,5l0.1,6.1l0.3,4l0.3,5l1.4,7.1l-0.6,5l0.5,4l1.6,5l0.7,5l-0.3,6l1.9,3.9v5l1.1,3.9l1.2,4.9l2.7,9.7l1.4,4.8l2.5,6.9l1.5,4.8l1.6,2.8l1.6,6.8l0.6,3.7l1.8,4.7l1.7,3.7l1.8,5.7l1.9,3.6l3,5.6l2,5.6l3.1,4.5l1.2,3.5l3.2,5.4l0.4,2.3l3.4,6.4l2.6,4.2l1.6,2.2l2.7,4.2l3.8,5l3.9,5.1l2,2.9l2.1,2.9l3.2,3.8l3.2,3.8l3.3,3.7l5.5,5.7l1.4,1.6l4.6,4.5l3.6,3.5l3.7,3.4l2.7,2.4l3.8,3.4l3.8,3.3l3.9,3.2l3.9,3.2l3.9,3.2l2.9,2.1l6,4.1l4,3.1l4,3l4.1,4l5,2l6.2,5.9l4,2.9l4.2,2.8l4.1,2.7l3.2,1.7l3.2,2.7l5.3,2.6l5.3,3.5l4.3,2.5l2.3,1.4l6.4,3.4l2.4,1.3l6.4,3.2l2.5,1.2l5.5,1.1l4.5,3l3.6,3l4.6,0.9l5.6,2.8l4.6,0.7l4.7,2.7l5.7,1.6l2.7,0.6l5.7,2.5l3.8,0.4l6.8,2.3l4.8,1.2l2.8,1.2l5.9,1.1l3.8,1.1l6.9,0.9l2.9-0.1l5.9,0.8l5.9,1.8l3.9,0.7l6,0.6l3.9,0.5l6,0.5l3.9,0.4l5,0.3l5,0.3l3.9,0.2l7,0.2l4,0.1l10-0.1l5-0.4l5.9-0.7l2.9-0.9l4.8-1.2l6.8-1.4l2.7-1.8l6.6-1.9l4.4-2.2l3.4-2.4l5.3-3.6l2.1-0.8l6-4l1.9-3.2l5.8-3.2l2.6-3.5l4.6-3.5l3.4-3.7l1.3-3.8l4.3-3.8l3.1-4l3-4l3-3l2.8-4.2l1.8-3.2l2.7-4.3l2.6-4.3l3.5-5.3l1.5-3.4l2.4-4.4l2.4-6.5l2.3-2.4l3.2-6.6l1.2-2.5l3.1-5.6l2.1-4.6l1.1-5.6l2-2.6l1.9-6.6l3-3.7l0.8-4.7l2.9-4.7l0.8-4.7l1.8-3.7l1.8-5.7l2.7-5.7l1.7-3.8l0.7-3.7l2.6-4.8l1.7-4.8l1.6-6.7l0.6-2.8l2.6-6.8l0.5-4.8l1.6-2.8l1.5-6.8l1.5-2.7l1.6-6.8l3.3-5.1l0.5,11.4l-1,5l-0.3,5.1l-0.3,4.1l-0.3,5l0.7,5.1l-0.3,7.1l-0.4,3l-0.3,6.1l-0.3,5.1l-0.4,5.1l-1.4,4.1l-0.3,7.1l-0.4,4.1l0.6,4.1l-0.4,5.1l-1.4,5.1l-0.4,5.1l-0.4,5.1l-0.4,7.1l-0.4,5.2l-0.4,4.1l-0.4,4.2l-0.4,7.1l-0.4,5.2l-0.4,4.2l-0.5,5.1l-0.4,6.2l-0.4,4.2l-0.4,6.2l-0.5,3.3l-0.4,5.2l-0.4,6.3l-0.4,5.2l-0.5,4.3l-0.4,6.3l-0.4,6.3l-0.4,5.2l-0.4,5.2l-0.4,5.2l-0.4,4.1l-0.3,4.8l-0.3,3.9l-0.2,5.4l1.8-3.2l5-7.9v-4.1l0.3-5.1l0.3-4.1l0.4-6l0.3-4.1l0.4-6.1l0.4-6.1l0.4-3.1l0.4-6.1l0.4-6l-0.6-3.1l0.8-10l1.4-7l-0.5-4.9l1.5-4l0.5-5l0.4-5.9l0.5-3l0.6-5.9l0.5-5l0.5-6l0.5-4.9l0.6-5l0.5-3l0.6-6l-0.5-4.9l1.5-5l-0.4-6l1.5-3l0.5-5.9l-0.5-6l0.6-3l1.5-6l0.5-5l-0.6-4l0.5-6.9l1.5-4l-0.6-5l0.4-4.9l1.4-6l-0.7-2.9l0.3-5l1.3-5.9l-0.5-4.1l0.7-11l6.1,0.4l2.9-0.5l5.9,0.6l6,1.5l4.9,0.6l3.9,0.5l4,0.6l5.9,0.6l3.9,0.5l7,0.6l3.9,0.6l3.9,0.6l7,0.6l3.9,0.6l3.9,0.7l9.5,0.6l-2.2-1.3l-5.6-3l-10.6-2.7l-5-0.7l-4-0.7l-6-1.7l-4,0.3l-5-0.7l-5-0.7l-5-1.7l-5.9-0.6l-4-0.7l-4-0.7l-9.9-1.2l-5-0.6l-8.8,0.1l-6.8-1.9l-4.9,0.5l-5-1.5l-7-0.5l-5-0.5l-3.9,0.5l-4-1.5l-5,0.5l-6-0.5l-4-1.4l-6.9,0.5l-5-0.4l-4-0.4l-6-1.4l-5-0.4l-4-0.4l-6-0.4l-4,0.6l-4-0.4l-5-1.3l-5,0.6l-6-1.4l-6-0.3l-3-0.4l-6-0.3l-4.1-0.3l-7-0.4l-3-0.3l-7,0.7l-3.1-1.4l-6-0.3l-6-0.3l-4.1-0.4l-4,0.7l-12.1-1.6l-3-0.3l-7,0.6l-5.1-0.3l-8.3-1.9l-7.3-0.9l-3.3-0.8l-5.4-0.6l-10.4,0.4l-4.9-1.3l-5-0.3l-6-0.4l-5-0.3l-4,0.6l-6-1.3l-6.1-0.3l-5-0.2l-5-0.2l-4.8-0.1l2.2,1.1l10,2.3l5.1,0.7l4,0.7l6.1,0.8l4,0.7l15.2,2.4l4.1,0.7l5.1,0.8l7,0.7l3.1,0.8l6.1,0.6l5.1,0.6l10,0.7l6,0.4l4,0.3l4.1,0.3l5,0.4l12.1,0.7l4,0.3l4-0.6l5.1,1.3l6,0.4l6,0.3l4,0.4l6,0.4l3,0.4l7,0.4l3,0.4l9.9,0.8l7-0.6l4,1.4l5.9-0.6l4,1.4l5.9,0.5l4,0.4l5.9,0.5l5,0.4l2.9,0.5l6,0.5l5.9,0.4l4,0.5l4.9,0.5l5,0.5l5.9,0.5l3,0.6l5.9,0.5l4,0.5l12.1,1.1l-1.7,5.7l-1.5,5.7l-1.6,2.8l-1.5,5.7l-1.5,5.8l-1.4,2.7l-1.5,6.8l-3,9.5l-1.6,3.7l-1.5,3.8l-1.5,5.7l-1.6,5.8l-1.6,2.7l-2.5,6.8l-0.7,2.7l-1.6,4.7l-1.7,6.7l-1.6,4.8l-1.8,4.6l-1.7,3.7l-1.8,3.7l-1.8,5.7l-1.9,4.6l-1.9,3.6l-2,4.7l-2,4.5l-2,5.6l-2.1,5.5l-2.2,4.6l-2.2,3.4l-2.3,5.5l-2.4,2.4l-2.4,5.4l-2.5,3.3l-2.6,4.3l-2.7,4.2l-2.7,4.1l-2.9,5.1l-3,4l-3,3l-3.2,4.8l-3.3,4.7l-3.4,2.6l-4.5,4.5l-2.6,2.4l-4.8,4.2l-3.9,2l-4,3.8l-4.2,1.7l-3.3,3.4l-5.4,1.2l-2.5,1l-6.6,2.7l-3.7,1.4l-6.8,1.2l-2.9,0.9l-4.9,0.7l-4.9,0.4l-12,0.1l-9,0.7l-6-0.2l-4.9-0.3l-3-0.3l-6-0.5l-4.9-1.4l-5-0.6l-4.9-0.6l-3.9-0.7l-6,0.2l-3.9-0.8l-4.9-1.9l-4.8-1l-6.9-1.1l-3.8-1.1l-3.8-0.2l-9.6-3.7l-6.8-2.4l-4.7-1.5l-2.7-0.6l-5.7-1.7l-4.7-1.7l-3.6-1.8l-4.6-1.9l-4.6-0.9l-6.5-3l-4.5-1.1l-3.5-2.2l-3.5-2.2l-6.4-3.3l-4.4-2.3l-3.4-2.4l-4.3-2.5l-4.3-2.5l-3.2-1.6l-4.3-2.7l-4.2-2.7l-4.1-3.7l-4.1-2.8l-5.1-2.9l-9.2-5.9l-2.1-3l-4-3l-4-2l-5-3.1l-4-3.1l-5-3.1l-2.9-4.2l-4.8-4.2l-2.9-2.2l-4.8-3.3l-1.7-2.3l-4.7-4.4l-4.6-4.4l-2.5-2.4l-4.5-4.5l-2.4-1.6l-3.4-4.6l-3.2-3.7l-4.2-3.7l-3.1-4.9l-2-1.8l-3.9-4l-1.9-5l-2.7-4.1l-1.6-3.1l-4.5-5.2l-2.5-5.3l-0.4-2.3l-3.2-5.4l-2.2-4.4l-2.1-3.5l-2-4.5l-3-6.6l-0.8-2.6l-1.9-4.6l-1.7-4.7l-1.7-4.7l-2.6-5.7l-1.6-5.8l-1.5-4.7l-1.5-2.8l-1.5-5.8l-1.4-3.8l-1.7-9.7l-1.2-5.9l-2.1-4.9l-1-5l-0.9-5l-0.8-6l0.3-5l-1.6-4.1l0.4-5l-1.4-6.1l0.6-4.1l-0.4-5l-0.3-6.1l-0.2-4.1l-0.2-6.1l-0.1-3.1l-0.1-6v-5.1l-1.1-4.1v-5.1l1-6.1l0.1-5.1v-6.1l-0.8-8.2l1.1-7l0.2-4.1l-0.9-4l0.2-7.1l0.2-5l0.2-5.1l0.2-3l0.3-7.1l0.3-4l0.3-4l0.3-5.1l0.4-7l1.4-5l0.5-3l0.5-7l0.5-5l0.6-4l-0.4-4l1.6-7l-0.2-3l1.7-5.9l-0.2-5l0.9-3.9l1.9-5.9l1-4.9l1-5.9l1.1-4.8l1.2-3.9l0.3-4.8l1.3-3.8l1.4-4.8l2.5-5.7l0.5-4.8l1.7-3.6l1.7-6.7l2.8-4.6l1-4.6l2-2.5l2.1-4.5l1.1-6.4l3.3-3.4l2.4-4.4l2.5-5.3l2.6-2.2l2.7-6.1l3.7-4.2l1.9-3l3-4l3.1-3.9l3.1-3.8l3.3-3.7l3.4-4.7l3.4-3.6l2.5-1.5l5.6-5.5l2.7-3.3l4.8-3.3l2.8-2.2l3.9-3.1l5-4.1l3.1-2.9l4.1-1.9l5.1-3.8l5.2-3.7l8.6-5.3l2.4-1.7l4.3-2.6l5.4-2.6l5.4-3.6l3.4-1.5l4.4-2.5l5.5-3.4l3.4-1.5l4.5-2.3l4.6-2.3l3.6-1.2l6.6-3.2l4.6-3.1l4.7-1l3.7-1.8l5.8-2.8l3.8-0.7l4.8-1.5l3.9-1.4l5.9-1.3l4.9-1.1l5-0.9l5-1.7l5.1,0.4l4-0.3h12.2l5.1,0.2l4-0.7l5.1,1.5l6.1,0.6l3,0.7l7,0.8l5.1,0.8l5,1l4.9,1l3,1.1l7,0.2l4.9,1.2l4.9,1.3l3,2.3l5.9,1.4l3.9,1.3l6.9,1.4l4.8,1.5l3.9,0.4l9.5,2.8l4.7,2.3l5.7,1.4l4.7,0.3l2.8,1.3l4.7,1.4l4.7,1.3l4.8,1.3l4.7,1.3l4.7,1.3l4.8,1.3l11.4,3.5l3.9,1.3l5.7,1.2l4.8,0.2l3.3,1.3l-2.9-3.2l-4.6-1.7l-6.5-2.7l-4.6-0.7l-2.6-1.7l-6.6-1.7l-4.6-1.6l-2.7-1.7l-5.1-1l-5.1-1.2l-5.7-1.6l-3.6-2.6l-5.7-0.6l-2.7-1.5l-4.6-2.5l-5.6-1.4l-10.3-1.8l-3.8-1.3l-4.8-2.4l-4.7-0.3l-3.8-2.3l-6.8-1.3l-3.8-0.2l-4.8-1.2l-4.8-1.1l-5.8-2.1l-4.9-1l-4.8-1l-2.9,0.1l-5.9-1.9l-4.9-0.7l-3.9-0.7l-5.9-0.6l-3.9-0.5l-7-0.4l-3.9-0.3l-3.9-0.1l-12,1l-3-0.7l-6,0.4l-10.9,1.5l-3,0.9l-6.9,1.1l-3.8,2.2l-3.9,0.4l-5.8,1.5l-3.7,2.6l-6.8,1.7l-3.7,1.8l-5.6,1.9l-4.6,1.9l-4.6,2.1l-3.6,2.1l-3.5,2.2l-5.5,1.3l-4.4,3.3l-4.5,2.3l-5.4,2.5l-3.4,2.4l-4.3,2.5l-4.3,2.6l-8.6,4.2l-9.6,6.3l-2.2,2.7l-5.1,1.9l-4.1,2.8l-3.1,3l-5,4l-4,3.1l-3.9,3.1l-1.8,1.3l-3.7,3.3l-4.7,4.3l-3.7,3.5l-1.5,2.5l-5.5,5.5l-3.4,2.7l-3.3,4.7l-3.2,2.8l-4.2,4.8l-1,1.9l-4,6l-2.8,3.1l-3.8,5.1l-0.7,3.2l-3.6,4.2l-2.5,4.3l-1.3,4.3l-2.3,3.4l-3.2,6.5l-1.1,4.5l-3,4.5l-0.9,2.6l-2.9,5.6l-1.7,3.7l-1.6,4.7l-0.6,4.7l-2.4,4.8l-1.4,6.8l-1.3,2.8l-1.2,5.8l-1.1,3.9l-1.1,6.9l-1,4.9l-0.9,3.9l-0.8,3.9l-0.8,5.9l-0.7,5l-0.7,5.9l-0.6,4l-0.5,6l0.5,3l-1.4,5l-0.4,5l-0.4,5l-0.3,5l-1.2,5l0.8,5l-0.2,7l-0.2,5l-0.1,5v5.1L1113.5,1362.6z\";\r\n\r\nexport const H_1 = \"M1179.82,995.82c3,8,6,19,6,28c0,44,2,92,2,136v168c0,24,2,30,19,32c46,6,91,14,139,19c28,3,57,3,84,5c26,2,52,2,76,1c22-1,24-2,24-27c0-15-1-32-1-47c0-27,1-55,1-82v-29c0-48,2-97,2-146c0-5-2-8,0-13c1-3,2-6,3-6c2,1,3,3,4,6c2,6,1,11,1,17c0,25-2,51-2,79c0,22,0,42,0,63c0,18-1,33-1,50c0,38,1,74,1,112c0,21,1,24,13,25c55,5,83,3,115,8c-32,0-48,2-103,0c-26-1-29,3-29,42c0,30-2,56-2,87c0,11,0,22,0,36l1,256c0,4-1,9-1,15c0,2-1,5-4,8c-3-4-4-7-4-10v-14c0-65,0-282,0-347v-57c0-13-4-18-19-18c-13,0-93-2-93-2c-12,0-24-1-37-2c-17-1-32-1-49-3c-33-4-68-10-100-16c-37-7-39-3-40,39c-1,48-8,195-8,244c0,9-1,18-1,27c0,1-3,3-3,3c-2,0-5-2-5-4v-19c0-69,8-237,10-306c2-66.99,1.07-131.61-1-201c-1.41-47.02,0-94,0-141C1177.82,1006.82,1177.82,1000.82,1179.82,995.82z\";\r\n\r\nexport const I_1 = \"M 1441.82,1719.82 l-37,-394 l-11,-300 l-5,-13 l-4,5 l12,308 l37,396 l16,100 z\";\r\n\r\nexport const J_1 = \"M1144.9,1585c10.8-6.9,22.2,16,28.2,24c0.6,0.8,39.5,56.4,78.1,86c10.8,8.3,85,41,143,50c14.7-0.4,52.9,2.2,75.8-3\tc94.5-21.5,111.9-51.2,136.2-157c10.5-45.7,19.3-100.9,22-142c3.2-48,8-95,11-143c2.8-45.2-8.4-116.6-14-189c-1-13-7-17-19-16\tc-58.1,4.8-213.1,3-239,3c-17.8,0.6-84.5-1-119-1c-3,0-6-1-9-3c3-3,5-5,8-5c3.8,0,121,0.8,149,0c23.9,2,178.5,0.7,208-3\tc0.7-0.1,72.9-3.8,73.4-4.3c5-0.8,12.1,0,12.1,3c0,5-5.7,5.1-11.8,5.2c-12,0.2-25.2,2-46,4.1c1.5,12.3,1.8,21,3.3,41\tc4.3,56.9,16,113,12,170c-3.9,56.1-10,111-13,167c-2.3,43-15,84-23,126c-14,73.7-36.2,115.6-91,137c-57.5,22.5-108.6,17.7-125,18\tc-39.3-1.4-125.3-31.8-152-54C1211,1676.5,1196.3,1648.4,1144.9,1585z M1146.8,1586.1l2.1-1.8h2.1l3.4,2.3l3.5,2.3l3.2,4.8l1.1,3\tl4,4.1l6.2,7.7l2,4.7l4.2,3.9l4.1,4.8l1.2,1.7l2.6,3.7l2.5,5.6l2.3,1.7l4.1,6.7l1.3,1.6l5.3,3.8l2.2,4.6l2.3,2.5l3.3,4.7l5.4,2.7\tl3.3,5.5l5.5,4.1l2.5,3.4l1.7,3.3l2.6,1.3l2.7,3.2l4.7,4.2l3.8,2.2l4.8,5.1l7.1,4.7l4.5,2.4l6.5,3.3l3.6,2.2l4.6,2.1l3.6,2.1l5.7,2\tl3.6,2l5.7,0.9l6.2,3.5l3.6,1.3l6.3,2.3l4.4,1.6l3.6,1.3l5.4,1.9l2.6,1l8.3,3.4l4.7,1.2l2.7,0.7l4.7,1.1l4.7,1.2l4.8,1.2l5.7,1.4\tl3.8,1l4.8,1.2l5.7,1.4l5.8,1.4l2.9,0.8l6.6,1.9l15.7,0.7h4.1h6.1h3h7.1h3.1h5.1h5h5.1l6.1,0.5l5.1-1.5l6-0.5l4-0.7l11-2.2l2.9-1.2\tl7-1.2l3.9-2.4l5.9-1.3l2.9-0.5l6.8-1.6l3.8-1.6l5.7-2.7l3.6-0.9l4.6-3l5.6-1.1l2.4-2.2l4.3-1.4l5.2-4.6l4.1-2.7l4-3l4.8-4.1\tl2.6-2.2l3.5-2.5l5.3-4.7l2.1-2.8l2-3.9l2.8-2.2l3.6-8.2l1.5-2.4l3.3-4.5l2.1-4.5l3.1-6.6l0.9-2.7l1.9-4.8l3.7-6.8l0.6-4.8l2.6-4.8\tl1.5-4.9l1.4-4.9l1.7-5.8l0.6-2.9l1.3-5.7l1.2-5.8l0.6-2.9l1-4.8l1.5-6.7l0.8-3.8l1.6-9.5l1.6-5.9l1-4.7l0.6-2.8l1-4.8l1.4-6.7\tl1-4.8l0.4-3.4l1.3-6.9l0.9-4.8l0.7-3.8l1-5.8l0.5-2.9l1-5.8l0.7-3.9l1.2-6.8l0.1-3.4l2.2-5.9l0.5-4.9l0.4-3.9l0.6-5.9l0.7-5.9\tl0.3-2.9l0.7-6.9l0.4-3.9l0.5-4.9l0.4-6.1l0.2-2.9l0.8-11.8l0.3-4.9l0.4-4.9l0.3-5l-0.4-4l0.4-5.9l0.7-4.9l0.3-3.9l0.4-5l0.3-4.9\tl0.3-3.9l0.4-5.9l0.3-4.9l0.3-3.9l1.8-7.1l0.2-2.9l0.5-6.9l0.3-4.9l0.4-4.9l0.3-4.9l0.3-4l0.4-5.9l0.2-2.9l1.1-6v-4v-5.9v-4.9v-5\tl1.6-9.8v-4.9v-6v-2.9l-0.2-5v-4.9v-7v-4v-4l-1.6-6.9v-5v-4v-5v-5.9v-3l-2-6.1l0.1-5.9l-0.4-2.9l-0.8-4.9l-1.1-6.9l-0.8-4.9\tl-0.7-4.9l-0.8-4.9l-1.2-10.4l-0.3-4l-0.2-3.9l-0.5-7l-0.4-5l-0.2-3l-0.3-4.9l-0.4-5l-0.3-5l-0.5-6.1l-0.5-5l-0.6-6l-0.5-4.9\tl-0.9-7.9l-0.4-4.5l-0.6-5.7l-10.7-3.5l-3.7,0.2l-10.8,0.8l-4.9,0.4l-3.9,0.2l-6-0.6l-2.9,0.2l-5,0.4l-5,0.4l-6,0.4l-11-0.9l-3,0.1\tl-7,0.3l-5,0.1l-3,0.1l-12,0.5l-3,0.1l-7,0.2l-5,0.2l-4.1,0.1l-5,0.2h-14.1h-7h-10.1h-3.1h-12.1h-3.1l-7.1,0.4h-3.1h-6.1h-4.1h-15.4\th-5.1h-12.2l-10.2-0.1h-4.9h-4.8h-4.7h-2.3h-10.6h-4.9h-7.9h-7l-14.9-0.4h-4.9h-9.9h-3h-5l-5.9-1h-6h-5h-7.9l-6,0.4h-4h-5h-4.9h-6\tl-8.6-0.9l1.4-4.7l6.3-1.4h3.9h5h5h4.9h6h5h5.9h5l5,0.2h2.9h5h5.9h5h5h5.9h3h6h10.9h4h4h11.1h4h7l3.1,1h7h4.9h8.5h5.9h5h2.9h5\tl11.9-0.4h4.9h5h5h2.9h6h5.9h4h4.9l4-0.2h4.9h5h7h4.9h3h7l3,0.4h5.9h4h21h4.1l5-1.4l5,0.8l7.1-0.1l10.1-1.4l4.1-0.2l4.1,0.8l6-1.2\tl4,0.7l6.8-1.3h3.6h8.1h4.9h4.9h5.9l9.8-1.7l3.9-0.1l5.9-0.2l3.9-0.2l6.9-0.2l5-0.2l5.1-0.2l4.3-0.1l5.2-1.7h8.3h4.5l0.7,5.2\tl-3.7,0.3l-11.8,0.8l-3.1,0.2l-7,0.5l-4.2,0.3l-11.2,1.3l-6.1,0.6l-4,0.5l-5.2,0.5l1.3,6.7l0.5,6.1l0.2,4.1l0.4,5.2l0.4,6.1l0.3,4.1\tl0.3,4.2l0.7,10.2l0.4,5.9v5l0.5,6.1l0.3,2.9l0.7,7l0.6,4.9l0.4,4l0.5,5l0.4,3.9l0.5,5l1.2,7.1l0.3,3l0.6,5l0.5,4.9l0.5,5l0.6,6\tl1.5,6.1l0.4,5l0.2,3l0.4,5.9l0.3,4l0.5,7l0.2,4l0.4,5l0.3,5l0.6,5.1l-1,4v7v5v5.1v3v7l-1,8.9l-0.4,5.9v3l-0.4,5.9l-0.3,4.9\tl-0.5,5.9l-0.2,2.9l-0.4,6.9l-0.4,4.9l-0.3,3.9l-0.1,4.9l-1.4,4.9l-0.3,4l-0.5,6.9l-0.3,4.9l-0.3,2.9l-0.4,6l-0.2,3.8l-0.4,5.9\tl-0.3,3.9l-0.8,7l-0.4,4.9l-0.2,2.9l-0.5,6.9l-0.2,2.9l-0.4,5.9l-0.2,3.9l-0.5,6.9l-0.2,2.9l-1,5.9l0.7,4.9l-0.3,4l-1.3,4.9l0.1,11\tl-0.6,5.8l-0.6,4.9l-0.4,3.9l-0.4,3.9l-0.6,5.8l-1.6,4.9l-0.8,5.9l0.1,3.8l-1.9,3.9l-0.5,7.3l-0.5,2.7l-1.5,6.7l-1,4.7l-0.8,3.8\tl-0.7,3.7l-2.2,6.5l-0.8,3.7l-1,4.7l-1.4,6.7l-0.6,2.7l-1.4,6.7l-1,4.7l-1.3,4.8l-0.4,5.4l-1.6,7.6l-1.2,5.8l-1.3,5.8l-1,4.8\tl-1.7,4.9l-0.2,2.8l-2.3,6.9l-1.4,4.8l-1.4,2.8l-0.5,6.7l-2.7,3.8l-0.7,4.6l-1.8,3.6l-1.9,4.6l-2,4.5l-2.2,4.4l-2.3,4.4l-3.4,6.3\tl-2.6,2.1l-2.7,5.1l-2.9,3l-5.1,5.8l-1.1,2.7l-4.4,3.5l-2.4,3.5l-3.7,3.2l-3.8,3.1l-2.9,2l-5,3.8l-4.1,3.6l-4.3,1.4l-4.4,1.4\tl-3.4,2.1l-3.5,2l-9.5,2.8l-5.9,2.7l-4,1.7l-7,1.5l-3,1.4l-7.1,1.4l-3,1.2l-7.1,1.2l-4.2,1l-4.1-0.1l-5.2,1.9l-7.1-0.3l-4.2,1.7\tl-6.2,0.5l-5.1-0.5l-5.2,1.4l-4.2,0.2l-4.1,0.3l-5.1,0.1l-6.1-1l-8.6,0.7l-7.1,0.2l-12.4-0.4l-4.8-1.7l-3.9,0.5l-6.9-1.8l-4.8-0.9\tl-3.8-1l-5.9-1.1l-3.8-1.1l-4.8-1.3l-9.5-1.6l-2.8-1.4l-5.7-1.5l-4.7-1.5l-11.6-4.1l-4.4-1.6l-4.3-1.6l-2.5-1l-5.3-1.9l-3.5-1.2\tl-5.7-2.3l-4.6-1.9l-4.6-2l-6.5-3.1l-4.5-3.1l-3.5-1.2l-4.4-2.3l-5.3-2.4l-2.3-2.5l-6.1-3.6l-3.9-2.7l-5.7-3.7l-4.9-5l-3.9-4.1\tl-2.8-0.3l-3.7-3.3l-3.7-4.4l-2.6-5.4l-2.5-1.5l-4.6-5.8l-3.4-1.8l-4.3-4.9l-1.3-2.8l-4.1-4.9l-1.4-1.8l-3.2-3.9l-3.2-4.9l-2.3-2.2\tl-3.1-3.6l-4-5.8l-3.3-5l-4.3-3.9l-3.3-3.9l-2.2-4.7l-3.3-2.9l-2.3-3.8l-4.3-4.8l-1.4-1.8l-3.3-3.8l-3.3-4.8L1146.8,1586.1z\";\r\n\r\nexport const K_1 = \"M1205.1,1499.82c-2-18-2-36-1-73c1-54,1-165-2-226c-2-37-9-134-16-174c0-3-2-5-5-8c-6,9-3,10-1,21c4,24,5,43,14,155c3,141,1,139,1,318c3,43,5,86,7,130c1,19,6,95,6,109c0,11,2,19,6,18s2-13,2-21l-7-119c-2-36-4-73-5-110c-1-7,7-14,14-19c25-18,50-33,75-51c29-21,56-44,85-65c8-6,13-7,20,3c45,77,71,127,94,165c6,10,69,114,68,114c13,19,72,127,88,143c2,2,5,4,9,6c0-4-3-16-3-12c0,5-94-153-98-159c-21-31-40-64-58-97c-15-27-68-124-93-164c-8-13-9-17,5-30c47-43,60-58,116-114l108-107c7-6,12-10,3-15c-14,15-107,106-125,124c-78,78-80,80-98,98c-5,5-15,12-21,18c-15-14-23-33-34-47c-3-4-4-13-12-10c-6,2,0,8,6,17l25,37c5,7,4,14-4,22s-33,26-73,56C1273.1,1453.82,1239.1,1479.82,1205.1,1499.82z\";\r\n\r\nexport const L_1 = \"M1185.82,1756.32l1,8c19-2,38-2,55-4l1,8c1,12,2,21,2,25l7-3c0-2-2-32,0-32l41-3c25-2,51-1,78-4c21-2,43-1,65-2c49-2,173-14,213-14l-15-8c-40,0-149,9-199,14c-21,2-43,2-65,2c-26,0-52,1-78,3c-15,1-28,5-41,4c-2-24-4-55-4-82c0-41,1-84,1-114v-54c0-94-6-163-13-255c-5-66-9-133-12-200l-9-4c3,67,8,138,13,205c7,92,13,184,13,277v31c0,29,0,74-2,114l4,83C1222.82,1754.32,1204.82,1754.32,1185.82,1756.32z\";\r\n\r\nexport const M_1 = \"M1116.8,1810.8l4,38l6-38c0-119-6-160,18-233c30-89.9,22-121,32-264c5-70,4-125,4-185l207,225l-34,28l9,6l31-25l49,52l22,13\tl-15-20l-47-52c62-47,161-118,234-169v82c0,114-9,153-8,252l4,309l8-22c1,0-0.8-282.3-1-284c0-47,1-83,2-118c1-36,6-76,5-137l-1-89\tc32-22,58-40,72-47l-8-5c-13,8-35,23-64,42v-76l-8-23l-2,23v83c-72,50-175,123-241,171l-214-233c0-39-1-80,0-127l-9-1.9\tc-1,42-1,81.9,0,119.9l-10-12l-20-8l30,33c0,61,1,122-6,195c-4,40-3,70-4,97c-3,68-5,100-26,166c-19,60-19,99-19,177V1810.8z\t M1118.3,1805.1v3.9v4.8v2.8l1,8.7v2.8l0.8,9.1l0.9,7.6v-3.5l0.8-1.5l-0.3-3.7l1.5-5.8v-3.7v-4.8l1.5-6.8l0.7-7.1v-5.9l0.8-6.2\tl0.1-4.1l-0.5-6.2v-4.2v-7.1v-5.1v-5.2l-0.4-5.1v-4.1v-6.2v-4.1v-5.1v-5.1v-6v-4.1v-6.1v-4v-5v-5v-6v-4v-5.9v-2.9l0.4-5v-5.9v-5.8\tv-3.9v-4.9v-3.8v-6.8v-2.9v-6.8l4.5-4.8l0.9-4.8l-0.4-2.8l1.9-4.8l1.2-6.8l0.9-4.7l1.2-4.8l0.4-4.8l2-4.8l1.3-5.5l0.6-4.8l3-6\tl2.2-8.9l1.4-4.6l2.1-2.6l0.5-3.8l2.7-7.9l1.1-2.6l1.1-6l1.2-2.8l0.4-6.8l2.1-3.9l0.3-4.8l0.1-3.8l-0.3-4.9l3.3-4.9l1-4.8v-5.9\tl2.1-5.9l0.8-2.9l-0.4-5.9l-0.4-5l0.5-4l1.9-4.9v-7v-4.1v-5v-5l2.3-6.1v-4.1v-6.1v-4.1v-4.1v-5.1l1.2-5.1v-6.1v-5.1v-5.1v-5.1l1-6.1\tv-4.1l1-4v-5.1v-6.1l0.8-6.1v-3v-6.1v-5l1-6.1v-5v-3.1l1-6v-5l1-6.1v-8v-7.1v-3v-5l1.1-7v-4.1l1-5v-6v-4l1-6v-5.1v-3v-5v-6v-6v-4\tl-0.1-6v-3v-5v-4.9v-6v-6v-3v-6v-4v-5l0.2-4.9l0.4-7v-3v-7v-4v-4v-5.9v-6v-3v-5l0.4-8l9.2,9.4l3.6,3.7l2.7,2.7l5.2,5.6l3.5,3.7\tl2.6,3.7l4.4,3.7l1.6,2.9l4.6,2.5l1.8,1.7l2.4,3.7l4.7,4.7l4,3.6l1.4,3.7l4.1,4.3l1.9,0.9l3.9,5.2l2.9,3.7l5.5,3.7l4.7,5.4l5.6,5.7\tl0.8,2.8l4.2,2.6l2.4,5.7l6,4.6l1.3,2.7l5.6,4.7l3.7,3.7l2.1,0.9l2.1,4.5l4.9,3.2l4,5.7l0.9,2.8l4.8,2.6l3.6,5.9l2.4,2.7l4.2,3.7\tl2.3,3.7l3.2,1.5l1.5,3.7l5.7,4.7l1.4,1.7l4.2,3.7l3.5,6.7l5.4,3.7l2.3,4.6l7.2,6.4l4,3.7l2.2,4.7l4.3,3.4l4.7,5.3l4.6,5.7l4.5,3.3\tl3.1,3.7l2.7,3.7l9.1,9.6l-3.4,2.6l-6.2,5.1l-2.7,2.1l-4.5,4.1l-2.8,2.2l-5.9,4.6l-5,4.2l-3.6,3.5l3.7,1.8l8.2-1.9l5.1-3.1l4.5-3.8\tl1.6-0.4l4.9-5.1l6.5-5.1l4.2-2.4l2.2,2.4l5,5.1l3.5,3.7l4.9,4.8l3.2,2.7l3.3,4.7l5.6,3.7l2.3,2.7l2.6,4.7l5.5,3.7l1.7,3.8l5.7,3.7\tl2.2,2.7l2.2,3.3l4.9,2.6l14.3,9.4l-2.2-2.3l-2-2.7l-2.7-3l-2.3-2.8l-2.4-3.3l-2.5-2.9l-0.8-1.7l-9-9.8l-3-3.7l-3.9-4.7l-8.4-7.7\tl-1.2-1.7l-4.2-3.7l-4.6-4.9l-1.6-2.6l-4-4.7l-1.9-2.7l-5.2-5.1l8.8-6.5l3-3l6.4-4l3.9-3.9l3.5-2l5-4l3.1-1.9l6-5.7l4.9-1.9l1.2-1.3\tl4.5-3.9l4.6-2.8l1-2.1l5.6-4l3.1-1.9l4.6-2.9l4.6-3.4l3.8-2.8l4.4-3.7l2.9-1.9l4.7-4.3l4-1l2.7-1.5l5.7-5.5l4.9-2.9l1.3-1.3\tl3.7-2.9l6.3-3l5-4.5l3.6-3.4l4.2-2.7l3.2-2.1l3.3-2.1l5.7-4.6l3.9-2.9l6.8-3.9l2.1-1.9l3.7-1.9l4.8-4.3l4.4-2l3.2-3.1l6-3.8\tl1.4-1.3l3.7-2.9l7.8-6.7l6-2.9l3.6-1.9l4.2-3.7l2.4-1l8.6-6.8l4-2.8l3.8-2.9l5.2-2.8l8.4-8l-0.1,9.8v5.7v5.2v5.1v5.1v4.1v5.2v5.1\tv9.2v6.2v6.1v4.1l-0.6,5.1v5.2v10.3v4.1v7.2v4.1v4.1v6.2v5.1v4.1v5.1l-1,7.1v3.1v7.1v3.1v6.1v6v3.1v7l-1,4v5v6v5v3v4.9v5v5v5.9v6\tv4.9v4v3.9l-4,7v3.9v4v6v5v5v5v5v5v5.1v6v3.1l0.3,5v6.1v4.1v7v5.1v4.1v6v10.1v4v5v4.9v4v7v5v5v5v3.9v4v7v3v12v3.9v5v4v6v6v7.9v6v5v4\tv7l1,5v3.9v5v6v5v5v5v4v4.9v10v5v4v6v4.9v4v7v4v6v3v5.9v5v6l0.4,4v4v6v4.9v5v5v4v6v4v6.9v4v6.6l2-5.8l1-3.6v-3.4l2-3.4l2.2-8.4v-4\tv-6v-4.9v-4v-4v-6v-4v-5.9v-5v-5v-6v-4v-6v-2.9v-6v-4v-6v-5v-3.9v-6v-6v-5l-0.2-3v-6.9v-4v-6v-3v-5v-7v-5v-3v-7v-5v-4.1v-4l-0.1-5\tv-6.1v-5.1v-4.1l-1-7.1v-4.1v-5.2v-4.1v-7.2v-5.3l-0.2-5.3v-5.3v-3.4v-5.3v-7.5v-3.4v-6.3v-4.2v-5.8v-2.8v-7.8v-3.9v-6v-5v-3.9\tl-0.1-7v-4.9v-5v-3.9v-6v-2.9v-6.9v-3.9v-5.9v-3.9v-4.9v-5.9v-4.9v-2.9l1.8-6.8v-2.9v-6.9v-3.8v-10.9v-5v-4v-5.1v-6v-3v-5.1v-7v-4.1\tl3.3-5.1l-0.1-6v-3.1v-6.1v-5.1v-4.1v-5.1v-6.1v-6.1v-3.1v-6.1v-5.1v-6.1v-4.1v-5.1v-4.1v-5.1v-11l1-4v-6.9v-4v-3.9v-6v-5.9v-5v-4.9\tv-4.9v-3v-6.9v-5v-3.9v-4v-6.9l-0.4-9.7l8.3-5.1l2-2l5-3.5l3.8-2.3l5.9-3.9l2.3-1.9l5.2-2.9l4.3-3.6l3.7-2.2l4.5-2.8l6.8-4.8\tl1.3-0.8l5.1-4l4.1-1.6l3.9-2.3l5.6-3.3l-4.3-1.3h-7.8l-6.1,5.5l-4.1,3.2l-3.4,1.8l-4.1,1.6l-6.3,4.9l-2.8,1.5l-5.2,3.8l-2.9,1.2\tl-5.2,3.8l-3.8,2.5l-2.6,1.9l-5.2,3.8l-6.6,5.2l-1.9-2.5l-0.3-10.2v-4.1v-5.1v-4v-6.1v-16.2v-4.1v-5v-6.1v-4.1v-4v-10.7l-1-3.6\tl-3-6.6v-1.6l-1.2-4.4v8v5.6v4.6v9.5v19.5v5.9v4.9v3.9v3.8v4.9v5.9v3.9v5.9v5.9v2.8l-0.1,7.6l-10.2,8l-2.6,1.9l-5.2,2.8l-4.5,2.9\tl-3.2,2.7l-2.3,1l-5.5,3.9l-4.1,3.8l-5,2.9l-4.6,2.9l-3.2,2.8l-4.5,1.9l-2,1.9l-6.4,4.6l-4.3,2.2l-3,2.9l-3.8,3.9l-2.9,1.9l-4,1.8\tl-6.3,4.9l-4.7,2.9l-2.9,1.9l-5,3.9l-4.4,2.9l-1.9,1.9l-4.6,2.7l-4.1,2.4l-4.5,3.5l-2.7,2.8l-4.6,2.8l-5,3.7l-2.5,0.9l-5,4.5l-5,5.7\tl-4.6,1l-3.6,4.5l-4.5,0.8l-3.1,2.5l-4.5,3.8l-2,0.9l-4.4,3.6l-4.6,2.8l-4,3l-4.5,3.5l-5.4,3l-3.9,2.5l-3.1,3.4l-4.2,2.4l-3.7,2.9\tl-4.1,3.8l-3.2,2.9l-5.6,3.2l-4.5,3.7l-2.2,0.4l-8,5.8l-2,1.9l-6,3.9l-3.1,2.1l-2.4-1.6l-3.6-4.4l-3.9-3.4l-3.3-2.8l-3.4-5.5\tl-5.5-3.7l-2.1-3.7l-2.9-2.7l-3.4-4.7l-6.4-7.4l-3.7-3.8l-3.2-1.7l-2.4-4.6l-3.4-3.7l-4.4-4.7l-5.5-3.7l-2.9-4.5l-1.4-2.7l-4.6-3.6\tl-4.1-5l-3-2.7l-3.2-3.7l-2-2.7l-3.8-4.1l-2.3-2.8l-5-5.3l-2-2.7l-3.3-2.7l-4.5-3.8l-3.4-4.8l-3.1-4l-3.4-3.4l-4.4-4.4l-5.1-4\tl-2.9-3.7l-3.9-3.1l-3-4.7l-3.6-5.4l-3.7-4.1l-4.7-4.7l-3.7-3.1l-4.6-4.8l-1.1-1.7l-3.7-4.7l-4.8-4.3l-2-1.6l-3.5-4.8l-3.4-4.4\tl-3.9-4.2l-2.9-3.2l-5-3.5l-1.5-3.7l-4.9-2.4l-3.3-4.7l-2.3-4.6l-2.8-2.8l-5.2-4.6l-3.4-4.3l-2.7-3l-8.5-8.7l-0.2-5.5v-4v-5.1v-5\tv-4.1v-5.1v-6v-5.1v-6.1v-4v-4.1v-6.1v-5.1v-4.1v-5.1v-6v-4.1v-6.1v-5.1v-4.1v-7.1v-5.1v-4.1v-5.1l-4.7-5.8l-0.4,6.6v3v4.9v5.9v5\tv3.9v5.9v4.9v5v3.9v6.9v4.9v3.9v3.9v4.9v7v3.9v3.9v6.9v3.9v3.9v6.9v3.5l-0.6,6.9l-12.6-12.8l-9.5-4.8l-5.8-2.5l2.2,2.9l2.8,3.9\tl5.4,3.7l1.2,1.7l5,3.2l1.6,4.8l3.3,1.7l6.3,6.7v12.9v4v6.9v5v3v6v5v6v5v3v7v2.9v6v4v5v7v4v5v6v4v4v7.1v3l-1.8,7v5v5v5v4v4v7v5v3.1\tl-2,6v5v6v4v5l-3.3,11.2v4.1v6.2v3.1v5.2v6.1v4.2v5.1v7.1v4.2v5.1v5.1v6v5.1v5.1l-2.8,3v5.1v7v8v6v6v4v6v4v5v5.9v3l-3.2,6.9v4.9v2.9\tv4.9v6.9v2.9l-2.5,4.9v6.9l-2,4.8v4.9v3.8l-3,5.9v2.8v4.9l-2.7,5.8v3.8l-2,4.9l-1,6.8v2.8l-3,6.8v2.8l-2.6,5.8l-1.7,5.7l-1.3,4.8\tl-3.6,9.9l-0.9,6.2l-2.2,3.6l-0.4,4.8l-1.6,4.2l-1.2,3.8v4.8l-2,4.8l-1,4.9l-1.2,3.8v4.9l-2,6.8v4.9l-0.9,3.9v3.9v5.9v6v2.9\tl-1.9,4.9v7v5v2.9l-1.7,7v4v5v4v5v6v5v6v4v6v3v5l0.3,6v11.2v5.2v5.1v3.2v6.2v4.2l0.4,6.2v6.2v5.1V1805.1z\";\r\n\r\nexport const N_1 = \"M1629.52,1599.89c-16-10-37-27-45-34c-40-35-78-69-117-102c-44-37-84-72-128-111l-159-160c-17-17-19-28-19-40c0-16-5-22-6-12c-1,13-7,16-24-1c-6-6-14-16-17-12c-3,3,5,11,6,12c28,28,35,37,34,77l-2,110c-4,206,7,260,7,280c0,46,2,176,2,219c0,8,0,17,0,24c0,3,0,6,3,6c9,0,5-13,5-16l-1-179c0-33-7-140-9-215c-1-41-1-126,2-179c3-50,0-74,0-84c3,4,157,163,174,178c46,40,92,82,138,119c51,41,98,89,144,122c7,5,9,10,10,17c6,52,6,101,10,149c1,9,0,22,4,22c2,0,4-4,4-19c-1-48-8-102-9-152l66,55c11,9,15,10,18,7c2-2-7-9-13-14c-17-14-37-26-53-42c-9-9-16-21-17-48c-2-55-6-111-8-166c-1-29-2-51,2-141v-222c0-32-2-38-2-59c0-3-7-16-8-7c-1,8,2,14,2,42c0,48,2,147,1,194l-4,180C1624.52,1468.89,1629.52,1560.89,1629.52,1599.89z\";\r\n\r\nexport const O_1 = \"M1129.4,1514.4c0-66.5,29.3-135.5,77.1-188.8c2.6-2.9,147.5-145.8,240.2-235.9c25.3,40.7,41.8,69.7,73.7,119\tc37.9,58.5,72.7,118,106.8,174.8c10.2,17,82.8,126.6,76.1,139.5c-17.7,34-77.1,75.1-232.4,190.9c-28.7,21.4-59.6,44-83.7,66.5\tl-13.3-9.6c-23.9-17.2-50.7-36.5-77.1-53.7C1212.1,1661.9,1129.4,1605.6,1129.4,1514.4z M1120.5,1514.4\tc0,125.5,149.4,184.8,248,262.8c4.3,3.4,7.6,6.4,12.1,9.7L1364,1803l-1.1,8.5l24.3-19.3c13.1,10.8,39.6,30.1,52.9,39.7l-10-16.1\tc-11-8.6-21.6-18.8-33.1-26.7l-3.2-2.2c24.2-22.5,51.8-44.1,81.5-64.4c48.4-39.7,213.7-154.4,238-195.2\tc5.5-12.9-19.3-51.6-67.3-129.9l-11.1-18.1c-8.6-14-16.4-28-24.1-41.9c-24.9-45-53.9-89-82.7-133c-11.2-17.1-22-34.3-32.9-50.4\tc-20.2-29.8-29.9-48.2-43.1-69.8c39.7-37.5,83.7-80.4,84.9-81.5l-18.7,7.5c-2.4,1-30.9,29-70.6,66.5c-7.6-11.7-17.6-25.7-29.7-42.8\tl-6.7,4.2c12.2,17.2,22.2,31.2,31,45.1c-93.7,90.1-239.9,230.9-242.5,234C1150.4,1376.1,1120.5,1445.7,1120.5,1514.4z\t M1125.3,1520.5l-1-9.1l0.1-5.9l0.3-3.9l2.3-7.1l-1.5-3.9l1.5-4.1l1.7-6.9l0.7-3.9l-0.1-6l-0.1-3.8l1-5l2.3-3.8l1.2-4.8l1.4-6.9\tl2.3-3.8l1.5-5.7l1.5-2.8l0.7-5.7l0.7-3.7l1.8-6.7l1.9-2.6l4-6.7v-2.5l3.2-6.5l1.2-3.6l2.2-3.4l2.4-6.4l2.5-4.5l4.4-2.3l2.7-5.4\tl2.6-4.2l1.8-5.2l3.7-4.1l0.8-2.2l2.9-6.1l3.1-2l5.1-4l1.1-5.9l3.2-2.9l5.3-3.9l1.4-2.7l8.9-8.4l1.5-2.5l3.8-5.5l4.6-2.6l3.6-2.5\tl2.5-3.6l12-11.7l2.5-3.5l4.7-4.6l3.7-1.5l2.6-3.6l4.7-3.6l3.5-5.6l4.7-2.5l2.6-4.5l4.7-3.6l3.5-2.5l1.6-3.6l5.8-3.5l3.6-2.7\tl3.6-5.5l2.5-1.5l2.7-5.5l5.7-1.5l2.6-3.7l2.6-5.6l4.7-2.5l2.6-3.5l5.6-2.5l3.6-3.6l3.7-5.5l3.6-2.6l3.6-3.5l2.6-3.6l4.7-2.6\tl3.6-4.5l1.6-2.5l5.7-5.5l3.6-2.6l3.7-4.6l3.6-1.5l3.6-5.6l3.6-1.5l1.6-4.5l3.7-2.5l4.7-3.5l3.6-5.7l4.7-1.5l1.5-3.5l5.7-3.6\tl2.6-4.5l3.6-4.5l3.8-2.5l3.6-4.7l4.6-1.5l3.6-5.5l2.8-2.6l3.6-2.5l4.6-4.5l3.6-2.5l1.7-4.7l3.7-4.5l3.7-2.6l5.7-3.5l3.7-3.4\tl4.3,9.4l2.6,4.3l1.6,2.3l3.7,5.4l3.6,4.2l2.7,4.3l1.5,5.2l2.6,2.2l1.7,5.5l4.6,5.2l1.6,4.3l3.6,4.3l2.7,4.2l1.6,2.3l3.7,6.4\tl1.6,4.3l1.6,3.2l4.9,4.3l1.6,5.3l3.7,3.3l0.7,3.4l2.6,5.2l4.9,4.3l1.7,4.2l1.8,4.3l4.7,3.3l4.4,9.5l1.8,5.2l2.8,3.2l4.7,5.4\tl1.7,4.2l2.6,4.3l3.8,4.2l1.8,2.3l3.6,4.2l1.7,4.3l2.6,5.3l2.7,3.4l2.7,4.2l5.3,10.5l2.6,2.4l1.7,5.3l3.6,5.3l1.6,4.3l2.7,2.3\tl4.6,5.2l0.7,3.4l2.6,5.3l3.5,3.4l1.6,4.3l3.7,6.2l3.7,2.3l2.5,6.4l5.2,8.7l1.5,2.3l2.8,5.2l2.5,3.3l3.6,4.4l0.6,4.3l4.5,6.4\tl2.7,2.3l0.5,4.3l2.7,5.3l4.5,3.3l5.2,10.6l0.7,3.2l2.8,5.3l3.7,4.3l2.6,3.2l3.7,3.2l0.8,6.4l3.7,2.2l1.6,6.3l3.8,3.3l2.6,5.2\tl3.7,3.3l0.7,3.3l3.6,5.3l2.7,5.4l2.6,4.3l2.7,3.3l2.6,3.4l2.5,6.4l3.7,2.4l2.5,5.5l0.5,3.5l4.6,5.5l2.5,3.5l2.4,5.7l1.4,4.7\tl3.3,4.7l2.3,3.8v6.8l2.7,3.8l1,3.5l-1.8,7.9l-3.7,5.1l-3.1,5l-2.1,2l-4.3,4.8l-4.5,3.8l-2.5,3.6l-4.7,2.5l-3.7,3.5l-3.8,3.4\tl-1.8,4.5l-5.9,2.3l-3.9,4.4l-2.9,3.3l-3.9,2.2l-3,4.2l-6.1,3.2l-1.9,2.2l-5,4.2l-4,2.2l-5.1,5.2l-3,3.1l-4,2.1l-5.2,2l-2,4.1\tl-6,3.1l-2,3.1l-6.2,4.1l-4,2.1l-2.1,3l-4.1,3l-4.1,2.1l-4.1,3l-5.1,3l-3,4.1l-4.2,4.1l-5.1,2l-4,2l-3.1,4.1l-5.1,2l-5.1,4l-4.1,4\tl-4.1,1l-3.2,4.1l-4,3.1l-5,3l-4.3,4l-4,2l-2.1,4l-6.1,2l-3.2,2l-3,3.1l-5,4.1l-3.2,3l-9.2,6l-5.1,4l-3.1,2l-3.1,4l-10.2,5.2\tl-2.2,4.1l-6.1,1l-8.2,8.1l-6.4,4.2l-5.1,3l-3,3.2l-6.3,4.3l-3,3.1l-7,7.3l-5.2,1.2l-2.9,4.2l-5.9,2.2l-1.9,3.5l-6.1,5.3l-1.8,3.4\tl-7.5,5.3l-5.6-2.7l-3.5-3.2l-9.6-6.1l-5-1.9l-2.1-5.1l-4-1.9l-6.1-3.8l-2-1.9l-6.2-1.9l-3-4.8l-3.2-1.9l-4.1-1.8l-5.1-5.1l-5-0.8\tl-4.3-2.8l-2.1-3.8l-4.1-3.7l-6.3-1.8l-6.3-5.5l-9.5-6.6l-5.2-2.8l-3.2-0.7l-4.3-4.8l-3.3-2.8l-4.2-1.7l-5.3-2.8l-4.2-3.8l-4.2-0.9\tl-5.3-3.9l-3.1-2l-4.2-2.8l-5.2-5l-2.1-2.9l-5-2.9l-4.2-1l-4.1-5.1l-5-2.1l-3.9-3.2l-4.1-4.1l-2.9-2.2l-2.8-4.2l-3.9-2.3l-3.9-3.3\tl-3.7-4.4l-5.7-2.4l-1.6-4.6l-3.7-1.5l-4.6-5.6l-4.4-1.6l-1.4-5.7l-5.4-2.7l-2.3-3.9l-2.1-5l-3.1-3l-2.9-4l-2.9-5.1l-4.8-4.2\tl-1.6-4.3l-2.6-3.4l-1.3-5.3l-4.2-2.5l-0.1-6.5l-4-4.7l0.3-3.6l-1.7-4.8l-2.5-3.7l-0.3-6.8l-0.1-2.9l-2-6l-1.7-4l0.4-5.9l-0.5-4\tL1125.3,1520.5z M1122.1,1508.9v10l0.2,7l0.4,5l0.6,3l0.7,4.9l0.9,6.9l2.1,2.9l0.2,4.8l1.3,5.8l2.6,5.7l0.7,2.7l1.9,5.7l1,3.5\tl3.2,5.5l2.3,4.4l2.3,3.4l3.6,6.3l1.6,3.2l2.8,4.2l2.9,4.1l2,3l3.9,4l3.2,3.8l3.3,3.9l3.3,4.7l5.3,4.7l4.5,3.6l1.5,3.6l3.6,2.5\tl3.5,3.5l4.7,3.4l3.7,4.4l2.9,2.3l3.7,3.3l2.9,2.2l4.9,4.2l2.8,2.1l5.9,4.1l7.1,6.1l5,3l2,2l3.1,2l5,2.9l3.1,2.9l5.1,2.9l4.2,3.9\tl4.1,1.8l3.1,2.8l5.2,2.9l6.2,4.6l5.2,3.8l5.3,3.8l4.1,1.7l3.2,2.8l3.2,1.8l6.1,3.8l2.2,1.7l4.2,1.8l6.2,4.8l3.2,0.8l3.1,4.8\tl5.2,1.8l3.1,2.9l5.1,3.8l4.2,2.9l5.1,3.8l4.1,2.9l4.1,2l5,3.9l4,2l3,4l4,3l12,8.4l5,5.2l-6.2,5.4l-3.3,3.2l-2.4,3.3l-4.3,4.2\tl-0.8,3.4l2.4-0.9l3.1-1.2l3.1-3.3l14-10.4l3.9,3l2,1.1l4.9,5.1l3.2,2.1l5.1,4.1l4,3.1l8.2,6l3.1,2.1l6,5l4.3,3l2.1,1.8l2.5,1.1\tl-2.5-4.1l-3.5-5l-5.3-6l-3.5-2l-2.6-3l-4.6-3.1l-4.6-4.1l-2.6-3l-4.7-1.9l-1.7-2.9l-10.5-4.8l4.9-5.4l3.8-3.4l3.7-3.2l3.7-4.3\tl4.6-3.2l1.8-1.2l5.8-4.2l4.7-5.1l3.9-3.1l3-1.1l3.9-4.1l2.8-1l3.9-4l4-4l5.9-3l3.9-3.9l2.1-0.9l4.1-1.9l4.9-3.9l3.1-1.8l7.9-5.9\tl5.7-4l1.9-3.1l5-3l4.9-4l1.9-1.1l4-4l4-3l4.8-3l3-3l6.1-3l2-2l3.9-2.9l4-4l5.9-3l2-3l3.9-2l5-3l4.1-3l2.9-4l5-3l3-2l4.9-4l3-2l12-9\tl5-3l2.9-3.1l3-2l4.9-4l6-4.1l2-2l4.9-3.1l4-4.1l4-3.1l4.9-3.1l2.9-2.1l5-5.1l3.9-2.1l3-3.2l3.9-2.1l3.9-4.2l3-1.2l4.8-5.2l2.9-3.3\tl3.9-1.2l4.9-4.3l3.8-3.3l2.9-2.3l4.8-4.4l2.7-4.3l4.7-2.5l3.7-4.4l2.7-1.4l3.5-4.5l4.5-3.6l2.3-4.5l4.2-2.6l2.9-3.5l1.7-2.6l5-8.2\tl-2.7-5.9l0.6-5.7l-2.7-3.7l-2.9-3.5l-2.1-6.5l-0.2-4.4l-4.3-2.4l-2.4-5.3l-1.4-3.3l-3.5-4.3l-0.4-5.3l-4.5-5.2l-2.5-3.3l-1.5-4.2\tl-2.5-3.2l-1.6-4.3l-4.4-5.2l-5.1-8.4l-1.6-3.2l-3.6-5.2l-3.1-8.5l-2.6-3.2l-2.5-4.2l-4.6-5.2l-1.6-5.2l-2.4-4.2l-6.4-6.7l-1.7-5.6\tl-3.7-5.5l-4.4-6.7l-3.5-6.1l-0.4-2.2l-3.4-4.2l-2.4-6.2l-1.3-2.1l-3.4-5.3l-2.4-4.2l-1.4-3.2l-4.8-8.6l-3.4-5.4l-1.6-4.4l-3.5-5.4\tl-2.5-3.3l-2.6-4.4l-3.5-3.3l-2.5-4.4l-2.7-6.3l-1.6-4.3l-2.6-3.3l-2.6-4.3l-2.6-3.3l-3.8-6.3l-0.7-2.3l-4.7-6.3l-2.6-4.2l-1.7-3.3\tl-3.7-3.3l-2.7-6.2l-1.8-4.3l-1.7-2.2l-3.6-6.3l-2.8-3.2l-4.6-8.5l-4.8-4.2l-2.7-4.2l-1.7-4.3l-2.8-4.2l-5.5-9.4l-5.4-6.4l-1.7-4.2\tl-3.9-5.3l-2.7-5.2l-2.6-3.2l-2.7-5.2l-2.8-4.2l-1.7-3.2l-4.8-4.1l-5.6-8.5l-0.9-3.4l-4-6.3l-1.8-3.4l-3.7-3.3l-2.7-4.4l-3.7-4.4\tl-2.7-4.4l-2.6-4.4l-1.6-4.3l-3.5-4.4l-1.5-6.4l-3.6-2.3l-1.7-6.4l-1.6-2.3l-4.6-5.8l8.4-7.5l3.6-3.5l2.7-2.4l5.5-4.5l1.7-2.5\tl3.6-4.5l4.6-2.5l3.6-4.5l3.8-3.5l2.7-3.5l3.6-3.5l5.6-3.6l1.7-3.5l3.7-1.6l2.6-3.5l4.7-3.6l4.8-5.6l3.7-3.6l2.6-2.5l3.6-3.5\tl5.3-4.3l1-1.8l-2.1,0.3l-5.6,2.9l-2.7,0.8l-9.6,6.2l-3.7,3.5l-1.7,1.5l-3.7,3.5l-3.7,4.5l-4.7,3.5l-3.6,3.5l-3.8,3.5l-2.7,2.5\tl-3.6,5.6l-3.7,1.5l-2.7,4.5l-5.7,4.5l-3.6,3.5l-5.7,4.6l-2.7,2.5l-3.8,3.5l-2.6,2.5l-3.6,4.1l-6.8-8.2l-2-4.3l-4.8-6.3l-3-4.2\tl-2-2.3l-3.1-5.3l-3.9-5.3l-3.1-3.2l-5.3-1.2l0.5,4.2l4.9,6.1l1.9,3.1l6.6,8.1l1.9,3.1l3.9,5.1l2.8,5.1l1.7,3.1l6,6.8l-6.3,6\tl-4.6,4.5l-1.7,1.6l-4.8,5.5l-3.5,2.5l-3.7,3.6l-2.7,2.5l-4.6,5.5l-4.6,3.6l-2.7,2.5l-3.7,3.5l-2.7,3.6l-4.6,3.5l-3.7,3.6l-2.7,2.5\tl-3.7,3.5l-4.6,4.6l-2.7,2.5l-5.6,5.6l-3.7,3.6l-3.7,3.5l-1.7,1.6l-4.7,4.5l-2.7,2.6l-4.6,4.6l-2.7,3.5l-5.8,4.6l-2.7,2.6l-4.7,4.6\tl-2.7,2.5l-4.7,4.6l-2.6,2.6l-3.8,3.6l-3.7,3.6l-2.8,2.6l-4.7,4.6l-3.7,3.6l-3.8,3.6l-3.8,3.7l-3.6,3.6l-4.8,4.6l-2.8,2.7l-2.7,2.6\tl-2.8,2.7l-5.8,4.6l-3.8,3.7l-3.7,3.6l-2.8,2.7l-5.8,5.7l-2.9,3.7l-7.6,7.4l-3.8,2.7l-3.7,3.6l-3.8,4.7l-3.8,2.7l-2.8,2.7l-3.7,3.6\tl-4.8,4.6l-2.6,3.5l-3.6,2.5l-3.4,5.3l-4.2,2.2l-3,2.9l-1.5,1.5l-2,4l-5.1,3.9l-2.3,3l-4.1,6l-3,4l-1.9,2.1l-4,6.1l-2.9,4.1\tl-2.8,3.2l-1.8,3.2l-2.7,4.2l-2.6,6.3l-2.7,4.3l-2.6,4.4l-2.5,3.4l-2.5,4.4l-2.3,5.5l-2.3,2.4l-2.2,4.6l-2.2,6.5l-2.1,2.6l-2,4.6\tl-3,6.7l-1.8,2.6l-0.8,5.7l-2.7,5.8l-1.7,3.7l-1.7,5.8l-1.5,4.8l-1.4,4.8l-0.3,4.9l-1.2,4.9l-1.2,3.9l-0.9,3.9l-2,4.9l-0.9,6\tl-0.7,3.9l-0.7,7l-0.6,5l0.6,3l-1.4,6l-0.3,4.1L1122.1,1508.9z\";\r\n\r\nexport const P_1 = \"M1233.8,1426.3c-10.6-0.5-33.4,1-43,1c-2.4,0-7.3-1-7.3-2c0-5,4.9-4,8.6-4c14.7,0,28.2-1,41.7-2c9.7-0.7,12-2,13.2-10\tc2.3-15.1-0.3-51.1-3.5-79c-1.6-2.6-2.1-78.5-3.3-108c-0.1-2.5,2.9-81.5,15.8-182c0.5-3.9-0.3-26.3,2.3-35c0.3-1,2.4-2,4.9-3\tc1.2,1,2.4,2,2.4,3c0,17.2,0,34-1.2,50c-13.4,70.5-20.8,192.8-13.3,272c1,10.5,3.9,67.5,3.9,82c0,7,3.3,9,13,9\tc35,0,162.5-39.9,217-57c36-11.3,71.7-42.2,90.6-72c23.3-36.7,54.5-74.5,65.1-112.8c-9.4-21.1-55.8-64.5-80.9-91.2\tc-22.3-23.8-51.4-41-84.5-53c-31.4-11.4-101.2-31.7-132.4-34c-28.2-2.1-71.2-3.7-99.4-6c-3.6-0.3-7.3-0.1-11-1c-1.2-0.3-3.6-2-2.4-3\tc0-2,1.2-3,2.4-4h8.6c30.7,0,76,4,106.7,6c44.1,8,52.9,9.8,98,22c34.1,9.2,77.7,28.4,105.4,51c11.9,12.7,48,49.3,46.9,48\tc-18.1-21.4,50.9,58.8,53,64.9c-5.8,18.9-38.3,78.2-69,119.1c-26.8,43.7-58.8,60.9-113,81c-52.9,19.6-171.1,50-203.5,50\tc-8.6,1-12,2-12,10c0,11.1,2.2,23,4.7,34c5.6,50.1,2.7,168.5,2.7,275c0,8,0.2,17-1,26c-2.7,20-2.7,39,1,59c1.3,7,0,13-5,18\tc-1.1,1.1-2.6,2-3.9,2c-1.1,0-1.4-3-1.4-4c4.9-12-0.2-24-0.2-36s0.1-25,1.5-37c0.8-7,1.1-14,1.1-21c0-30.6,1.3-251-1.1-269\tc-2-14.9-5.1-31-6.2-47C1245.2,1427.8,1244.4,1426.8,1233.8,1426.3z M1238,1426.1l-8.4-0.2l-5.8,0.2l-4.8,0.1l-5.8,0.1l-2.8,0.2\tl-6.8,0.1l-3.8,0.1l-3.8,0.1l-8.6-0.5l-0.3-3.4l8.7-0.4l7.2-0.3l5.3-0.2l4.2-1.2l6.2-0.2l5.2,0.8l4.2-1.3l11.1,0.4l4.5-2.4l2.7-2.6\tl2.2-11.6l-1-4.9v-2.9l-0.1-5l-0.1-5.9l-0.1-5l0.8-3.9l-0.2-6l-1.2-5.9l-0.3-4.9l-0.3-4l-0.3-5.9l-0.4-5l0.6-2.9l-0.5-7l-1.1-8.8\tl-1.3-4.9l-0.2-3.9l-0.1-4.9l-0.2-6.9l-0.1-3.9l-0.1-5.9l-0.1-4.9l-0.1-4.9l-0.1-3.9l-0.2-9.8l-0.1-6l-0.1-4.9l-0.1-4.9l-0.1-4.9\tl-0.1-3.9l0.9-3.9l-0.2-6l-1.1-5.9l-0.1-3.9l1-10.8l-0.8-4l0.3-3.9l0.3-6.9l0.3-3l0.3-6.9l0.3-4.9l0.3-3l0.4-5.9l0.3-3.9l0.4-5.9\tl0.4-4l0.3-4.9l0.4-4.9l0.4-5.9l1.4-5.9l-0.6-4l0.5-3.9l0.4-4.9l0.4-6.9l0.5-3.9l0.4-3.9l0.5-5l1.5-6.9l-0.5-3.9l0.5-3.9l0.5-6.9\tl0.5-3.9l0.5-5.9l1.5-4l0.6-5.9l-0.5-2.9l1.6-5.9l-0.5-4.9l0.6-4.9l1.6-4.9l-0.1-9.9l0.1-4l0.1-5l0.2-6l0.3-5.1l0.4-5l2.1-5.7\tl3.2-1.9l0.3,6.7l-0.3,5l-0.2,6v5v6l0.1,5l0.1,3l0.1,5l-0.1,7l-1.2,8.8l0.2,4.9l-1.9,4.8l-0.7,3.9l-0.8,4.9l0.3,6.9l-0.7,4.9\tl-0.6,4.9l-0.7,3.9l-0.6,3.9l-0.5,6.9l-1.6,5l-0.5,2.9l-0.6,4.9l0.6,5l-1.5,6.9l-0.5,4l0.6,5.9l-0.4,4l-1.4,6l-0.4,4.9l0.7,3\tl-0.4,4.9l-1.3,6l-0.3,5l0.7,4.9l-0.3,5l-0.2,4l-0.2,5l-0.3,6.9l-0.2,3l-0.1,5l-0.2,6l-0.1,4.9l-1.1,5l0.8,6l-1,5l-0.1,4v3.9l1,5\tl-1,7v3l1,5l0.1,5.9l-0.9,5l1.1,4l-0.8,4.9l0.2,5l0.2,6l0.2,4.9l0.3,6l1.3,3.9l0.4,5.9l0.4,4.9l0.9,8l0.4,7.1l0.4,5.1l0.3,5.1\tl-0.8,4.2l0.3,6.1l0.2,5.1l0.3,4.1l1.2,5.2l0.2,6.1l0.2,5.2l0.2,5.2l0.2,4.2l0.1,6.2l0.1,4.2l-0.6,10.2l4.5,3.3l5.6,1.1h8.5l3.9-0.5\tl6.9-0.7l3-0.8l5.9-1.9l3.9,0.1l4.9-2l6.8-1.1l8.8-1.3l5.8-1.1l3.9-2.2l5.8-1.2l3.9-0.3l3.8-1.2l5.8-2.3l5.8-1.3l4.9-1.3l2.8-0.4\tl6.8-2.3l4.8-0.3l4.8-1.4l2.8-1.4l5.8-2.4l3.8-0.4l5.9-1.4l5.8-1.4l2.8-1.4l6.8-2.4l2.8-0.4l4.8-1.5l4.8-1.4l6.8-1.5l4.8-1.5\tl2.8-1.4l6.8-2.5l4.8-1.5l3.8-0.5l5.8-1.4l9.6-3l2.7-1.5l6.8-2.5l4.7-1.4l9.2-3.1l2.6-0.7l4.5-1.9l4.5-2.1l4.4-2.3l6.3-2.3l2.2-2.5\tl5.2-1.6l4-3.8l4.1-2.8l4.9-3l2.9-2l3.7-4.2l3.8-3.2l4.6-3.3l3.5-3.4l3.5-3.5l3.4-4.6l2.2-2.7l4.2-4.7l3.1-3.8l1.9-2.9l4.8-6\tl4.6-6.2l5.9-8.2l2.9-5.1l4-4.1l1.9-5.1l2.9-2.1l3.8-5.2l1.9-4.1l2.8-3.2l3.8-6.2l1.7-2.3l2.7-5.2l2.7-3.3l3.6-6.4l2.5-4.3l1.5-3.4\tl2.4-4.4l2.3-4.5l2.2-3.5l3.1-5.6l2-5.6l2.9-4.7l0.7-4.7l3.2-9.9l-2.5-2l-2.7-5.3l-4-5.1l-4.1-4.1l-1.2-2.9l-4.2-4.9l-3.4-3.9\tl-2.4-2.8l-3.4-3.8l-4.5-4.7l-4.5-4.7l-2.5-3.7l-4.5-3.7l-1.6-2.7l-4.5-3.6l-2.6-2.7l-4.6-4.6l-3.6-3.7l-2.6-3.6l-3.6-3.6l-4.5-3.7\tl-4.6-4.7l-3.5-3.6l-7-8.3l-3.5-2.6l-3.7-3.4l-2.8-3.3l-3.9-3.2l-2.9-2.1l-5.1-3l-3.1-2.9l-5.2-2.8l-2.3-2.6l-6.3-2.6l-4.4-2.5\tl-5.4-2.3l-3.5-4.3l-4.6-1.2l-5.6-2.1l-3.6-1l-5.7-2.9l-5.7-1.8l-7.4-2.5l-5.8-1.7l-5.8-3.6l-4.8-1.6l-8.6-1.1l-4.9-2.5l-4.9-0.5\tl-5.8-2.4l-4.9-1.4l-2.9-1.4l-6.9-2.4l-4.9-0.3l-7.9-1.7l-6-1.2l-3.9-2.2l-7-1.2l-4-1.2l-5-0.1l-6-2.1l-5-2h-3l-5,0.2l-6.9-1.8\tl-5-0.6l-8.7-0.8l-6,0.6l-2.9-1.3l-6,0.7l-4-0.3l-5-0.3l-6.9-0.3l-3-0.2l-5-0.3l-7-0.3l-4-0.3l-5-0.3l-4-0.2l-6-0.3l-3.9-0.3l-7-1.3\tl-4-0.3l-5-0.3l-3.9-0.4l-10.4,0.6l-6.5-1.9l-0.7-2.3l5-2.7l10.3,0.3l3.1,1.3l5.1,1.3l7.1-1.7l4,0.3l4.1,2.3l10.2,0.5l6.1-0.7\tl4.1,0.3l7.1-0.8l4.1,1.3l6.1-0.7l5.1,0.2l3.1,2.3l7.1-1.7l3.1,0.3l6.1,1.3l6-0.7l3.1,0.3l11,1.2l4.1,1.9l6,1l4-0.1l5.9,0.9l5.9,2\tl3.9-0.1l5.8,2h2.8l4.8,2.1l4.8-0.9l5.9,3.1l5.8,0.2l4.9,1.2l3.9,2.3l4.9,0.3l9.8,2.6l4.9,1.3l10.5,3.8l3.7,0.6l3.6,2.6l4.6,0.6\tl4.6,2.7l4.6,0.7l6.6,2.8l3.6,1.8l5.5,1.9l2.5,0.9l4.5,3l6.5,2l4.5,2.1l3.4,2.1l3.4,1.2l4.3,2.3l4.4,2.3l5.2,2.4l4.3,2.5l3.1,2.6\tl4.1,1.7l4,2.8l4,3.9l7.3,5.7l3.6,4.8l5.6,4.7l1.6,1.7l5.7,5.8l2.7,2.7l3.6,3.8l2.8,2.8l4.7,5.8l4.9,3.9l2.9,3l2.9,3.9l6.7,6.1\tl2.3,2.7l4.3,5.7l3.3,2.7l3.3,3.8l2.2,4.8l3.3,1.8l3.2,3.8l3.3,4.9l4.2,3.9l2.2,3.9l4.2,4l3.2,4l4.1,5l3.1,4l2.9,4.1l-1,4.8\tl-2.9,6.4l-2,4.5l-1.1,3.4l-3.1,5.5l-2.2,5.4l-2.3,4.4l-2.3,3.3l-1.3,3.3l-3.4,4.4l-2.4,4.3l-1.5,5.3l-3.4,3.2l-2.5,6.3l-2.5,4.2\tl-2.6,3.2l-2.5,5.2l-2.6,3.2l-3.7,5.2l-1.6,2.2l-2.7,6.1l-1.7,2.1l-2.8,5.1l-2.8,3.1l-2.8,4.1l-3.8,5l-3,4l-6.6,9.3l-1.8,4.3l-3,4.1\tl-2,3.1l-4.2,2.9l-2.3,3.9l-4.4,4.7l-4.5,3.6l-1.7,2.5l-5.7,5.4l-4.9,3.2l-2,2.1l-5.1,2.9l-3.2,2.9l-4.3,1.7l-3.3,2.6l-5.5,3.5\tl-4.5,1.3l-3.5,2.3l-4.6,2.2l-4.6,2.1l-4.7,2.1l-3.7,2l-6.7,1.9l-4.8,1.9l-3.7,1.9l-5.8,1.8l-7.5,3.2l-6.8,1.4l-2.8,1.4l-4.8,1.5\tl-6.8,1.4l-5.8,1.4l-8.6,2.8l-4.8,1.4l-3.8,1.3l-3.9,0.4l-4.8,2.4l-6.8,1.3l-4.9,1.4l-4.8,0.4l-3.9,2.3l-4.8,1.3l-3.9,0.4l-7.8,2.3\tl-4.9,2.3l-1.9,0.3l-5.9,1.3l-5.9,1.3l-2.9,0.3l-4.9,1.2l-11.8,2.5l-3.9,2.2l-4-0.8l-4.9,3.2l-5,0.1l-5.9,2.2l-4,1l-7,1.1l-2.9,1\tl-7,1l-4.9,0.9l-2.9-0.2l-5.9,0.7l-3.7,0.6l-5.5,1.4l-7.9,0.9l-6.2,1.4l-2.6,5.4l0.9,8.4l0.5,4.8l0.6,3.9l-0.4,5.9l1.7,5.9l-0.2,4.8\tl2.5,8.7l0.4,3.9l0.4,4.9l0.3,6.9l0.3,5l0.2,5l0.2,3l0.2,6.9l0.2,4l-0.9,6l1.1,4l-0.9,6l1.1,5l0.1,4v4l0.1,7v4l-0.9,4l1,6v5v4v6\tl-0.9,5.1l0.9,6l-1,3v6l1,5v5v6l-0.1,5v4v4l-1,7l-0.1,3l1,7l-1,5.1l0.9,5l-1,4v5l-0.1,6v3v7l-0.1,3.1v6v4l0.9,6l-1,4v5l1,6.1l-1.1,6\tv4l1,5l-1,4v5.1v10.2l1,7.2l-0.1,3.2l-1.4,6.2l-0.1,11.1l-1.4,2.9l-0.4,6.9l-1.3,5l0.9,2.9l1,5.9l0.1,5l0.3,5.9l0.3,3.9l-0.4,3.9\tl0.7,4.9l1.2,9.8l0.4,4.8l-1.8,5.5l-3.8,3.1l-2.2,0.9l1.2-8.2l0.6-3.1l-1.1-5.2l0.4-6.2l-1.7-6.1l-0.6-5.2l-0.3-8.5l0.1-6.3l0.1-6.3\tl0.2-3.3l0.2-6.3l1.4-4.2l-0.3-11.6l1.4-5.2l0.3-4.2l0.2-12.2v-5l-1-3l1.1-4.9v-5v-6v-6l-1-5v-4l1.1-5.9v-3v-6l-1-5l1-5l-1-6v-3.9\tl0.1-5v-5v-5l1-4l-1-6v-6v-4v-5v-5l1-5l-1-4l0.1-7v-3v-7v-3.1l-0.1-5v-5l1-6.1l-1-4.1v-7l1-3.1l-1-5.1v-7.1l-0.1-5.1v-3.2v-5.1\tl-0.1-7.2v-3.2v-6.2l-0.1-5.2l-0.1-4.3v-5.2l-0.1-5.1l-0.1-5.1l-0.2-7l-0.1-4.6l-0.2-2.2l0.2-10.3l-1.7-5.2l-0.8-4.3l-0.8-4.2\tl-0.8-7.2l-0.8-4.2l-0.7-6.2l-0.6-4.2v-9l-2.3-4.7L1238,1426.1z\";\r\n\r\nexport const Q_1 = \"M1139.2,1498.5c0,153.1,52,234.8,166.2,260.7h2.3c29.2-7.6,148.6-53.1,159-57.9c5.2-2.4,15.3-5.6,27.5-9.6\tc41.6-13.6,77.1-29.8,81.9-32l10.9-5l101.2,132.9l7.3-4.5l-100.7-132l57.7-27l-3.9-7.1l-59,27.4l-4.3-5.1\tc13.4-35.9,25.8-97.8,25.8-130.8c0-21.2-0.7-42.2-1.4-63.1c-0.7-20.8-1.2-41.4-1.2-61.9c0-16.6-0.9-34.2-1.7-52\tc-0.8-18.3-1.7-36.7-1.7-54.5c0-29.3-3.2-50.9-10.4-68.5c-0.9-2.2-13-11.6-30.1-24.6c-19.6-14.9-42.9-32.7-50-40.3\tc-9.6-10.3-104.9-90.5-123-96.5c-20.4,5-43.2,20.8-62.4,35.4c-23,17.5-26.2,21-55.9,39.4c-19.9,12.3-31.3,19.2-53,29\tc-14.2,6.4-31.1,10.4-52.5,13.6l1.4,7.9c20.4-3,36.5-7.3,50.6-12.6c-3,33-15.7,66.3-28.1,99.3c-5.6,14.9-11.3,29.8-15.9,44.5\tC1156.5,1365.3,1139.2,1432.5,1139.2,1498.5z M1148,1498.5c0-65.1,16.8-131.2,36.2-192.7c15.1-48,42.4-96.7,45.7-147.7\tc27.4-11.9,51.5-25.6,82.2-50.1c18.8-15,54.6-48.2,77.1-53.2c15.9,4.1,109.6,84,118.7,93.9c13.3,14.4,77.4,60,78.5,62.6\tc8,18.9,9.9,41.5,9.9,65.7c0,35.4,3.4,73.3,3.4,106.5c0,41.5,2.6,83,2.6,125c0,31.4-11.2,88.8-23.8,124.2\tc-21.2-20.6-41.4-41.9-61.8-63.3c-20.8-21.9-41.7-43.7-63.2-64.5c-20.1-19.4-39.1-41.5-58.2-63.1c-10.3-11.7-20.5-23.5-30.7-34.7\tl-6.7,5.1c29.1,31.7,58,67.9,89.3,98.1c43.5,41.9,84.1,88.5,128.1,130.9c-0.7,1.7-1.4,3.2-2,4.7c-7.3,18.3-90.9,39.4-110.3,48.3\tc-10.3,4.7-126,48.7-156.6,57C1196.4,1725.8,1148,1647,1148,1498.5z M1141.7,1494.1l-2,10.2v5.4l2.1,4.1l0.1,6l-1.5,3.7l2,4.6\tl0.3,6.4l0.3,4.1l0.4,6.4l-1.5,5.8l1.4,5l-0.4,5.1l0.6,2.9l0.6,6.9l0.7,3l0.8,6l1.7,5.7l2,4l1,5.6l-0.8,3.9l2,6.6l0.1,3.7l2.3,3.7\tl1.5,5.9l1.3,3.6l2.6,4.9l1.7,7.2l0.8,4.1l2.8,3.6l0.8,6.1l1.8,3.8l3.1,4.5l1.3,2.6l3.4,6.7l0.4,2.2l3.4,4.9l1.6,3.1l3.5,3.9\tl4.3,4.4l1.9,5.9l2.7,3.5l2.1,2.7l4.2,3.6l3.2,3.5l4.6,2.6l3.7,5.4l1.4,1.1l3.7,3.1l6.2,3.2l1.8,3.8l5.9,1.8l2.2,3l5,3.5l3.9,3.2\tl3,0.4l5.8,2.4l3.6,2.3l4.2,3l5.5,0.9l5.5,3.7l4.4-0.1l4.2,1.8l3.5,1.5l7.3,1.6l2.5,3.1l4.3-0.6l5,2.3l5.4,0.1l10.5-1.8l6.4-0.3\tl2.5-1.5l6.8-2.7l3.7-1.6l4.9-1.7l5.7-1.6l4.3-1.4l2.8-2.9l6.1-0.7l5.6-2.7l4.6-0.6l3.6-2.9l5.7-0.7l3.9-2.8l5.5,0.2l2.5-2.3\tl5.3-2.1l5.7-0.7l3.3-1.6l5.9-3.8l5.7-1.8l3-1.9l4.9-0.9l6.6-2.8l5-1.9l3.8-0.8l3.9-1.9l5.9-0.9l3.4-1.7l6.7-3.9l2.3-0.8l8.3-2.9\tl3.9-3l6.5,0.4l2.3-2.3l7.2-1.6l7-2l4.9-3.7l6.1-0.7l5.4-1.5l2.8-1.8l6.7-1.7l2.9-1.8l6.2-0.8l2.9-4l5.2,0.2l4.6-2.7l6.5-0.9\tl4.8-4.1l3.7,0.1l3.2-2.6l6.7-3.2l2.9-0.8l8.7-4.2l6.4-3.9l7.8,11.1l3,2l3.4,4.4l3.2,5.3l1.1,3l2.6,4.5l5.5,3.1l1.1,4.5l2.7,3.5\tl5.3,4.2l2.1,6.3l3,3.8l1.9,2.8l5,4l6.4,8.3l2.1,3.1l3,5l4,4.9l3,4l3.2,3.2l2,4.8l3.1,2l2.1,5.1l4.9,4.1l2.3,4.2l4,5l0.9,1.8\tl5.2,4.1l2.2,5.3l2.6,4.2l3.9,0.9l-0.8-4.2l-0.9-3.6l-2.8-4.6l-7-6.9l-4.2-5.1l-3.1-4.1l-1-1.9l-5-5l-3.1-5l-2-1.9l-3.3-4.4\tl-1.9-5.9l-8.3-8l-1-4l-3.6-3.5l-4.5-3.3l-1.1-4.2l-5-5l-1-3.7l-2.7-1.8l-4.4-5.4l-1.9-3.9l-5-4.9l-6.3-8.2l-1.9-3.9l-2.1-2l-3-6\tl-5-4l-2.8-5.1l-1.5-4l7.6-4.9l5.5-2.2l3.4-2.1l15.8-7.3l2.4-0.1l4.9-2.9l4.4-3l4-2.4l4.4-0.1l0.7-3.1l-4.1-1l-3.9,1l-3.8,1.8\tl-2.6,4.1l-5.2,2.4l-6.4,2.1l-3.6,2.1l-4.9,1.2l-5.2,1l-4.5,3.1l-4.5,1.1l-6.9,5.5l-6-2.8l-0.7-9.6l2.9-4l1.3-4.2l0.5-5.8l2.3-5.6\tl-0.6-4.6l1.5-5.8l2.9-2.5l-0.8-6.5l3.3-5l0.1-2.4l1.1-7l1-5.1l2-4.7l-0.1-3.7l0.9-3.9l-0.1-5.9l0.8-4.3l2.8-6.7l-0.4-3.7l0.7-6.2\tl0.6-3l1.5-5.6l-0.6-3.8l0.3-5.1l0.2-4.7l-0.8-12l1.9-4.9l-0.1-4.2l-1-3.6l-1.3-4.4l2.1-6.1l-0.2-3.5l-0.1-5.9l-0.2-3.7l-1-6.5\tl-1.2-3l-0.2-6.3l0.7-10l-0.2-5.2l0.9-5.9l-1.1-2.8l-1.1-6.8l1.7-5.9l-2.1-5.1l1-5.2l-1-3l-0.1-5.6l0.9-7.3l1-8.9l-1.1-4.1l-0.1-6.2\tl-1.3-5.7l2-4.3l-0.2-6.6l-1.2-5.5l0.6-3.1l-2.1-7.1l0.5-8.3l-1.2-6.8l-0.2-4.3l0.8-4.7l-1.3-4l1.8-6.8l-2.1-3.8l0.9-5.3l-1.1-6\tl1-4.2l-0.1-9.7l-0.1-4.8l-1.2-4.2l0.7-5.1l-1.3-5.8l-0.5-5.5l1.4-3.9l-0.6-4.1l-3-5l0.1-6l-2.2-4.5l-1.4-6.1l-0.5-4.2l-5.8-7.6\tl-1.3-1.8l-5.8-3.1l-2.9-3.9l-4.9-2l-1.9-3.3l-3.5-2.6l-10.2-5.1l-2-3.2l-9.4-7.7l-4.1-1l-4.5-4.7l-1.7-3.5l-6.1-1.1l-2-5.4\tl-5.4-2.1l-3.1-3.4l-4.4-4l-6.9-4.9l-2-3.6l-3.5-4.1l-4.8-4.3l-2.7-3.2l-5.7-3.2l-3-2.4l-3.7-4l-4.1-1.3l-3-5.5l-5.5-3l-4.2-3.5\tl-1.8-2.1l-4.7-3.1l-2.9-2.1l-6.1-3.4l-4.1-5.3l-3.7-2.9l-2.1-1.2l-3.9-4.1l-6.1-2l-4.2-5.4l-1.9-0.9l-4.3-3.2l-5-4l-5.3-3.1l-3.3-3\tl-4.1-2.8l-3.4-1.8l-3.7-3l-9.9,0.6l-3.7,0.7l-4.2,0.8l-4.7,4.3l-3.6,0.3l-4.3,4.3l-4.8,1.8l-5.7,2.5l-2.3,3.8l-6.5,2.8l-2.1,3\tl-5.4,3.2l-4,3l-7.4,6.2l-6,2.1l-2.5,1.7l-4.9,5l-4.1,2.1l-3.1,1.5l-2,5l-5.6,2l-4,2.8l-5.2,1.7l-3.4,2.3l-2.3,4.9l-4.7,1.8\tl-8.3,5.2l-5.5,3.7l-4.1,1.5l-3.3,3.8l-6.4,1.5l-2.1,2.1l-5,3.9l-6.4,0.3l-2.3,2l-6.3,2.2l-2.6,3.2l-10.7,3l-5.2,2.4l-3,3l-7.2-0.7\tl-3.3,1.2l-4.8,2.3l-6.4,2.3l-4.8-1l-4.3,1.7l-3.6,1.7l-2.9,2.6l2.7,1.4l4.5-1.6l6.5-1.1l4.6-0.1l4.1-3.1l5.3-0.3l6-2.4l3.8-0.5\tl5.7-3.1l7.6-1.1l-2,11.7l1.2,5.7l-2,6.4l-1,2.9l-2.1,4.7l-1.1,4.6l-1.2,5.6l-0.5,5.1l-2.2,3.6l0.6,5.6l-3,6.4l-2.1,2.3l0.3,6.3\tl-1.9,5.3l-3.3,4.3l0.3,3.4l-2,4.2l-5.4,9l-2.5,11.4l-2.1,5.3l-2.7,3.7l-0.7,4.7l-1.9,5.2l-2.8,6.1l-1.7,2.8l-1.6,5.8l-3,9.6\tl-0.5,3.7l-1.5,5l-2.3,5.4l0.6,4.9l-3.6,6.1l-1.4,4.7l-1.3,2.6l-0.2,5.4l-0.4,6.7l-3.3,2.8l-0.2,5.1l-1.5,6.4l-1.9,2.5l0.9,7.1\tl-3.1,2.8l0.7,4.1l-1.2,6.6l-3.1,4.9l-0.9,3.2l1.2,6.3l-2.9,3.9l0.9,6.4l-0.9,5.3l-0.8,3.1l-1.8,4.6l0.3,5.7l-0.8,6.5l-1.7,3.1\tl-1.4,5.5l-0.6,5.6l0.5,5l-0.4,3.9l0.6,3.9l-0.3,5.1l-0.4,6.4l-2,3.8l0.7,4.3L1141.7,1494.1z M1146.5,1503l-0.9-10.2l1.1-4l-0.9-4.8\tl0.2-4.1l-0.7-6.1l0.4-5.4l1.4-4.2l1.4-5.8l0.5-6l0.6-2.8l-0.4-4.8l-0.3-6.4l1.8-5.2l0.7-6l1.8-5.1l0.8-3.6l-0.1-4.7l-0.1-4.1\tl1.1-7.3l1-4l1.1-6.2l2.8-4.5l-0.8-3.8l2.5-6.7l1.8-2.5l-0.6-4.4l1.3-5.5l3.3-7l1.2-3.2l-0.7-3.8l1.5-7.6l3.1-4.6l-0.4-4.6l1.5-4.4\tl2.4-4.5l0.4-5.9l1.6-3.2l2.4-4.5l2.1-11.6l2.6-4.7l0.7-3.8l3.5-5.5l-0.3-3.7l4-5.9l0.7-4.3l0.9-4l3.1-6.1l2.5-2.5l0.9-6.3l1.8-3.7\tl0.8-3.5l1.8-6.8l1.9-5l1.7-2.6l1.9-5.9l3.4-3.6l0.5-6.1l0.7-5.4l2.6-2.8l1.3-4.6l2.3-4.7l1.2-6.7l1.1-4.4l-1.1-4l2.2-5.5l1.7-5.5\tl-0.3-2.7l0.6-5.6l1.5-8l8.3-2.4l6.4-2.1l4.1-2.9l2.6-3.3l5.2-2.8l6-0.5l2.1-2.1l4.4-2.6l4.6-5l6.2-0.7l3.1-3.5l5.1-2.8l2.3-3.1\tl6.4-2.1l3.6-2.6l3.2-5.3l3.3-1.2l7.9-8.4l5.7-1.1l3.4-4.6l3.1-3.5l4.9-3.3l7.4-6l2-3.4l5.8-2.1l2-4l5.6-2.3l4-1.8l4.7-2.6l2-2.6\tl4.7-3.9l5.7-2.6l4.4-1.2l6-3.1l8.1-0.1l5.6,4.7l3.3,1.8l4.3,1.9l5.2,4l5.1,3.1l2.2,2.1l9.9,8l3.1,2.2l3.7,3.9l5.1,1.2l3.3,4.7\tl3.5,3.8l4.7,2l4.3,2.5l4.3,4.7l2.8,3.8l4.8,2.2l1.9,3.3l6,2.3l3,5.4l2.4,1.2l6.3,3.6l3.1,3.6l3.9,3.4l8.8,7.9l3.5,3.3l5.5,5.4\tl2.6,4.3l5.3,3.8l4.5,1.4l3,5.3l3.2,1.8l4.1,2.2l5.4,3.4l2.3,3.3l4.6,4.6l4.8,2l4.3,3.2l3.3,2.3l3.3,4.3l4.7,3.7l3.3,1.2l5.4,5.4\tl5.1,3.2l3.5,1.3l4.2,8.5l3,6.5l-0.7,3.8l3.1,3.8v5.6l0.8,6.2l-0.4,5.1l0.5,5.9l0.5,3.2l0.2,7.1l1.2,5.1l0.2,4.4v10.1l1.1,6.1\tl0.1,5.2l0.1,5l0.1,3.4l-1.8,6.9l1.2,4.4l1.4,3.7l-1.8,5.1l2.2,5.9l-0.9,4.2l1.3,6l-0.8,5.9l1.3,3.1l-0.8,6.3l1.3,6.3l-2,4.3\tl0.1,5.1l2.3,4.3l-1,4.6v10l-1,4.7l2.1,6.8l0.1,3.3l0.1,6.2l-1,4.7l1.3,4.1l-1.9,6.8l2.2,5l-1,4.2l1.2,5.7l0.1,3.2l0.1,7.5l-1.6,3.7\tl1,3.6l0.1,7.2l0.2,3.2l-0.9,7l0.1,4.5l1,2.8l1.2,5.5l-0.9,6l1.1,4.1l-2.1,6.3v9.5l0.8,4l0.6,7.3l-0.5,4.4l-1.5,5.3l-1.6,4.8\tl-0.6,5.7l0.2,2.8l0.3,5.7l-3,5.1l-0.8,5.8l-1,3.7l1.1,5.9l-1.2,5.7l-2,4l-1.1,4.7l-1.1,4.9l-1.4,7.3l-2,2.7l0.7,4.9l-2.7,5.2\tl-2.2,6.1l0.6,3.3l-3.3,5.7l-1.6,5.4l-8.9-7.6l-3.4-3.3l-6.8-6.9l-6.9-4.9l-9.1-7.4l-2.5-4.6l-2.3-2.3l-5.4-5.6l-2.3-2.4l-3.4-2.7\tl-3.3-4.5l-4.7-2.6l-1.5-3.7l-8.7-7.3l-1.6-3.7l-5.4-5.4l-2.2-3.3l-3.7-1.7l-2.5-5.6l-3.1-1.5l-3.7-3.8l-4.6-3.9l-2.4-5.1l-5.5-1.5\tl-2.8-5.2l-3.4-4.4l-3.2-3.2l-4.5-2.6l-3.8-3.7l-9.9-9.6l-4.8-5.9l-1.3-3l-4.1-1.6l-3.9-4l-3.4-4.6l-3.4-2.8l-2.4-3.6l-5.5-3.9\tl-2.4-4.8l-3.2-2.5l-3.5-3.9l-4.5-5.1l-1.4-3.8l-3-3.4l-4.4-3.8l-6.9-9l-2.1-3.4l-4.4-1.9l-2.6-4.2l-5.6-5l-1.4-4.8l-7.9-6.8\tl-2.7-0.2l-0.9,2.4l4.2,3l3.5,5.9l2.2,2.5l3.3,3.8l2.1,3.6l3.3,2.7l4.2,5.7l3.2,3.6l2.3,2.8l3.3,3.7l4.1,4.6l2.2,2.6l3.3,3.8\tl5.1,4.5l2.4,1.8l4.6,6.1l2.2,3.2l3.9,2.6l3.7,4.8l1.2,1.5l5.3,4.5l3.6,3.7l2.3,3.4l3.4,2.5l2.7,3.7l7.8,8.6l2.3,2.3l6,3.8l1.4,3.6\tl4.1,3.1l4.7,2.7l2.6,3.7l4.5,4.5l2.4,3.5l4.2,3.3l3.5,2.7l3.8,4.1l1.4,4.5l10.8,11.2l3.6,1.5l2.7,4.1l4.2,5.4l2.3,2.4l8.1,8.4\tl3.1,3.1l4.7,1.7l1.6,4.2l3.9,5l3.3,1.4l5.2,4.1l2.4,5.4l3,2.2l4.6,4.6l7,5.1l2.9,3.9l3.3,5l4.9,2.6l2.6,4.6l-4.1,9.1l-4.3,3.5\tl-5.7,5.2l-4.5,0.6l-5,3.9l-2.8,2.3l-5.3,2.3h-5.4l-3.6,2.7l-5.1,0.9l-10.8,3.3l-3,4.1l-5.5-0.5l-6.2,2.5l-4.1,2.7l-5.9,0.7\tl-2.7,1.6l-6.2,1.7l-4.7,0.6l-4.9,2.6l-5.5,0.7l-2.5,2.7l-10.2,2.7l-6,4.1l-3-0.2l-5.9,1.6l-3.8,3.9l-5.3,1l-3.3,0.5l-4.5,3.8\tl-5.4,2l-4.5-0.1l-5.4,3.5l-5.3,2l-5-0.2l-2.8,3.8l-5.2-0.3l-6.5,3.6l-3.8,0.8l-3.9,1.8l-6.5,0.7l-3.5,2.6l-6,2.8l-4.7,1.7l-3.1,1.9\tl-6-0.4l-5.5,2.7l-3.9,0.7l-3.5,1.6l-7,3.7l-5.4,1.7l-3.7-0.3l-5.4,2.4l-4,1.5l-9.2,1.3l-6.9-3.3l-5.2,0.7l-3.2-2.9l-6.3-2.3\tl-2.7-0.6l-5.8-1.8l-5.6-1.8l-4.9-1.2l-2.8-2.1l-4.3-2l-5.6-2.5l-5.3-4.4l-4.3-1.5l-3.3-2.7l-4.3-1.9l-3.1-3.7l-6.1-2.1l-2-3.4\tl-4.8-3.2l-2.7-4.4l-3.4-2.3l-5.4-5.5l-3.8-1.8l-1.3-4.2l-4-3.7l-4.1-6l-3.2-3.4l-0.7-3.9l-4.8-3.3l-0.5-5.8l-3.3-4.9l-3.3-4.5\tl-2.6-4.1l-0.1-5.5l-1.7-2.2l-3.1-6l-1.8-5.7l-2.9-5.2l0.5-4l-1.5-4.4l-1.4-3.9l-2.4-7.1l-0.2-2.9l-2.1-4.8l-1.2-6.4v-4l-0.8-4.6\tl-2.9-7.2l0.1-3.5l0.3-4.4l-2.7-5.1l0.4-7l-1.6-3.3l1.7-5.5l-0.5-5.7l-0.4-5l-0.2-3.9l-2.5-7.4l2-5.3l-0.3-2.6l-1.1-7.1l-0.1-4.4\tL1146.5,1503z\";\r\n\r\nexport const R_1 = \"M1217.1,1341.4c3.9-60.5,9.1-117.8,9.1-178.4c0-27.4-3.6-53.7-4.9-81.1c-1.5-31.1-3-57.9-3-87.7c32.6,1.2,67.5,7.7,91,15.7\tc57.2,19.5,85.9,30,144.5,52.7c49.5,19.2,155.4,131.1,152.8,136.8c-6.7,14.8-73.4,77.9-90.4,88.1c-55.7,33.4-96.3,48-138,66.3\tc-29.8,13.1-61.2,26.1-98.9,45.6C1254.6,1377.7,1232.5,1356.5,1217.1,1341.4z M1209.6,1434.8c0.2-23.6,2.2-53.1,6.5-84.9\tc13.1,11.6,33.3,31.5,55.4,53.2C1254.7,1411.1,1230.5,1423.4,1209.6,1434.8z M1156.9,993.9c15.6,0,34.8-1,53.1,0.2\tc0,34,1.7,64.2,2.9,88.9c1.3,26.3,4.9,52.6,4.9,80c0,49.1-9.2,182.1-10.4,193.1c-6,54.9-9.2,128.9-9.2,193.1\tc0,9.1-3.2,84.5,0.9,159.9c4.1,74.8,16.7,171.9,16.7,179.9l6-24.5c0-8-10.1-81.8-14.3-156.5c-4.2-75.4-0.8-150.8-0.8-158.8\tc0-34.3,0.3-70.7,1.5-105c24.8-13.7,49.6-26.1,69.2-35.3c66.8,48.7,147,102.3,167.9,124c39.9,41.5,211.6,221.9,232.4,231l-7.9-14.9\tc-18.2-6.9-177.4-179.7-217.8-220.8c-26.4-26.9-100.4-78.9-167.2-123c37.7-18.3,68.7-31.8,97.3-44.4c41.7-18.4,82-35.4,139.3-67.4\tc18.3-10.2,86.8-75.5,93.3-91.5c6.3-15.6-112.7-129.1-155.7-146.3c-58.5-23.4-88.5-33.1-145.9-52.7c-24.9-8.5-60.9-14.7-94.8-15.8\tl0.7-25.2l-4.5-16.3l-4.5,41.3c-18.3-1.1-16.3,0.2-31.9,0.2L1156.9,993.9z M1221.1,1346.3l-5.3-4.1l0.5-10.2l1.3-5l0.3-4.9l0.4-5\tl-0.7-5.9l1.4-5l-0.7-3.9l1.3-6l0.4-4.9l-0.7-5l1.4-3.9l-0.7-6l0.3-4.9l1.4-5l-0.7-4.9l1.3-3l-0.7-6.9l0.3-5l1.3-3.9l0.3-6l0.2-3.9\tl-0.7-4l0.2-7l1.2-3.9l0.2-5l0.2-5.9l-0.8-5l1.2-3.9l0.1-5l-0.9-6l1.1-2.9l-0.9-5l1.1-5l-1-4.9v-10.1l-0.2-5.1l0.9-5l-1.3-7.1\tl0.7-3.1l-1.3-5l0.6-5.1l-1.4-7.1l-0.4-3l-0.4-7.1l-0.4-5.1l-0.4-5l-0.4-5.1l0.7-4.1l-0.3-4l-0.5-11l-1.3-3.9l0.8-6.9l-1.2-4.8\tl0.8-2.9l-0.3-4.9l-0.2-5.8l-0.2-3.9l-0.2-5.9l-0.2-5.8l-0.2-3.9l-0.1-3.9l-1.2-5.8l0.9-4.9l-0.1-5.9v-4.8l-0.1-4.9l-0.6-5.4l11.4,1\tl4.9-0.6l2.8,1.4l6.9,0.5l3.9,0.6l4.8,0.6l4.9,0.7l4.8,0.7l5.8,0.9l3.9,0.8l4.7,1l4.8,1l5.8,1.1l4.7,1.1l3.7,1.2l4.7,0.3l5.6,2.4\tl9.2,3.1l3.8,1.6l4.7,1.7l4.7,1.6l3.7,0.6l4.7,1.6l5.7,2.7l5.7,1.6l7.3,2.3l6.7,2.6l3.6,0.7l5.6,2.6l2.7,0.7l6.6,1.7l3.6,2.7\tl4.6,0.7l3.7,1.7l6.6,2.7l3.6-0.3l4.7,2.8l4.6,1.7l4.7,2.8l5.6,1.8l5.7,1.7l3.6,1.8l3.7,0.8l5.6,2.8l4.7,1.8l3.6,0.8l10.3,4.8\tl4.5,2.2l4.4,2.4l4.3,2.6l2.3,1.7l4.2,2.8l6.1,3.9l4.1,3l4.1,2l3,3.1l4,3.2l5,4.1l3.9,3.3l2.9,2.2l4.9,4.3l8.7,6.7l2.8,3.4l3.8,3.4\tl3.8,3.5l3.8,3.5l3.7,3.5l3.8,3.5l2.7,2.6l6.7,5.6l3.7,4.6l3.7,2.7l2.7,3.7l3.7,3.8l3.7,3.7l3.7,3.9l3.7,3.8l2.6,2.9l3.6,3l5.6,6\tl3.6,5l3.4,4l3.2,3.9l4.9,5.8l0.2,2.3l-3.9,5.5l-3.1,3l-2.2,2.9l-4.3,4.8l-3.5,3.8l-2.4,3.7l-5.5,5.6l-2.6,1.7l-4.5,4.6l-2.6,3.5\tl-3.6,2.6l-3.7,3.5l-4.6,4.6l-2.7,3.5l-3.8,2.5l-1.7,2.4l-6.8,5.5l-3.8,3.4l-2.9,2.4l-2.9,2.4l-3.9,4.4l-5,3.3l-4,3.2l-3.9,4\tl-8.1,4.1l-5.4,3.5l-4.3,2.5l-5.4,2.5l-8.7,5.8l-3.4,1.4l-4.4,3.4l-5.5,2.3l-3.4,1.2l-5.4,3.3l-4.5,1.2l-2.5,2.1l-6.4,2.2l-2.5,2.1\tl-6.5,2l-4.5,2.1l-2.5,1l-4.4,3l-4.5,1l-6.5,2.9l-4.5,1.9l-2.5,1l-5.5,2.9l-4.5,1.9l-5.5,1.9l-3.5,1.9l-5.5,1.9l-2.5,1.9l-5.5,1.9\tl-10,4l-3.5,1.9l-3.5,2l-6.6,2l-3.5,1.9l-4.5,1l-3.5,2l-4.5,3l-5.6,2l-5.5,2l-2.5,1l-6.5,3.1l-3.5,2.1l-4.5,1.1l-4.5,3.1l-5.5,2.1\tl-4.5,3.2l-4.4,1.1l-4.5,2.2l-2.4,1.3l-9.6,4.8l-5.1-4.6l-3.8-2.4l-1.7-2.4l-5.8-3.4l-2.7-3.3l-4.7-4.5l-2.7-3.4l-4.7-2.4l-3.7-5.4\tl-3.6-1.5l-1.7-3.4l-3.6-3.5l-5.6-3.4l-1.6-3.5l-5.5-5.4L1221.1,1346.3z M1214.5,1432.9l-5.6,3.4l-0.6-11.9l1.1-4l-0.8-6l1.3-4\tl0.3-4l0.3-5l-0.6-6l0.3-6l1.5-5l0.4-4l-0.5-6l1.6-5l0.5-4l0.6-4l0.6-5l0.9-7.7l7.3,6.5l4.7,4.5l3.7,3.5l3.7,3.5l3.7,3.6l2.7,2.6\tl8.4,8.1l3.6,3.6l4.7,4.6l3.7,3.6l4.3,4.2l7.7,6.3l-11.9,4.6l-5.4,3.2l-3.5,2.2l-4.4,2.2l-4.4,1.3l-3.5,3.2l-6.4,2.3l-4.4,2.3\tl-3.4,2.3l-4.4,2.3l-4.4,1.4L1214.5,1432.9z M1162.7,992.7l-2.5,0.7l4.8-0.1l6.8-0.1l9.7-1.1l2.8,0.9h6.9l8.6,0.2l12,0.1l-0.3,5.3v6\tl0.1,4.9l0.1,4l0.1,6l1.1,5l-0.9,3.9l0.2,7l0.2,3.9l-0.8,5l0.2,3.9l0.2,6l0.2,4.9l0.2,5.9l0.3,3.9l0.2,4.9l0.3,3.8l0.5,9.9l0.3,7\tl0.3,3l0.4,6l0.4,4l0.4,7l0.5,3l0.4,4.9l0.4,7l0.3,4l1.3,6l-0.7,4l0.3,4.1l1.1,7l-0.8,4v9.9l-0.1,5.9l-0.1,3l-0.1,6l-0.2,4.9l-0.2,4\tl-0.1,5l-0.2,4.9l-0.2,6l-0.3,4l-0.2,5l-0.2,7l-0.3,4l-0.2,6l-0.3,5l0.7,4l-1.2,6l-0.3,5l-0.3,3l-0.3,7l-0.3,4.1l-0.3,5l-0.3,6.1\tl-0.3,5.1l-0.3,5l-0.3,3.1l-0.4,7.1l-0.3,5.2l-0.3,4.1l-0.4,5.2l-0.3,6.1l-0.4,5.2l-0.3,5.2l-0.4,4.1l-0.4,4.1l-0.3,5l-0.4,6.6\tl-0.3,4.2l-0.8,7.9l-0.6,2.9l-0.4,5.9l-0.5,3.9l-0.5,5.9l-0.4,6l-0.4,2.9l-0.4,5.9l-0.3,6l-0.4,4.9l-0.3,4.9l0.6,3l-1.3,4.9l-0.3,7\tl-0.3,4l-0.2,5.9l-0.3,4l-0.2,4.9l-0.3,4l-0.2,7l-0.2,2.9l-0.2,5l-0.2,4.9l-0.1,7l-0.2,5l-0.1,2.9l-0.2,7l-0.1,5l-0.1,4.9l-0.1,5\tl-0.1,4l-0.1,4l-0.1,4.9l-0.1,7v3v6.9l-0.1,3v4.9l-0.1,11l-0.1,6l-0.2,4l-0.1,4l-0.1,5l-0.1,7l-0.1,4l-0.1,6l-0.1,4v4l-0.1,6v3.9\tl-0.1,5v7v3v6v5l0.1,4v5l0.1,7v4l0.1,6l0.1,5l0.1,3l0.2,6l0.1,6l0.2,4l0.2,4l0.2,5l0.2,7l0.2,4l0.6,9.1l0.3,7.1l0.3,5.1l0.4,4.1\tl0.3,4.1l0.4,5l0.4,7.1l0.4,4.1l0.4,6.1l0.5,5.1l0.4,5.2l0.5,4.1l0.4,6.1l0.5,5.1l1.5,5.1l0.5,3.2l-0.5,5.1l0.5,5.1l0.5,7.2l0.6,3.1\tl0.5,7.2l1.5,5.2l-0.4,3.2l0.5,6.2l0.6,4.2l0.6,5.2l0.5,7.2l0.6,5.2l0.6,3.1l0.5,5.2l0.6,5.1l0.5,7l0.5,2.8l0.5,4.4l0.3,4.2l0.2-3.8\tl1.4-2.7l1.2-5.9l1.2-3.9l-0.2-10.9l0.5-5.1l-0.5-4l-1.6-5.1l0.5-5l-0.6-4.1l-1.5-7l0.4-5l-0.5-4.1l-0.6-4l-0.5-6l-0.5-5.1l-0.6-4\tl-1.5-6.1l-0.5-5l-0.5-4.1l0.6-7l-1.5-5l-0.5-3.1l0.6-5l-0.5-7.1l-0.4-3l-0.4-7.1l-1.4-3l-0.4-7.1l0.6-5.1l-0.3-4l-0.4-5.1l-0.3-6.1\tl-0.3-5l-0.6-8.2l-0.2-5.1l-0.3-7.1l-1.2-4.1l0.9-6.1l-0.2-4.1l-0.2-4.1l-0.1-7.1l-1.1-3.1l0.9-6.1l-1.1-6.1l0.9-5.1l-1-5.2\tl-0.1-4.1l1-5.1l-1-5.2l1-6.1v-5.2l0.1-4.1v-5.2l0.1-5.1v-5.2l0.1-5.2l-0.9-6.1l0.1-4.1l1.1-5.1l-0.8-4l0.1-7l1.1-3.7l-0.9-5.4\tl1.2-2.8v-8.7v-5v-5v-3l-0.9-6l1-6l-1-3l1.1-6v-6l0.1-3l-1-6l0.1-5l0.1-4l1.1-6l-0.9-4l1.1-6l0.1-5l0.1-5l0.2-5l0.4-11.5l5.2-2.9\tl4.3-2.3l3.3-1.3l4.3-2.3l4.3-2.3l3.3-2.2l5.3-2.3l2.4-1.2l6.3-3.2l3.4-1.2l4.3-3.1l4.4-2.2l5.3-2.1l4.3-2.1l10.1-5.1l3.7,4l4,2.9\tl4.1,3l10.2,7.8l2.1,1l5.1,3.9l4.1,1.9l2.1,2l5.1,3.9l8.2,5.8l3.2,2.9l4.1,3l5.1,2.9l4.1,2.9l4.2,2.9l4.1,2.9l4.1,3l4.1,2.9l4.2,2.9\tl3.1,1.9l4.1,3l4.1,2.9l5.2,4l3.1,1.9l4.1,3l4.1,2.9l5.1,4l4,3l5.1,3l2.1,2l5,4l4,3l3.9,3l3.9,3.1l7.5,6l4.6,3l2.5,3l3.2,2.9\tl5.3,5.4l4.4,4.6l4.4,4.5l1.4,1.6l4.5,4.6l3.4,3.6l3.4,3.6l5.5,5.6l2.4,2.5l2.5,2.6l3.4,3.6l4.5,4.6l3.4,3.6l3.5,3.6l2.4,2.6\tl3.5,3.5l3.4,3.6l3.5,3.6l3.4,3.6l3.5,3.6l4.5,4.6l3.4,3.6l3.5,3.5l4.5,4.6l2.4,2.6l2.5,2.6l7,7.2l3.5,3.5l4.5,4.6l3.5,3.6l4.5,3.6\tl2.5,3.6l3.5,3.6l2.5,2.5l4.5,4.6l6.1,5.2l3.5,4.6l3.6,3.6l3.5,3.6l3.6,3.6l4.6,4.6l3.6,3.6l2.6,2.6l3.6,2.6l3.6,4.6l3.7,3.6\tl3.6,3.6l5.7,5.7l3.7,3.6l2.7,2.6l2.7,2.6l3.7,3.6l4.7,4.6l2.8,2.6l3.8,3.6l3.8,3.5l4.7,4.5l4.8,4.4l4.7,3.4l2.7,3.2l1.6,1l3.4,2.7\tl3.1,2.2l-1-2.5l-3.7-4.9l-6.8-6.6l-4-4.1l-3.8-4.2l-3.7-2.4l-2.7-3.4l-3.7-2.4l-3.6-3.4l-4.6-5.5l-3.6-2.5l-3.5-2.5l-2.6-3.5\tl-8.1-8.1l-3.5-2.6l-2.5-4.5l-2.5-2.6l-8-8.1l-4.5-3.6l-2.5-3.6l-4.5-2.6l-2.5-3.6l-4.5-5.6l-2.4-2.6l-4.5-4.6l-3.5-3.6l-2.4-1.6\tl-4.5-4.6l-2.5-3.6l-4.4-4.6l-3.5-3.6l-1.4-1.7l-5.5-3.6l-1.4-3.6l-7-7.3l-8.9-9.3l-3.4-3.6l-2.5-2.7l-4.4-2.6l-3.5-5.7l-3.5-3.6\tl-2.4-1.7l-3.5-3.7l-4.5-5.6l-3.5-3.7l-3.4-2.7l-3.5-4.7l-3.5-3.7l-3.5-2.7l-3.5-4.6l-2.5-2.7l-4.5-4.7l-2.5-1.7l-4.5-5.7l-1.5-1.6\tl-3.4-3.7l-4.5-3.5l-2.3-3.5l-5.3-5.5l-6.6-6.6l-3.6-1.3l-3.7-3.3l-3.7-5.2l-3.7-1.2l-2.8-4.2l-2.9-2.1l-5.8-5.1l-2.9-2l-4.9-4.1\tl-3.9-3l-4-2l-3.9-4l-4-1.9l-4-4l-3.9-2.9l-3-1.9l-5-3.9l-4.1-2.9l-3-0.9l-5-3.9l-2-1.9l-10.1-7.7l-3.1-1.8l-5.1-3.9l-8.1-5.6\tl-3.1-1.8l-4.1-2.9l-4.1-1.8l-5.1-2.7l-3.1-2.8l-4.1-3.8l-6.1-3.8l-2.1-1.8l-5.1-1.7l-5.1-4.8l-3.2-2.8l-4.1-2.7l-8.9-5l6.2-2.7\tl5.7-2.3l4.6-3.2l2.7-1.2l4.6-2.2l5.6-2.1l3.7-2.2l4.6-2.1l6.7-3.2l3.6-1.1l5.7-3.1l2.6-1.1l6.6-2.1l2.7-2l9.2-4.1l5.6-2.1l3.7-2\tl6.6-3l4.6-1.1l7.1-4l5.6-2l3.5-2l4.6-2l4.5-2l4.5-2l6.6-2l3.5-2l3.5-1.1l5.6-3l4.5-2.1l5.5-3l2.6-1.1l5.5-2.2l4.5-2.1l5.5-3.1\tl3.5-1.2l3.5-2.2l5.5-2.2l9-5.5l5.5-2.3l3.4-1.3l3.5-2.3l6.4-4.3l3.5-0.4l5.4-3.3l2.4-1.4l4.4-2.4l6.4-2.5l8.6-6.1l4.1-2.9l6.9-5.3\tl3.8-3.3l4.9-4.3l2.8-2.3l2.7-2.4l2.8-2.4l4.7-4.4l4.7-4.5l1.7-1.5l4.7-4.5l3.6-3.5l3.6-3.6l4.6-4.6l3.6-3.7l2.6-2.6l3.6-3.8\tl3.5-3.8l3.5-3.8l3.4-3.9l3.3-3.9l4.1-5l1.8-4l2.6-7.7l-2.2-4.5l-2.7-4.3l-2.9-3.1l-3.1-4l-4.2-4.9l-3.2-4.9l-2.3-2.8l-4.4-3.8\tl-3.4-3.7l-2.4-3.7l-2.5-2.6l-5.5-5.6l-3.5-2.6l-1.6-2.6l-5.5-5.5l-3.6-3.5l-4.7-3.5l-2.6-3.5l-3.7-3.4l-3.7-3.5l-3.7-3.4l-2.8-2.4\tl-3.7-2.3l-4.8-5.4l-3.8-3.3l-7.7-6.5l-3.9-1.3l-3.9-3.2l-3.9-5.2l-2-1.2l-5-4.1l-4-3.1l-4.1-3l-4.1-3l-3.2-2l-5.2-3.8l-5.3-1.8\tl-2.3-2.7l-6.4-3.5l-3.3-1.3l-10.1-4.8l-8.4-2.7l-5.7-2.8l-2.7-0.9l-6.7-2.8l-2.7-0.8l-5.7-2.8l-3.7-1.7l-5.6-1.8l-4.7-1.7l-5.7-1.7\tl-3.6-0.7l-4.7-1.7l-5.7-2.7l-4.7-0.6l-3.6-1.7l-4.7-2.6l-4.7-0.7l-3.7-2.6l-4.7-0.6l-4.7-2.6l-6.8-0.6l-2.7-1.7l-6.7-1.6l-2.8-2.6\tl-5.8-1.6l-3.7-0.6l-6.8-2.7l-3.7-1.6l-10.6-3.2l-3.8-1.4l-5.9-1.4l-3.9-1.2l-3.9-0.2l-5-2.1l-5.9-1l-6-0.9l-3,0.1l-5-0.8l-7.1-1.8\tl-5,0.4l-4.1-0.6l-5-1.6l-5.1,0.5l-6.1-1.4l-5-0.3h-10.3l0.2-5.5l1.2-4.1l-0.9-6l0.2-5.1l-0.4-9.4l-2.5-7.5l-0.1,2.8l-0.5,3.1\tl-0.6,6.2l-0.6,3.2l-0.5,6.1l-0.6,5.2l-0.5,4.1l-0.3,6.3l-11.3-0.5h-6.2l-6,0.3l-5.3,0.2l-9.7,1.8l-4.3,1.7L1162.7,992.7z\";\r\n\r\nexport const S_1 = \"M1174.2,1850.2c17.2-20.7,86.1-61.2,140.4-84.2c50.5-21.4,100.4-46.3,132.5-64.1c68.8-38.2,118.9-75.8,150.1-111\tc29.1-32.8,56.6-55.7,63.3-93.6c-56.4-50.3-147.3-95-188.4-112.3c-53.5-22.5-253.9-91.3-257.9-100.4c-7.5-17,2.3-67.9,9-86.2\tc27.4-74.9,35.8-124,92.7-140.2c12-5.7,160.3-65.2,168.3-64l11.8-9.7c-15.8-2.3-165.5,59.7-184.1,65.6\tc-67.4,21.4-78,90.8-98.1,145.9c-6.7,18.4-15.8,72.5-7.8,92c5.2,12.6,123.2,50.7,179.9,72.4c124.6,47.7,168.3,63.8,264.3,140.4\tc-7.9,36.9-23.9,43-62.1,86.7c-29.6,33.8-79.6,69.6-149,108.7c-63.5,35.8-218.6,97.8-254.4,133.3L1174.2,1850.2z M1178.2,1842.7\tl-0.9,3.6l4.8-4.1l1.8-4l2-3.7l6.1-1l1.6-2.3l4.5-5.3l6.2-2.9l3.3-3l4.1-0.7l4-4.4l3.5-1.8l10.3-5l2.3-2.7l5.4-1.6l4.4-4.6l4.4-0.4\tl4.4-4.4l3.8-0.4l5.8-2.1l4.1-4.2l2.7-2.5l6.1-2.5l3.9-0.3l3.4-4l4.9-1.3l6.3-3.1l2.8-1.2l4.4-1.1l6.3-3.9l3.7-2.1l9.5-4.1l6.1-2.1\th3.4l4.6-2.9l5.1-1.1l2.8-4.2l7.1-0.1l2.3-1.9l4.7-2.1l4.6-3.2l7.2-3.3l2.5-0.2l5-2.9l4-3.6l5-0.2l4.9-1.9l3.7-3.5l6.6-1.2l2.2-2\tl6.1-4.7l4.8-0.3l4.6-1.9l2.5-4.5l6.2-1.5l3.2-1.3l10.5-5.5l3.3-3.3l10-5.1l3.3-1.4l5.6-3.5l3.2-0.6l3.9-3.2l3.4-2.6l4.5-2.7l10.1-5\tl2.2-3.6l6.1-3l4.8-0.7l3.7-4.3l3.3-2.8l3.5-2.9l5.3-2l3.7-1.5l2.9-3.7l6.4-4.2l3.5-1.7l2.1-4.1l4.5-1l4.5-3.7l2.9-3l4.1-3.3l4.8-2\tl2.6-3l4.7-3.2l4.5-4.9l1.9-2.4l5.6-3.2l1.5-2.3l5.6-3.4l3.2-4.2l3.6-3.6l3.2-2.3l2.2-3.4l7.2-7.1l1.5-6.2l4.6-1.7l2.4-5.7l4.5-1.7\tl2.4-5.7l4.8-1.7l3.9-4.4l3.1-3.3l1.2-5.1l5.6-4.1l2.9-3.6l1.9-2.8l3-5.2l3.7-4.1l2.4-3.7l0.3-4.4l3.4-4.7l1.8-4.2l0.8-4.7l1.6-3\tl2.8-5.9l-3.1-6l-3.7-3l-3.6-4.1l-4.9-2.1l-3.1-3.2l-4.9-3l-3.8-3.8l-4.2-1l-4.1-5.2l-2.1-0.8l-4-3.8l-6-1.7l-4.6-3l-4.4-4l-2.9-3.3\tl-4.3-0.7l-3.3-4.7l-3.9-0.6l-5.7-3.9l-3.4-2.6l-4.3-3.5l-8.5-4.9l-5-2.4l-3.6-0.5l-6.5-4.5l-2.4-0.4l-6.6-4.4l-3.2-1.3l-4.5-1.3\tl-5.7-2.5l-3.5-2.3l-5.7-2.4l-3.3-3.9l-4.1-0.3l-5-2.3l-4.3-3.1l-4.6-1.2l-4.5-4l-5.1-1l-4.9-2.2l-3.3-2.9l-5-1.7l-9-2.8l-4.6-2.9\tl-2.3-0.7l-7.2-0.8l-2.8-3.1l-5.1-1.5l-4.7-0.8l-6.2-2l-7.5-5.5l-8.8-3.3l-6.1,0.3l-4.9-3.9l-5.3-0.7l-4-0.8l-5.7-2.8l-4.9-0.8\tl-4-2.8l-4.7-1.7l-3.5-2.5l-4.8,0.3l-5-4.1l-11.4-3.4l-3.8-1.7l-4.8-1.8l-3.6-1.7l-4.8-0.8l-5.8-2.8l-5.8-0.7l-4-1.8l-5.8-1.8\tl-4-1.9l-6-2.8l-2.6-1.8l-6.3-1.6l-5.2,0.2l-3.4-2.2l-9.3-5.4l-7.1,0.1l-4.3-3.2l-3.7-1.8l-6.7-1.8l-4.5-1.1l-3.9-4l-4.5-0.9\tl-6.2-2.1l-9.6-5.1l-4.5-2.1l-3-2.1l-3.6-2.1l-3.3-6.5l-3.2-4.3l0.7-6.8l1-2.7l-1-6.6l0.3-3.9l-0.6-4.2l2.5-5.8l-1.4-5.9l2.8-5.1\tl-0.1-4.6l0.9-3.2l2-4.7l1-6.7l1.2-3.9l1.2-5.5l0.3-2.7l2.4-11.6l1.8-3l1.8-5.9l3.4-4.5l-0.3-4.9l3.6-4.8l-0.2-3.5l1.8-5.4l3.7-6.9\tl1.7-3.6l1.7-5.7l1.7-4.9l1.8-4.8l2-4.9l1.6-2.4v-4.6l3.2-4.9l2-5.3l1.4-4.9l3.6-3.6l3.3-5l2.7-5.3l1.8-2l2.1-5l3.5-3.1l4.2-3.3\tl2.4-4.3l4.1-4.4l4.5-3.3l6-0.7l2-2l6.1-4.7l4.6,0.1l3.4-2.4l10.5-4.6l3.6-2l4.8-2l7.1-1.9h2.4l5.5-2.7l4.5-0.8l5.4-3.8l3.8-2\tl4.9-1.9l5.8-0.9l3.5-0.9l5.2-1.5l2.6-2.8l5-2.1l7-2.9l3.5,0.1l4.1-2.5l4.2-3.2l5.9,0.3l3.3-1.8l6.7-2.8l3.9-1.9l3.7-0.7l5.8-3.8\tl6-1l9.3-3.4l4.1-2.8l4.2-1l4.9-1.7l7-1.8l3.7-1.6l5.5-2.8l3.4,0.7l6-3l6.1-4.7l-2.9-0.7l-1.2,1.7l-5.1,3.5l-5.2-0.7l-5.2,1.4\tl-4.9,2.6l-5.9,0.6l-4.2,1.4l-2.7,2.8l-7.1,1.7l-3.8,1.7l-3.7,0.7l-5.7,2.8l-3.6,0.6l-5.7,3.8l-4,0.9l-6.6,1.8l-3.5,0.6l-9.6,5.8\tl-5.6-0.2l-2.4,1.6l-4.8,1.9l-9.4,4.6l-7.2,3l-4.6-0.1l-9.1,5.5l-4.1,2l-4.8,0.9l-3.5,1.7l-5.3,3.2l-6.8-0.1l-2.4,1.5l-7,4l-5.3,2\tl-2.4-0.4l-10,3.7l-3.5,0.8l-5.4,2.9l-4.3,2.2l-3.2,2.3l-5.6,3.8l-2.8,0.9l-4.9,4.9l-2.7,1.1l-3.5,4.4l-4.2,2.5l-3.3,5.8l-2.9,1.7\tl-1.8,5.5l-2.2,3.6l-4.6,3.2l-2.1,3.8l-2.3,6.2l-1.3,3.4l-1.2,3.6l-3.8,6.3v2.5l-4.1,7.1l-1.5,3.1l0.2,3.4l-1.8,6.3l-3.6,5.6\tl-0.5,3.3l-0.6,4.1l-2.6,4.8l-1.4,5.4l-0.6,4l-2.5,4.7l-0.5,4.6l-1.7,5l-2.6,4.8l-3.9,8.7l0.6,6.6l-1.3,5.2l-2.1,5l-1.9,4.4l0.2,3.7\tl-0.8,3.8l0.3,6.2l-2.8,5l-0.5,4.5l-0.5,4.7l0.7,4.9l-0.3,5.3l-1,5.5l0.9,3l-0.8,6l1.5,5.5l0.9,2.6l3.4,9.1l5.4,1.5l4.8,2.6l2.5,2.2\tl5.1,2.9l3.4,1l5.8,2l3.6,1.9l6.7,2l2.9,1.9l4.2,1.7l6.7,1.7l3.5,2.7l3.4-0.2l5.1,1.9l6.6,2.7l2.9,0.8l4.6,3.6l4.4,0.7l5.7,2.7\tl5.7,0.7l3.7,1.7l4.9,0.8l3.8,2.7l9.3,3.3l4.5,1.6l4.6,1.6l4.8,1.7l5.8,1.8l3.8,1.7l4.6,1.6l5.8,1.8l4.9,2.7l3.1,0.6l4.7,0.7\tl7.3,2.9l2.6,1.8l10.1,3.4l5,1l4,2.9l4.4,1.6l6.9,1.9l4.7,2.8l4.9,0.9l3.6,2.6h5.4l5.5,2.1l2.7,2.7l6.1,1.7l5,1l2.9,1.9l5.6,1.8\tl6,4.1l2.3,0.7l4.5,1.8l5.7,1.9l3.3,1.9l4.7,1l5.9,2l5.6,3l2.6,1.1l5.2,3.8h4.6l5.7,4.4l3.4,1.1l3.3,2.1l5.7,1.2l4.5,4.4l4.8,2\tl2.3,0.2l7.3,2.7l2.4,3.5l4.8,3.2l3.1,1.2l5.3,1.6l4.4,3.7l5.5,1.6l3.3,4.9l5,2.5l3,2.5l5,0.8l4.8,3.1l3.1,3.8l5.1,2.9l3.3,4\tl2.6,1.5l3.9,2l8.5,6.1l9.3,6.3l2.9,3.7l4.7,2l8.1,8.4l5.4,2.2l4.8,4.7l-4.9,9.2l-0.6,6.6l-2.8,4.8l-1.1,2.5l-3.3,4.2l-1.4,3.8\tl-2.1,5.4l-4.1,4l-3.3,4.9l-4.2,2.7l-2.4,4.8l-3.8,1.7l-3.2,3.5l-4.3,3.3l-2.3,5.5l-2.5,2.8l-3.4,4.6l-3.7,3.9l-4.9,2.5l-1.2,3.5\tl-8.9,7.6l-2.2,2.5l-4.4,5.4l-1.7,2.8l-5,2.6l-4.4,3.3l-3.2,2.9l-1.8,5.4l-5.2,3.5l-3.1,3.3l-5.9,2.1l-3.7,4.1l-2,1.1l-4.9,5\tl-3.4,2.2l-4.7,1.9l-3.1,3.9l-6.1,1.9l-1.8,2.5l-5.5,5.1l-3.3,1.9l-6.1,3.7l-3.3,2.9l-4.4,1.8l-5,2.6l-3.2,2.7l-3.4,1.7l-4.2,2.6\tl-6.5,4.7l-2.4,0.6l-5,3.5l-4.5,2.6l-3.5,1.6l-6.1,2.5l-3.2,2.4l-5.5,3.5l-6.5,3.7l-4.5,4.5l-4.7,1.5l-5.1,2.2l-3.5,2.2l-6.7,2.4\tl-4.1,1l-4.2,4.1l-5.2,2.5l-3.9,0.2l-3.5,4.2l-5.5,0.1l-2.2,2.7l-4.8,2.4l-4.7,3.2l-6.2,1.1l-2.4,2.9l-5,2.4l-5.4,1.1l-4.5,3.1\tl-5.5,1l-2.2,2.1l-6,3.3l-5.4,1.1l-4.6,3.3l-4.4,0.1l-4.2,3.7l-7.4,4.5l-4.6,1.2l-5.4,3.1l-3.6,1.2l-6.8,3.2l-3.2,0.3l-4.5,4.2\tl-3.8,0.1l-5.3,3.2l-5,1.1l-2.6,4.5l-6.6,0.3l-2.3,3l-4.9,1.4l-5.5,3.3l-5.2,1.4l-2.3,2.1l-6.7,3.6l-4.2,2.3l-4.7,3.7l-3,0.5\tl-3.4,4.6l-6.3,0.6l-1.7,2.1l-8.4,7.6l-5.1,2.9l-4.2,2.5l-1.5,2.7l-6.8,5.9l-1.5,3.1l-2.1,2.2L1178.2,1842.7z\";\r\n\r\nexport const T_1 = \"M1705.02,1081.82h-12c-36,0-73,2-109,2c-17,0-36,1-52,2l-140,6c-11,0-13-1-9-27c0-4,0-7-3-11c-5,6-6,8-7,16c0,24-5,24-34,24c-41,0-111,0-190,2c-24,4-28,10,1,10c84,0,106-3,191-3c28,0,29,2,26,26c-2,17-3,34-5,51c-18,153-27,245-88,550c-2,10-6,20-8,31c0,4-4,16-2,20c6-4,7-14,11-26c15-62,28-125,39-189c38-221,35-234,63-442c1-19,2-22,19-22c19,0,37-3,56-4c25-1,50-3,76-4c22-1,44-3,66-3c31,0,63-2,95-2C1698.02,1088.82,1705.02,1086.82,1705.02,1081.82z\";\r\n\r\nexport const U_1 = \"M1655.67,997.69c1,7,0,13,0,19c0,17-5,36-6,52c-4,65-3,155-6,180c-7,59-7,117-11,175c-8,119-1,135-20,209c-14,54-36,73-92,117c-19,15-69,41-108,51c12,8,22,10,56,27c4,2,7,2,9,8c-4,3-9,0-14-2c-12-5-18-9-29-14c-27-12-30-21-58-10c-5,2-6,3-16,6c-6,2-11,6-18,2c3-7,7-6,13-8c10-3,16-5,27-9c-80-20-102-24-136-65c-22-27-51-59-56-123c-5-61-10-121-12-180c-1-31,4-60,6-90c4-60,7-121,15-180l3-22c1-2,2-4,5-3c3,0,1,4,1,7c0,42-6,84-10,126c-3,34-5,67-9,101c-6,51-2,102,2,153c7,93,7,111,18,137c16,38,58,96,95,109c26,9,61,22,94,24c40-10,68-18,93-34c27-17,53-39,76-61c32-30,50-104,53-171c3-59,3-119,8-179c6-74,11-147,11-221c0-28,4-69,7-105C1647.67,1011.69,1646.67,1001.69,1655.67,997.69z\";\r\n\r\nexport const V_1 = \"M1098.7,1064.4c-3.2-5.2-10.2-11.6-3.9-13.6c3.1-1,5.5,1.1,7.6,3.2c5.2,8.3,10.4,17.7,14.6,27.1\tc35,78.3,99.5,250.1,118.9,290.3c24.5,50.7,85,171.3,115.1,233.9c14.6,30.4,30.5,64,43.8,95.5c10.1-16.4,31.1-46.7,37.2-57.9\tc28.2-51.7,55.4-105.5,82.5-158.8c2.7-5.3,129.3-302.4,124-289.2c-0.6,1.5,87.5-176.8,87.7-177.5c4.1-12.5,7.3-14.8,16.2-18.8\tc-2.1,7.3-4.1,11.5-6.2,16.7c-23.3,57.6-56.5,108.6-81.5,164c-22.3,49.4-80.7,190.3-105.3,248.5c-33.9,80.1-79.1,160.9-122,238\tc-5.9,10.6-20.8,36.3-27.2,44.8c14.4,32.6,30.9,67.7,45.7,100.4c1.9,4.2,6.2,8.3,6.2,13.5c-1.1,3.2,0.8,7.3-2.3,11.5\tc-4.2-3.1-3.3-6.3-5.4-9.4c-2.8-4.1-70.7-153.1-70.9-153.5c-28.2-60.5-55.5-119-86.8-179.6c-50.9-98.6-54.5-107.2-117-258.9\tc-16.4-39.8-31.4-79.4-46.9-119C1121.2,1111.5,1098.7,1062.4,1098.7,1064.4z M1101,1067.4l-4.3-7.1l-2-4.1l3.6-2l5.4,4.7l0.6,4.1\tl3.6,5.8l2.5,4.7l3.2,3.4l3,10.7l1.2,4.9l3.8,4.6l1,4.7l3,2.6l1.8,6l1,4.7l2.1,5l1.9,2.5l1.8,6.4l1.9,3.6l0.9,4.7l2.9,4.6l0.8,5.4\tl2.2,5.2l3.6,3.5l0.9,5.5l2.7,3.5l0.1,4.4l2.9,6.1l1.8,3.6l1.8,5.3l0.9,4.8l1.9,3.8l2.1,6.2l3.8,2.6l1.6,5.9l1,4.9l2.7,4.5l-0.1,2.5\tl3.1,7.3l1.8,2.6l1.7,6.4l0.9,2.8l1.9,4.8l4.7,9.3l1.8,5.5l0.9,3.8l1.9,4.7l2,7.3l3.8,2.7l0.8,5.1l2.9,5.8l0.8,4.4l1.1,5.2l2.7,3.7\tl1,5.9l4.1,3.9l1.6,3.1l0.9,5.6l2,5.9l2,5l1.9,2.5l0.8,4.5l2.9,5.5l1,5.7l2.1,3l3.7,5.2l1.9,4.2l1.7,3.1l1.7,5.6l2.1,8.4l3.3,4.9\tl2.1,2.2l1,4.2l4.6,9.3l4.2,5.5l2.1,4.3l2.2,5.5l2.4,4.8l2.2,2.5l2,4.1l1.2,4.2l1.3,6l3.5,3.8l2.8,3.9l0.2,5.7l3.5,3.6l1.2,4.4\tl4,6.3l0.3,4.4l2.5,5.1l4.2,4.4l1,3l1.4,5.8l3.3,4.8l2.3,3.6l2.9,3.1l0.2,6.5l2.5,2.8l2.3,5.5l4.2,4.6l2.1,4.1l1.1,3.4l2.3,6.5\tl1.3,3.7l2.4,4.9l4,4.3l1.1,5l1.4,5.3l3.2,2.4l1.2,6.1l2.5,5.3l4,2.3l1.2,5l2.3,3.8l3.1,5.3l1.3,4.6l3,3.5l1.2,5.3l2.2,3.6l3.3,8.9\tl3.1,4.4l1.1,4.5l3.2,5.5l1.2,3.6l3.3,5.8l3.1,3.5l1.9,4.1l1,5.3l1.3,5.9l3.2,4.7l2.2,4.8l2.7,2.3l0.1,6.4l3.3,3.8l2,4.5l2,3.5\tl2,5.5l2.9,5.3l-0.2,6.4l6,2.8l7-7.5l1.6-6.1l3.7-2.1l1.9-5.8l1.5-4.5l3.5-2.1l3.8-6.2l3.1-2.3l0.8-4.4l4.4-5l1.9-3.5l1.5-4.1\tl4.6-8.2l2.3-4.2l3.5-4.6l1.4-5.6l2.2-5.1l2.2-3.1l4.3-5.3l2.6-2.7l1.5-5.9l2.2-5.2l2.2-4.1l2.3-3.5l1.1-5.1l4.7-3.6l0.2-4.9l2-3.7\tl4.5-3.5l1.4-4.9l3.2-6.2l1.3-2.5l2.2-6.4l4.4-6.6l3.6-4.8l0.2-4.3l4-4.3l2.3-6.4l2.5-2.6l0.3-6.2l3.1-2.4l1.3-6.6l4-4.3l2.7-7.1\tl3.3-6.5l4.1-8.8l3-4.6l1.2-4l0.9-3.3l3-4.7l1-5.3l3.9-3.6l1.1-6.2l0.9-4.3l1.8-3.2l4-5.7l2.1-4.9l1-4.7l1.9-5.4l1.7-4.2l3.2-2.6\tl1.1-6.3l0.8-3.9l4.1-3.7l0.9-6.9l2.9-4.4l1-3.7l3-5.9l0.1-3.4l3.8-5.4l1.1-5l0.8-2.9l4.2-3.8l-0.1-5l3.6-6l2.1-2.8l2.1-5.9l1-3.6\tl2.9-6.4l2-3.8l1.1-4.8l1.9-5.6l0.9-3.1l4.2-3.9v-6.8l3.6-4.3l2.2-4.1l1.1-4.8l1.9-5.5l2-3.5l3-4.8l2.1-4l2.2-6.2l0.1-3.8l2.7-6.2\tl3.3-3l1.2-5.4l3.1-6.8l2.3-5.4l0.2-2.7l3.9-4.9l2.4-6.6l1.2-5.2l1.1-3.7l3.1-5.9l0.7-4.1l3.3-3.9l1.4-4.7l2.2-3.5l1.3-5.2l3.9-4.2\tl2.6-4l0.2-5.3l2.8-3l3.4-4.9l1.2-5.4l2.1-3.3l2.4-4.7l1-4.2l4.1-4.3l2.4-5.7l2.3-4.7l0.2-3.1l3.9-4.3l1.3-3.5l3.4-4.7l0.2-6.4\tl6.4-8.9l0.2-4.3l2.8-3.1l3.3-4.6l2.5-4l0.2-4.6l2.8-5.8l3.7-2.7l0.3-6.9l1.9-2.1l6.8-9.8l1.5-6.1l1.2-5.4l3.2-4.5l2.5-4.1l1.4-4.8\tl1.9-4.9l2.9-7.1l2-4.1l4.8-2.7l2-1.8l0.1,1.8l-1.1,1.8l-1.6,2.3l-1.7,8.8l-1.9,4.4l-1.9,5.5l-3,5.4l-2,4.6l-2.1,4.4l-2,3.4\tl-2.2,3.5l-3.3,5.9l-0.2,3.4l-2.9,4.8l-3.6,3.8l-0.3,4.5l-4,5.2l-1.5,3.6l-2.3,5.4l-1.1,4.1l-3.2,3.2l-3.5,6.5l-2.3,3.3l-2.5,4.6\tl-1.4,3.6l-1.2,6l-3.3,3.3l-1.3,5.2l-3.3,2.4l-1.4,4.8l-2.3,4.3l-2.1,5.3l-3.2,4.3l-3.4,5.5l-1.2,2.7l-2.2,6.4l-1.1,2.4l-3.1,6.4\tl-2.1,3.5l-4.1,9l-2,3.5l-2,4.5l-3,4.6l-2.1,5.9l-1,5.6l-2,4.5l-0.9,4.5l-1.7,3.1l-4.2,3.7l-1,5.1l-2.9,6.4l-2.1,5v3.1l-4,3.6\tl0.1,6.8l-4,4.6v2.8l-3.7,6.4l-1.1,3.9l-0.8,5.4l-2.9,4.5l-1.1,3.8l-1.8,4.4l-1.9,3.5l-3.1,5.8l-0.9,3.6l-2.9,4.7l-0.9,4.6l-4,5.6\tl-1,5.8l-1.9,3.4l-1.8,5.3l-3,2.7l-2,6.9l-1.9,2.6l-2.1,6.2v3.2l-3.9,4.6l-1,7.1l-0.7,4.2l-3.1,3.6l-0.9,5.5l-3,2.6l-0.9,5.8\tl-4.1,4.8l0.1,5l-1.8,5.2l-1.9,3.6l-1.9,5.5l-2.7,4.1l-3.4,2.9l0.2,6.9l-3.5,6.4l-4.1,5.7l-2.1,5.8l-0.9,3.5l-2,4.3l-3,5.5l-2.2,5\tv2.5l-1.9,3.9l-4.1,5.5l-2.3,4.7l-2.1,5.6l-1.1,3.3l-2.1,3.4l-2.2,5.4l-3.2,4.6l-1.3,5.6l-1,2l-4.3,5.7l-1.4,5.7l-1,3l-4.5,5.6\tl-0.3,4.5l-2,3.1l-2.2,4.3l-4.6,5.7l-0.2,3.5l-2.9,4.7l-3.3,2.5l-2.8,4.9l-1.3,6.4l-2.3,4.3l-1.2,4.1l-2.3,2.2l-3.5,6.7l-1.4,3.4\tl-2.2,5.1l-2.3,2.2l-3.5,5.6l-2.5,4.5l-1.2,4.1l-3.3,3.2l-3.7,6.7l-1.3,3.3l-2.3,4.2l-2.4,3.3l-3.6,6.7l-0.4,2.3l-3.3,5l-2.2,4.2\tl-3.8,3.6l-0.4,6.2l-4.2,3.2l-3,9.2l-3.5,5.2l-2.7,3.9l-1.7,5.5l-3.4,4l-2.9,2.8l-1.9,4.7l-3.8,5.5l-6,8.1l2.1,7.1l1.2,4.3l4.2,5.9\tl1.7,2.1v5.5l4.4,5.9l0.9,2.2l1.2,4.8l4.1,5.5l1.1,5.6l2.1,2.7l2.1,6.6l2.8,3.3l0.1,3.4l4.1,6.6l0.2,2.4l2.1,4.8l2.3,6.8l2.1,2.6\tl2,5.4l2.2,3.8l6.3,8.6l0.4,3.8l1.6,11l-2,0.4l-4.6-9l-2-4.3l-1.1-4.4l-1.3-3.9l-3.2-4.6l-2.8-4.8v-4.9l-3.4-3.7l-1.9-6.1l-1.2-5.3\tl-3.2-2.5l-2.9-5.1l-1.1-3.3l-2-6.9l-2.2-2.6l-2.9-5.7v-5.3l-3.5-2.8l-2.9-5l-1-4.2l-1-4.9l-4.5-5l-0.8-3l-1-4.7l-4.4-6l-1.9-5.1\tl-0.2-3.1l-3.3-5l-2.2-5.6l-3.2-5.7l-0.1-4l-3.5-5.2l-2.9-5.2l-3.1-5.5l-1-4.4l-1.2-3.8l-3.1-5.4l-1.1-4.5l-2.1-4.6l-2.4-5.9\tl-3.9-3.5l-1-3l-2.3-5.9l-2.1-3.5l-3.1-5.4l-1.1-3.4l-3-6.1l-0.1-2.5l-2.3-7l-2.3-3.7l-3.8-5.1l-0.2-3.4l-3.4-6.1l-2.1-2.3l-2.1-5.4\tl-3.1-5.1v-4.8l-4.5-4.7l-1.1-3.3l-3.4-5.8l-0.8-2.1l-1.2-5.4l-4.4-5.6l-1.2-4.4l-2.3-3.6l-2.1-5.3l-1.4-3.7l-3.3-3.6l-3-5.8\tl-0.2-4.8l-2.6-2.8l-3.1-5.2l-3.8-9l-4.4-4.7l-1.1-3.2l-3.1-5.1l-1.3-4.4l-1.5-4.8l-4-4.3l-0.3-5.8l-4.2-2.4l-0.3-3.8l-3.3-5.7\tl-2.2-5.3l-1.2-2.4l-2.3-5.6l-4.2-4.4l-1.9-3.9l-1-4.2l-1.3-5.6l-2.2-3.8l-3.8-4.9l-0.1-2.4l-4.2-6.7l-1-2.1l-1.1-6.6l-3.1-4.7\tl-0.9-2.4l-2.1-5.7l-3-4.5l-1.1-3.6l-3.7-5.5l-0.1-3.4l-2.1-5l-2-5.7l-2-3.8l-1.9-4.5l-2.2-7.2l-3.1-2.8l-1.6-3.9l-1.9-6.5l-1.1-5.5\tl-3.1-2.7l-2.7-5.7v-3.9l-2.9-5.9l-1-3.7l-3.9-5.6l-0.9-4.6l-2.7-4.5v-2.3l-2.1-7.3l-4.8-7.1l-1.8-4.4l-3.1-7.1l-0.6-2.2l-0.9-5.5\tl-5.1-8.7l-1.5-4.1l-1-5.4l-3.1-6.2l-2.6-3.3l-0.7-5.1l-0.9-3.9l-2.9-5.7l-0.7-2.4l-3.8-11.7l-2.6-2.4l-0.8-6.6l-3.7-3.4l0.2-3\tl-2-7.4l-3-3.7l-1.5-3.2l-2.7-5.5l-3.6-9.1l-0.8-3.7l-1.6-4.4l-0.8-5.6l-3.1-5l-3.7-8l-2.1-6.9l-3.3-3.7l-0.9-4.2l-1.2-4.9l-2.4-6.4\tl-3.2-2.7l-3.1-6.2l-1.4-3.1L1101,1067.4z\";\r\n\r\nexport const W_1 = \"M1418.1,1372c3.5,9.8,8.8,22.4,15.5,37.4c-73.8,111.2-153.3,222.4-219.2,323.3c-11.7-91.5-47.6-161.1-59.2-200.5\tc-12-40.6-69.4-354.8-95.5-420.1l-13.1-9.8c16.7,41.8,52.3,201.1,74.7,310.3c12.1,59.1,21.9,107.3,26.2,121.8\tc3.3,11.1,8.5,24.6,14.4,40.1c16.1,42.4,38.5,100.3,45.8,170.1l10.3,1.8c36.4-56,74.2-115.4,116.1-176.3\tc34.4-50,69.4-101,103.4-152.1c24.1,53.1,62.8,130.5,101.4,207.8c27.2,54.5,54.4,113.9,76.4,159.6l172.7-736.2l-14.1,16.3\tl-161.3,691.1c-54.3-111.6-132.2-262.7-169.9-346.5c14.2-21.4,28.2-42.9,41.8-64.2l-15.9,9.2c-8.4,13-21.2,33.3-29.8,46.4\tc-4.1-9.4-7.6-17.8-10.4-24.9L1418.1,1372z\";\r\n\r\nexport const X_1 = \"M1377,1457c-22.5,22.4-36.7,37.5-57.1,61.3c-44.9,62.8-84.2,122.6-131.2,183.1c-2.5,3.2-94.6,130.1-99.4,136.6\tc-2.4,2.1-4.9,5.4-8.2,6.3c-0.9-4.5-0.8-7.9-0.6-11.2c18.4-29.5,85.9-113.7,111.5-150.6c38.6-52,77.5-108.5,113.9-159.5\tc20.4-24.8,36.3-46.5,59.9-67.7c5.9-5.3,8.5-11.9-3.1-23.8c-25.2-35.1-50.7-69.2-78-103.2c-28.7-34.1-64.2-62.9-95.2-93.8\tc-17.1-16.6-34.3-33.3-50.2-49.8c-6.5-7.1-9.6-10.8-9.2-20.8c6.7,2.6,11.1,5.1,14.1,10.9c17.9,24.5,39.6,43.8,62.1,64\tc28,25.2,73.8,70.2,86.5,85.4c25.3,31.9,53.7,69.3,74.9,96.2c12.6,17.6,14.7,21.1,27.9,3.8c4.8-6.4,52.3-76,81.6-117.2\tc38.7-52.1,79.8-129.6,119.8-183.9c17.2-27.2,38.5-45.2,64.2-65.2c24.6-17.9,76.2-58,86.7-66.4c1.3-1.1,4.6-2,5.7,0.3\tc1.1,1.1,0.9,4.5-0.4,5.6c-6.9,5.3-47.8,34.6-82.1,64.3c-61.9,44-68.6,68.5-145.9,189.4c-30.5,44.4-122,179.1-137.7,199.7\tc-3.7,6.5,67.8,99.2,110.6,163.2c58.7,93.4,62.5,99,92.4,148.9c3.1,7,7.2,12.9,0.4,14.8c-2.3,1-5.5-3.8-6.5-6\tc-36.2-59.3-68.3-116.1-87.2-141.9C1489.1,1612.5,1405.4,1496.7,1377,1457z\";\r\n\r\nexport const Y_1 = \"M1472.2,1347c-58.1,118.6-78.6,168.4-102.1,203.9c-10.3,23.4-21.7,40.8-49.8,99.6c-28.8,58.3-39.7,84.3-69.5,131.9\tc-0.7,1.1-9.5,14-11.9,16.1c-0.4-3.5,6.2-17.5,7-19.1c2.8-9.1,48.4-95.4,59.9-120.3c26.4-51.8,32.9-70.4,62.8-122.5\tc35.9-62.6,26.3-46.2,93.3-185.1c4.3-9.2,4.2-10.3-4.3-16.6c-29.4-21.8-55.5-47-77.5-74.2c-19.4-23.8-133.3-136.3-166-159.6\tc-3.2-2.3-17-10.1-20-13.8c-1-1.8-1.8-2-0.6-3.8c0.4-0.9,4.6-1.2,6.3-0.4c6.3,2.9,13.2,5.8,18.2,10.1c15.6,12.9,30.9,26,45.4,40.1\tc69.2,66.6,112.1,110.3,121.7,121.5c16.5,18.9,36,37.7,54.7,55.3c4.3,4.2,21.1,16.7,29.5,23.2c9.7-16.2,25.1-42.6,31.1-54.4\tc-14.7,27.3,131.4-234.3,133.2-237.4c1.6-3,4.8-6.4,7.1-5.2c1.7,1,1.5,5.2-0.9,9.5c-24.3,40.2-79.5,138.8-87.5,154.7\tc-10.3,18.9-20.7,38-31,56.9c-17.6,32.2-32,56.2-40.9,74.4c-2.5,5-4.3,6.5,0,11.1c1.3,1.3,4,3.4,4.5,5c1.1,3.2,0.9,4.6-2.6,5.5\tC1481.9,1353.5,1476.1,1350.7,1472.2,1347z\";\r\n\r\nexport const Z_1 = \"M1295.4,1727.9c6.6,0.5,98.5,3.7,229.1,6c23.9,0.2,104.8-0.7,127.9,1.5c17.2,2.4,34.2,5.9,51.4,11.3\tc1.5-0.1,3.1,1.8,4.8,3.8c-2.3,2.1-4.6,3.2-7.7,3.3c-7.7-0.8-15.6-4.5-23.3-6.2c-29.7-10-117.4-6.9-147.4-5.9\tc-18.5,0.3-204.9-4.9-227.3-5.1c-11.1,0.1-16.2,1.2-24.2,18.9c-3.7,8.1-7.1,15.3-12.2,23.4c-0.8,1.1-3,1.1-3.8,0.2\tc-1.5-1-0.1-5-0.1-7c3.8-10.6,13.1-29.1,14.5-32.6c-6.5,0.3-15.7,0.6-21.1-0.2c-2.3-0.9-5.4-0.8-5.5-1.8c0.7-4.1,2.1-6.1,4.5-6.2\tc6-2.2,12.2-1.4,18.4-1.6c7,0.7,16.3-5.6,20.6-12.8c11.8-16.4,35.3-49.2,47.8-67.7c51.6-73.7,81.3-117.4,118.9-184.2\tc33.1-64.2,64-121.3,102.9-179.7c20-30,64.1-106,99.3-160.6c1.5-3,14.1-20.3,17-25.4c-55.7,4.2-169,11.5-220.9,19.5\tc-53.6,8.9-108.2,12.8-163,12.7c-18.5-0.2-157.2-14.5-169.6-18.1c-1.5-0.9-5.3-0.8-5.4-1.8c0.7-3,2.2-5.1,4.4-7.1\tc1.5-2.1,5.5,0.8,7.8,1.7c117.4,12.2,188.9,20.4,271.8,11.5c86.8-11,199.9-24,264.5-26.2c9.1-1.4,16-2.6,21.1-11.8\tc4.4-8.1,9.5-15.3,14.6-22.5c2.3-2.1,5.4-1.2,8.4-2.3c0.1,4-4.4,8.2-5.7,11.2c-3,6.2-8.4,18.3-45.4,73.7\tc-32.3,58-127.7,207.1-142.9,231.1c-21.8,42-43.8,83.4-76.5,140.7C1400.4,1584.3,1295.5,1727.6,1295.4,1727.9z\";\r\n\r\nexport const CHARS = {\r\n  \"A\": A_1,\r\n  \"B\": B_1,\r\n  \"C\": C_1,\r\n  \"D\": D_1,\r\n  \"E\": E_1,\r\n  \"F\": F_1,\r\n  \"G\": G_1,\r\n  \"H\": H_1,\r\n  \"I\": I_1,\r\n  \"J\": J_1,\r\n  \"K\": K_1,\r\n  \"L\": L_1,\r\n  \"M\": M_1,\r\n  \"N\": N_1,\r\n  \"O\": O_1,\r\n  \"P\": P_1,\r\n  \"Q\": Q_1,\r\n  \"R\": R_1,\r\n  \"S\": S_1,\r\n  \"T\": T_1,\r\n  \"U\": U_1,\r\n  \"V\": V_1,\r\n  \"W\": W_1,\r\n  \"X\": X_1,\r\n  \"Y\": Y_1,\r\n  \"Z\": Z_1\r\n};","\r\n/**\r\n * expected argument lengths\r\n * @type {Object}\r\n */\r\n\r\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\r\n\r\n/**\r\n * segment pattern\r\n * @type {RegExp}\r\n */\r\n\r\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\r\n\r\n/**\r\n * parse an svg path data string. Generates an Array\r\n * of commands where each command is an Array of the\r\n * form `[command, arg1, arg2, ...]`\r\n *\r\n * @param {String} path\r\n * @return {Array}\r\n */\r\n\r\nexport function parsePath(path) {\r\n\tvar data = []\r\n\tpath.replace(segment, function(_, command, args){\r\n\t\tvar type = command.toLowerCase()\r\n\t\targs = parseValues(args)\r\n\r\n\t\t// overloaded moveTo\r\n\t\tif (type === 'm' && args.length > 2) {\r\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\r\n\t\t\ttype = 'l'\r\n\t\t\tcommand = command === 'm' ? 'l' : 'L'\r\n\t\t}\r\n\r\n\t\twhile (true) {\r\n\t\t\tif (args.length === length[type]) {\r\n\t\t\t\targs.unshift(command)\r\n\t\t\t\treturn data.push(args)\r\n\t\t\t}\r\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\r\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\r\n\t\t}\r\n\t})\r\n\treturn data\r\n}\r\n\r\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\r\n\r\nfunction parseValues(args) {\r\n\tvar numbers = args.match(number)\r\n\treturn numbers ? numbers.map(Number) : []\r\n}\r\n\r\nexport function writePath(segments) {\r\n  let path = \"\";\r\n  for(let seg of segments) {\r\n    path += seg[0];\r\n    for(let i = 1; i < seg.length; i++) {\r\n      if(i > 1) path += \",\";\r\n      path += seg[i];\r\n    }\r\n    path += \" \";\r\n  }\r\n  return path;\r\n}","\r\nlet seed = 42;\r\n\r\nexport const random = () => {\r\n  var x = Math.sin(seed++) * 10000;\r\n  return x - Math.floor(x);\r\n}\r\n\r\nexport const resetSeed = (val) => seed = val;","import { writePath } from \"./SVGUtils\";\r\nimport { random } from \"./random\";\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\r\n\r\nexport function rounden(srcPath, points, normals, roundingMagnitude) {\r\n  let newPath = srcPath;\r\n\r\n  // calc bounding box\r\n  let bbox = points.reduce((acc, val) => {\r\n    acc.x0 = ( acc.x0 === undefined || val.x < acc.x0 ) ? val.x : acc.x0\r\n    acc.x1 = ( acc.x1 === undefined || val.x > acc.x1 ) ? val.x : acc.x1\r\n    acc.y0 = ( acc.y0 === undefined || val.y < acc.y0 ) ? val.y : acc.y0\r\n    acc.y1 = ( acc.y1 === undefined || val.y > acc.y1 ) ? val.y : acc.y1\r\n    return acc;\r\n  }, {x0: undefined, x1: undefined, y0:undefined, y1: undefined});\r\n\r\n  let roundingFunction = (point) => roundingMagnitude * Math.sin((point.y - bbox.y0) * (Math.PI / (bbox.y1-bbox.y0))) * (point.x < (bbox.x0 + bbox.x1)/2 ? -1 : 1);\r\n\r\n  // rounden\r\n  for(let i = 0; i < srcPath.length; i++) {\r\n    let pointer = points[i];\r\n    let lastSeg = srcPath[i];\r\n\r\n    let lastNormal = i > 0 ? normals[i-1] : new Vector2D();\r\n    if(lastSeg[0] === \"M\" || lastSeg[0] === \"L\") {\r\n      newPath[i][1] += roundingFunction(pointer);\r\n    } else if(lastSeg[0] === \"C\") {\r\n      newPath[i][1] += roundingFunction(pointer);\r\n      newPath[i][3] += roundingFunction(pointer);\r\n      newPath[i][5] += roundingFunction(pointer);\r\n    } else if(lastSeg[0] === \"S\") {\r\n      newPath[i][1] += roundingFunction(pointer);\r\n      newPath[i][3] += roundingFunction(pointer);\r\n    }\r\n  }\r\n  return newPath;\r\n}\r\n\r\nexport function stretch(newPath, points, normals, magn) {\r\n  for(let i = 0; i < newPath.length; i++) {\r\n    let pointer = points[i];\r\n    let lastSeg = newPath[i];\r\n    let totalNormal = normals[i];\r\n\r\n    let lastNormal = i > 0 ? normals[i-1] : new Vector2D();\r\n\r\n    if(lastSeg[0] === \"M\" || lastSeg[0] === \"L\") {\r\n      newPath[i][1] += totalNormal.x * magn.x;\r\n      newPath[i][2] += totalNormal.y * magn.y;\r\n    } else if(lastSeg[0] === \"C\") {\r\n      newPath[i][1] += lastNormal.x * magn.x;\r\n      newPath[i][2] += lastNormal.y * magn.y;\r\n      newPath[i][3] += totalNormal.x * magn.x;\r\n      newPath[i][4] += totalNormal.y * magn.y;\r\n      newPath[i][5] += totalNormal.x * magn.x;\r\n      newPath[i][6] += totalNormal.y * magn.y;\r\n    } else if(lastSeg[0] === \"S\") {\r\n      newPath[i][1] += lastNormal.x * magn.x;\r\n      newPath[i][2] += lastNormal.y * magn.y;\r\n      newPath[i][3] += totalNormal.x * magn.x;\r\n      newPath[i][4] += totalNormal.y * magn.y;\r\n    } else if(lastSeg[0] === \"V\") {\r\n      newPath[i][1] += totalNormal.y * magn.y;\r\n    }\r\n\r\n    // start points\r\n    if( i > 0 && i + 1 < newPath.length && totalNormal.y > 0.5 && normals[i-1].y < 0.5 && normals[i+1].y < 0.5 &&\r\n      points[i].y > points[i+1].y && points[i].y > points[i-1].y) {\r\n      if(lastSeg[0] === \"C\") {\r\n        //newPath[i][5] = newPath[i][5] + totalNormal.x * magn.x;\r\n        newPath[i][4] = newPath[i][4] + totalNormal.y * magn.y* 3;\r\n        newPath[i][6] = newPath[i][6] + totalNormal.y * magn.y* 3;\r\n      } else if(lastSeg[0] === \"V\") {\r\n        newPath[i][1] = newPath[i][1] + totalNormal.y * magn.y* 3;\r\n      }\r\n    }\r\n    /*lines.push({\r\n      x0: pointer.x, y0: pointer.y, \r\n      x1: pointer.x + totalNormal.x * 40, y1: pointer.y + totalNormal.y * 40, \r\n      stroke: \"green\"\r\n    });\r\n    \r\n    circles.push({\r\n      x: pointer.x, y: pointer.y, \r\n      r: 3, \r\n      fill: \"red\"\r\n    });*/\r\n  }\r\n  return newPath;\r\n}\r\n\r\nexport function roughenPath(newPathSmoothed, magn) {\r\n  let roughPath = [];\r\n  // roughen\r\n  for(let subPath of getSubPaths(newPathSmoothed)) {\r\n    var path = require(\"svg-path-properties\");\r\n    var properties = path.svgPathProperties(writePath(subPath));\r\n    var length = properties.getTotalLength();\r\n    \r\n    var startPoint = properties.getPointAtLength(0);\r\n    roughPath.push([\"M\", startPoint.x, startPoint.y]);\r\n\r\n    for(let i = 1; i < length; i+=20) {\r\n      var point = properties.getPointAtLength(i);\r\n      roughPath.push([\"L\", random() * magn - magn/2 + point.x, random() * magn - magn/2 + point.y]);      \r\n    }\r\n    roughPath.push([\"z\"]);\r\n  }\r\n  return roughPath;\r\n}\r\n\r\nexport function getSubPaths(path) {\r\n  let subPaths = [];\r\n  let j = 0;\r\n  for (let i = 0; i < path.length; i++) {\r\n    if(!subPaths[j]) \r\n      subPaths[j] = [];\r\n\r\n    subPaths[j].push(path[i]);\r\n\r\n    if(path[i][0] === \"z\") {\r\n      j++;\r\n    }\r\n  }\r\n  return subPaths;\r\n}\r\n\r\nexport function crackPoints(newPathSmoothed, age) {\r\n  // add zacken\r\n  let { points, normals } = analyzePath(newPathSmoothed);\r\n\r\n  let subPath = getSubPaths(newPathSmoothed)[0]\r\n  var path = require(\"svg-path-properties\");\r\n  var properties = path.svgPathProperties(writePath(subPath));\r\n  var length = properties.getTotalLength();\r\n\r\n  let crackPoints = [];\r\n  for(let j = 0; j < 100; j+=5) {\r\n    let l = j / 100 * length; \r\n    let crackPoint = properties.getPointAtLength(l);\r\n    let tangent = properties.getTangentAtLength(l);  \r\n    let crackNormal = new Vector2D(-tangent.y, tangent.x);\r\n\r\n    let crackWidth = age * 4 / 100 + Math.random()*1 + 1;\r\n    let crackLength = age * 40 / 100 + Math.random()*5;\r\n    let crackLength2 = crackLength * (0.2 + Math.random()*0.1);\r\n    let crackWidth2 = crackWidth/2 - 1 + Math.random()*2;\r\n\r\n    let crackOpositePoint = new Vector2D(\r\n      crackPoint.x - crackNormal.x * 5,\r\n      crackPoint.y - crackNormal.y * 5\r\n    );\r\n    for(let i = 0; i < 500; i++) {\r\n      if(!insidePolygon(crackOpositePoint, points)) {\r\n        break;\r\n      }\r\n      crackOpositePoint = crackOpositePoint.add(new Vector2D(\r\n        - crackNormal.x * 5,\r\n        - crackNormal.y * 5\r\n      ));\r\n    }\r\n    let crackMidPoint = new Vector2D((crackPoint.x + crackOpositePoint.x)/2, (crackPoint.y + crackOpositePoint.y)/2);\r\n\r\n    if(crackPoints.some(c => Math.pow(c.x - crackMidPoint.x, 2) + Math.pow(c.y - crackMidPoint.y, 2) < 200)) {\r\n      l--;\r\n      continue;\r\n    }\r\n\r\n    crackPoints.push(crackMidPoint)\r\n\r\n    let crack = [];\r\n    crack.push([\"M\", \r\n      crackPoint.x - crackNormal.x * 5,\r\n      crackPoint.y - crackNormal.y * 5\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength2,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength - crackNormal.y * -crackWidth2,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength + crackNormal.x * -crackWidth2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength2 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength2 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x - crackNormal.x * 5 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackPoint.y - crackNormal.y * 5 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    // back side\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x + crackNormal.x * 5 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackOpositePoint.y + crackNormal.y * 5 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength2 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength2 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength - crackNormal.y * -crackWidth2,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength + crackNormal.x * -crackWidth2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength2,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"z\"]);\r\n    newPathSmoothed.push(...crack);\r\n  }\r\n\r\n  /*\r\n  for(let i = 0; i < 10; i++) {\r\n    let crackIndex = Math.floor(Math.random() * (points.length - 1));\r\n    let crackPoint = points[crackIndex];\r\n    let crackNormal = normals[crackIndex].norm();      \r\n\r\n    let crackWidth = 2 + Math.random()*4;\r\n    let crackLength = 30 + Math.random()*20;\r\n    let crackLength2 = 5 + Math.random()*4;\r\n    let crackWidth2 = crackWidth/2 - 1 + Math.random()*2;\r\n\r\n    // can insert Crack?\r\n    if(newPathSmoothed[crackIndex][0] !== \"C\" || newPathSmoothed[crackIndex + 1][0] !== \"C\" || (crackNormal.x < 0.8 && crackNormal.x > -0.8)) {\r\n      i--;\r\n      continue;\r\n    }\r\n    \r\n    let crackOpositePoint = new Vector2D(\r\n      crackPoint.x - crackNormal.x * 5,\r\n      crackPoint.y - crackNormal.y * 5\r\n    );\r\n    for(let i = 0; i < 500; i++) {\r\n      if(!insidePolygon(crackOpositePoint, points)) {\r\n        break;\r\n      }\r\n      crackOpositePoint = crackOpositePoint.add(new Vector2D(\r\n        - crackNormal.x * 5,\r\n        - crackNormal.y * 5\r\n      ));\r\n    }\r\n\r\n    let crackMidPoint = new Vector2D((crackPoint.x + crackOpositePoint.x)/2, (crackPoint.y + crackOpositePoint.y)/2);\r\n\r\n    if(crackPoints.some(c => Math.pow(c.x - crackMidPoint.x, 2) + Math.pow(c.y - crackMidPoint.y, 2) < 200)) {\r\n      i--;\r\n      continue;\r\n    }\r\n\r\n    crackPoints.push(crackMidPoint)\r\n\r\n    let crack = [];\r\n    crack.push([\"M\", \r\n      crackPoint.x - crackNormal.x * 5,\r\n      crackPoint.y - crackNormal.y * 5\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength2,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength - crackNormal.y * -crackWidth2,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength + crackNormal.x * -crackWidth2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength2 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength2 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x - crackNormal.x * 5 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackPoint.y - crackNormal.y * 5 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    // back side\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x + crackNormal.x * 5 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackOpositePoint.y + crackNormal.y * 5 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength2 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength2 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength - crackNormal.y * -crackWidth2,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength + crackNormal.x * -crackWidth2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength2,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"z\"]);\r\n    newPathSmoothed.push(...crack);\r\n    //newPathSmoothed.splice(crackIndex+1, 0, ...crack)\r\n  }*/\r\n\r\n  return newPathSmoothed;\r\n}\r\n\r\nexport function insidePolygon(point, vs) {\r\n  // ray-casting algorithm based on\r\n  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n\r\n  var x = point.x, y = point.y;\r\n\r\n  var inside = false;\r\n  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\r\n      var xi = vs[i].x, yi = vs[i].y;\r\n      var xj = vs[j].x, yj = vs[j].y;\r\n\r\n      var intersect = ((yi > y) != (yj > y))\r\n          && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n      if (intersect) inside = !inside;\r\n  }\r\n\r\n  return inside;\r\n};\r\n\r\nexport function pathToPoints(newPath) {\r\n  let newPoints = [];\r\n  for(let i = 0; i < newPath.length; i++) {\r\n    let segment = newPath[i];\r\n    // move pointer\r\n    if(segment[0] === \"M\") {\r\n      newPoints[i] = new Vector2D(segment[1], segment[2]);\r\n    } else if(segment[0] === \"L\") {\r\n      newPoints[i] = new Vector2D(segment[1], segment[2]);\r\n    } else if(segment[0] === \"C\") {\r\n      newPoints[i] = new Vector2D(segment[5], segment[6]);\r\n    } else if(segment[0] === \"V\") {\r\n      newPoints[i] = new Vector2D(newPoints[i-1].x, segment[1]);\r\n    } else if(segment[0] === \"S\") {\r\n      newPoints[i] = new Vector2D(segment[3], segment[4]);\r\n    } else {\r\n      newPoints[i] = newPoints[i-1]\r\n    }\r\n  }\r\n  return newPoints;\r\n}\r\n\r\nexport function smoothPath(newPath, smoothing) {\r\n  \r\n  const line = (pointA, pointB) => {\r\n    const lengthX = pointB.x - pointA.x\r\n    const lengthY = pointB.y - pointA.y\r\n    return {\r\n      length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\r\n      angle: Math.atan2(lengthY, lengthX)\r\n    }\r\n  }\r\n  \r\n  const controlPoint = (line, smooth) => (current, previous, next, reverse) => {\r\n    const p = previous || current\r\n    const n = next || current\r\n    const l = line(p, n)\r\n\r\n    const angle = l.angle + (reverse ? Math.PI : 0)\r\n    const length = l.length * smooth\r\n    const x = current.x + Math.cos(angle) * length\r\n    const y = current.y + Math.sin(angle) * length\r\n    return new Vector2D(x, y);\r\n  }\r\n\r\n  const bezierCommand = (controlPoint) => (point, i, a) => {\r\n    const cps = controlPoint(a[i - 1], a[i - 2], point)\r\n    const cpe = controlPoint(point, a[i - 1], a[i + 1], true)\r\n    return ['C', cps.x, cps.y, cpe.x, cpe.y, point.x, point.y];\r\n  }\r\n\r\n  let newPathSmoothed = [];\r\n  let newPoints = pathToPoints(newPath);\r\n  \r\n  const bezierCommandCalc = bezierCommand(controlPoint(line, smoothing))    \r\n\r\n  for(let i = 0; i < newPath.length; i++) {\r\n    if(newPath[i][0] === \"M\" || newPath[i][0] === \"z\") {\r\n      newPathSmoothed.push(newPath[i]);\r\n    } else {\r\n      //newPathSmoothed.push([\"L\", newPoints[i].x, newPoints[i].y]);\r\n      newPathSmoothed.push(bezierCommandCalc(newPoints[i], i, newPoints));\r\n    }\r\n  }\r\n\r\n  return newPathSmoothed;\r\n}\r\n\r\nexport function analyzePath(path) {\r\n\r\n  let pointer = new Vector2D();\r\n  let endNormal = new Vector2D();    \r\n\r\n  let lastMIndex = 0;\r\n  let lastMNormal = new Vector2D();\r\n  let normals = Array(path.length).fill(new Vector2D());\r\n  let points = Array(path.length).fill(new Vector2D());\r\n  \r\n  for(let i = 0; i < path.length; i++) {\r\n    let segment = path[i];\r\n\r\n    let startNormal = new Vector2D();\r\n    let totalNormal = endNormal.copy();\r\n\r\n    // end of a subpath -> close back to beginning\r\n    if(i+1 < path.length && path[i+1][0] === \"z\") {\r\n      // calc normal\r\n      normals[lastMIndex] = lastMNormal.add(endNormal).norm();\r\n    }\r\n\r\n    // update pointer\r\n    if(segment[0] === \"M\") {\r\n      // move pointer\r\n      pointer = new Vector2D(segment[1], segment[2]);\r\n      // calc normal\r\n      endNormal = new Vector2D();\r\n    } else if(segment[0] === \"L\") {\r\n      // calc normal\r\n      endNormal = startNormal = new Vector2D(segment[1], segment[2]).normal();\r\n      // move pointer\r\n      pointer = new Vector2D(segment[1], segment[2]);\r\n    } else if(segment[0] === \"l\") {\r\n      // calc normal\r\n      endNormal = startNormal = new Vector2D(segment[1], segment[2]).normal();\r\n      // to absolute coords\r\n      segment[0] = \"L\"\r\n      segment[1] = pointer.x + segment[1];\r\n      segment[2] = pointer.y + segment[2];\r\n      // move pointer\r\n      pointer = new Vector2D(segment[1], segment[2]);\r\n    } else if(segment[0] === \"c\") {\r\n      // calc normal\r\n      endNormal = new Vector2D(segment[3], segment[4]).normal();\r\n      startNormal = new Vector2D(segment[1], segment[2]).normal();\r\n      // to absolute coords\r\n      segment[0] = \"C\"\r\n      segment[1] = pointer.x + segment[1];\r\n      segment[2] = pointer.y + segment[2];\r\n      segment[3] = pointer.x + segment[3];\r\n      segment[4] = pointer.y + segment[4];\r\n      segment[5] = pointer.x + segment[5];\r\n      segment[6] = pointer.y + segment[6];\r\n      // move pointer\r\n      pointer = new Vector2D(segment[5], segment[6]);\r\n    } else if(segment[0] === \"C\") {\r\n      // move pointer\r\n      pointer = new Vector2D(segment[5], segment[6]);\r\n      // calc normal\r\n      endNormal = new Vector2D(segment[3], segment[4]).normal();\r\n      startNormal = new Vector2D(segment[1], segment[2]).normal();\r\n    } else if(segment[0] === \"V\") {\r\n      // calc normal\r\n      startNormal = new Vector2D(-Math.sign(segment[1]), 0);\r\n      endNormal = new Vector2D(-Math.sign(segment[1]), 0);\r\n      // move pointer\r\n      pointer = new Vector2D(pointer.x, segment[1]);\r\n    } else if(segment[0] === \"v\") {\r\n      // calc normal\r\n      startNormal = new Vector2D(-Math.sign(segment[1]), 0);\r\n      endNormal = new Vector2D(-Math.sign(segment[1]), 0);\r\n      // to absolute coords\r\n      segment[0] = \"V\"\r\n      segment[1] = pointer.y + segment[1];\r\n      // move pointer\r\n      pointer = new Vector2D(pointer.x, segment[1]);\r\n    } else if(segment[0] === \"S\") {\r\n      // move pointer\r\n      pointer = new Vector2D(segment[3], segment[4]);\r\n    } else if(segment[0] === \"s\") {\r\n      // to absolute coords\r\n      segment[0] = \"S\"\r\n      segment[1] = pointer.x + segment[1];\r\n      segment[2] = pointer.y + segment[2];\r\n      segment[3] = pointer.x + segment[3];\r\n      segment[4] = pointer.y + segment[4];\r\n      // move pointer\r\n      pointer = new Vector2D(segment[3], segment[4]);\r\n    } else if(segment[0] === \"z\") {\r\n      endNormal = new Vector2D();\r\n    }\r\n\r\n    if(i+1 < path.length && path[i+1][0] === \"z\") {\r\n      // totalNormal stays unchanged\r\n    } else if(segment[0] === \"z\")\r\n      totalNormal = normals[lastMIndex].copy();\r\n    else if(segment[0] === \"S\")\r\n      totalNormal = endNormal.copy();\r\n    else\r\n      totalNormal = totalNormal.add(startNormal).norm();\r\n\r\n    // merge last end normal with this start normal\r\n    if(i > 0) {\r\n      normals[i-1] = totalNormal.copy();\r\n      // if last seg was start point, pointsve normal seperately\r\n      if(path[i-1][0] === \"M\") {\r\n        lastMNormal = totalNormal.copy();\r\n        lastMIndex = i-1;\r\n      }\r\n    }\r\n\r\n    // pointsve edge point position\r\n    points[i] = pointer.copy();\r\n  }\r\n\r\n  return {points, normals, path}\r\n}\r\n\r\nexport class Path {\r\n  segments = [];\r\n}\r\n\r\nexport class CubicBezier {\r\n  constructor(x0=0, y0=0, cx0=0, cy0=0, cx1=0, cy1=0, x1=0, y1=0) {\r\n    this.x0 = x0;\r\n    this.y0 = y0;\r\n    this.cx0 = cx0;\r\n    this.cy0 = cy0;\r\n    this.cx1 = cx1;\r\n    this.cy1 = cy1;\r\n    this.x1 = x1;\r\n    this.y1 = y1;\r\n  }\r\n\r\n  toString() {\r\n\r\n  }\r\n\r\n  static parse(str){\r\n\r\n  }\r\n}\r\n\r\nexport class QuadraticBezier {\r\n\r\n}\r\n\r\nexport class Line {\r\n\r\n}\r\n\r\nexport class VertivalLine {\r\n\r\n}\r\n\r\nexport class Move {\r\n  \r\n}\r\n\r\nexport class EndPath {\r\n  \r\n}\r\n\r\nexport class Vector2D {\r\n  constructor(x=0,y=0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  add(vec) {\r\n    return new Vector2D(this.x + vec.x, this.y + vec.y);\r\n  }\r\n\r\n  isNull() {\r\n    return this.x === 0 && this.y === 0;\r\n  }\r\n\r\n  copy() {\r\n    return new Vector2D(this.x, this.y);\r\n  }\r\n\r\n  length() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  norm() {\r\n    if(this.isNull()) {\r\n      return new Vector2D();\r\n    }\r\n    let len = this.length();\r\n    return new Vector2D(this.x / len, this.y / len);\r\n  }\r\n\r\n  normal() {\r\n    let norm = this.norm();\r\n    return new Vector2D(-norm.y, norm.x);\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Grid, Typography, Button, TextField, IconButton, FormHelperText } from '@material-ui/core';\r\nimport { A_1, CHARS } from './examples';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { parsePath, writePath } from './svg/SVGUtils';\r\nimport { Vector2D, analyzePath, smoothPath, crackPoints, roughenPath, stretch, rounden } from './svg/geometry';\r\nimport { Slider } from 'material-ui-slider';\r\nimport { resetSeed, random } from './svg/random';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDice, faDownload } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst styles = () => ({\r\n  transformContainer: {\r\n    height: 700,\r\n  },\r\n  canvas: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  downloadBtn: {\r\n    position: \"absolute\",\r\n    top: 80,\r\n    right: 20,\r\n  }\r\n});\r\n\r\nconst maxAge = 80;\r\n\r\nclass WriteDemo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      srcPath: A_1,\r\n      resPath: [],\r\n      circles: [],\r\n      lines: [],\r\n      age: 0,\r\n      play: false,\r\n      text: \"TEST\",\r\n      seed: 42\r\n    }\r\n  }\r\n\r\n  componentDidMount() {    \r\n    this.transformLetter();\r\n    setInterval(() => {\r\n      const {age, play} = this.state;\r\n      if(play) {\r\n        if(age === maxAge) {\r\n          this.setState({age: 0})\r\n        } else {        \r\n          this.setState({age: age + 1})\r\n        }\r\n        this.transformLetter();\r\n      }\r\n    }, 200)\r\n  }\r\n\r\n  transformLetter = () => {\r\n    const {age, text} = this.state;\r\n    let resPath = [];\r\n\r\n    for(let c of text) {\r\n      resetSeed(this.state.seed);\r\n      \r\n      var srcPath = parsePath(CHARS[c]);\r\n\r\n      // randomization parameters\r\n      let magn = new Vector2D(\r\n        age * 2.0 + random() * 3, \r\n        age * 1.0 + random() * 2\r\n      );\r\n      let roundingMagnitude = age + random() * 3;\r\n\r\n      var circles = [];\r\n      var lines = [];\r\n\r\n      let { points, normals } = analyzePath(srcPath);\r\n\r\n      // rounden path\r\n      let newPath = rounden(srcPath, points, normals, roundingMagnitude);\r\n\r\n      // stretch\r\n      newPath = stretch(newPath, points, normals, magn)  \r\n\r\n      // roughen path\r\n      newPath = roughenPath(newPath, age * 8/maxAge);\r\n\r\n      // smooth roughened again\r\n      newPath = smoothPath(newPath, Math.min(0, age - 40) / maxAge * 0.15 + 0.05);\r\n\r\n      // crack points overlay\r\n      newPath = crackPoints(newPath, age);\r\n\r\n      resPath.push(writePath(newPath));\r\n    }\r\n    \r\n    this.setState({\r\n      resPath: resPath,\r\n      circles: circles,\r\n      lines: lines\r\n    })\r\n  }\r\n\r\n  handleSelect = (e) => {\r\n    this.setState({\r\n      srcPath: e.target.value,\r\n    });\r\n    setTimeout(() => this.transformLetter(), 100);\r\n  }\r\n\r\n  render(){\r\n    const {classes} = this.props;\r\n    const {srcPath, resPath} = this.state;\r\n\r\n    const svgText = '<svg viewBox=\"1000 800 ' + (1000 * resPath.length) + ' 1500\">' + \r\n      resPath.map((path, index) => '<path transform=\"translate(' + (1000 * index) + ', 0)\" d=\"' + path + '\" />').join() + \r\n      ' </svg>';\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid container>\r\n          <Grid item xs={3} style={{padding: 20}}>\r\n            <Typography variant=\"h5\">Parameters:</Typography>\r\n\r\n            <IconButton onClick={() => {\r\n              this.setState({seed: Math.random() * 100});      \r\n              setTimeout(() => this.transformLetter(), 10);\r\n            }}><FontAwesomeIcon icon={faDice}/></IconButton>\r\n\r\n            <TextField fullWidth label=\"Engraved Text:\" value={this.state.text} onChange={(e) => {\r\n              this.setState({text: e.target.value.toUpperCase()});\r\n              setTimeout(() => this.transformLetter(), 10);\r\n            }} />\r\n            <br/>\r\n            <FormHelperText>Age</FormHelperText>\r\n            <Slider value={this.state.age} min={0} max={maxAge} onChange={(e)=>{\r\n              this.setState({age: e});\r\n              setTimeout(() => this.transformLetter(), 10);\r\n            }}></Slider>\r\n\r\n            <Button onClick={() => this.setState({play: !this.state.play})}>{this.state.play ? \"Pause\": \"Play Animation\"}</Button>\r\n          </Grid>\r\n          <Grid item xs={9} className={classes.transformContainer} style={{padding: 20}}>\r\n            <Typography variant=\"h5\">{\"Result after approx. \" + this.state.age + \" years:\"}</Typography>\r\n            <svg viewBox={\"1000 800 \" + (1000 * resPath.length) + \" 1500\"} style={{maxHeight: 700}}>\r\n                {resPath.map((path, index) => (\r\n                  <path transform={\"translate(\" + (1000 * index) + \", 0)\"} d={path}/> \r\n                ))}   \r\n            </svg>            \r\n            <IconButton href={\"data:text/plain;charset=utf-8,\" + encodeURIComponent(svgText)} download=\"bark.svg\" className={classes.downloadBtn}>\r\n              <FontAwesomeIcon icon={faDownload} />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(WriteDemo);\r\n","import React, { Component } from 'react';\r\nimport { Grid, Typography, Button, TextField } from '@material-ui/core';\r\nimport { A_1, CHARS } from './examples';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { parsePath, writePath } from './svg/SVGUtils';\r\nimport { Vector2D, analyzePath, smoothPath, crackPoints, roughenPath, stretch, rounden } from './svg/geometry';\r\nimport { Slider } from 'material-ui-slider';\r\nimport { resetSeed, random } from './svg/random';\r\n\r\nconst styles = () => ({\r\n  transformContainer: {\r\n    height: 700,\r\n  },\r\n  canvas: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  }\r\n});\r\n\r\nclass SketchDemo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      srcPath: A_1,\r\n      resPath: [],\r\n      circles: [],\r\n      lines: [],\r\n      age: 0,\r\n      play: false,\r\n      text: \"TEST\",\r\n      seed: 42\r\n    }\r\n  }\r\n\r\n  componentDidMount() {    \r\n    this.transformLetter();\r\n    setInterval(() => {\r\n      const {age, play} = this.state;\r\n      if(play) {\r\n        if(age === 100) {\r\n          this.setState({age: 0})\r\n        } else {        \r\n          this.setState({age: age + 1})\r\n        }\r\n        this.transformLetter();\r\n      }\r\n    }, 200)\r\n  }\r\n\r\n  transformLetter = () => {\r\n    const {age, text} = this.state;\r\n    let resPath = [];\r\n\r\n    for(let c of text) {\r\n      resetSeed(this.state.seed);\r\n      \r\n      var srcPath = parsePath(CHARS[c]);\r\n\r\n      // randomization parameters\r\n      let magn = new Vector2D(\r\n        age * 1.0 + random() * 3, \r\n        age * 0.5 + random() * 2\r\n      );\r\n      let roundingMagnitude = age + random() * 3;\r\n\r\n      var circles = [];\r\n      var lines = [];\r\n\r\n      let { points, normals } = analyzePath(srcPath);\r\n\r\n      // rounden path\r\n      let newPath = rounden(srcPath, points, normals, roundingMagnitude);\r\n\r\n      // stretch\r\n      newPath = stretch(newPath, points, normals, magn)    \r\n\r\n      // smooth path\r\n      let newPathSmoothed = smoothPath(newPath, 0.15)\r\n\r\n      // roughen path\r\n      let roughPath = roughenPath(newPathSmoothed, age * 8/100);\r\n\r\n      // smooth roughened again\r\n      roughPath = smoothPath(roughPath, 0.15);\r\n\r\n      // crack points overlay\r\n      roughPath = crackPoints(roughPath, age);\r\n\r\n      resPath.push(writePath(roughPath));\r\n    }\r\n    \r\n    this.setState({\r\n      resPath: resPath,\r\n      circles: circles,\r\n      lines: lines\r\n    })\r\n  }\r\n\r\n  handleSelect = (e) => {\r\n    this.setState({\r\n      srcPath: e.target.value,\r\n    });\r\n    setTimeout(() => this.transformLetter(), 100);\r\n  }\r\n\r\n  render(){\r\n    const {classes} = this.props;\r\n    const {srcPath, resPath} = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Typography variant=\"h5\">SketchDemo:</Typography>\r\n        <Button onClick={() => {\r\n          this.setState({seed: Math.random() * 100});      \r\n          setTimeout(() => this.transformLetter(), 10);\r\n        }}>Shuffle</Button>\r\n        <TextField value={this.state.text} onChange={(e) => {\r\n          this.setState({text: e.target.value});\r\n          setTimeout(() => this.transformLetter(), 10);\r\n        }} />\r\n        <Button onClick={() => this.setState({play: !this.state.play})}>{this.state.play ? \"Pause\": \"Play\"}</Button>\r\n        <Slider value={this.state.age} onChange={(e)=>{\r\n          this.setState({age: e});\r\n          setTimeout(() => this.transformLetter(), 10);\r\n        }}></Slider>\r\n        <Typography variant=\"h5\">Result:</Typography>\r\n        <Grid container className={classes.transformContainer}>\r\n          <Grid item xs={12}>\r\n            <svg viewBox={\"1000 800 \" + (1000 * resPath.length) + \" 1500\"}>\r\n              {resPath.map((path, index) => (\r\n                <path transform={\"translate(\" + (1000 * index) + \", 0)\"} d={path}/> \r\n              ))}   \r\n            </svg>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SketchDemo);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Typography, Button, AppBar, Toolbar } from '@material-ui/core';\nimport { withStyles } from '@material-ui/styles';\nimport WriteDemo from './WriteDemo';\nimport SketchDemo from './SketchDemo';\nimport { Route, Switch } from \"react-router-dom\";\n\nconst styles = () => ({\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n    height: 50,\n  },\n  root: {\n    height: \"100vh\"\n  },\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render(){\n    const {classes} = this.props;\n\n    return (\n      <div className=\"root\">\n        <AppBar position=\"\">\n          <Toolbar>\n            <a aria-label=\"Menu\" href=\"/\">\n              <img className={classes.menuButton} src=\"logo.png\" />\n            </a>\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            </Typography>\n            <Button color=\"inherit\" href=\"#/sketch\">\n              Sketch\n            </Button>\n            <Button color=\"inherit\" href=\"#/write\">\n              Write\n            </Button>\n          </Toolbar>\n        </AppBar>  \n        <Switch>\n          <Route path=\"/sketch\" component={SketchDemo} />\n          <Route component={WriteDemo} />        \n        </Switch>  \n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#23391F',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#182A42',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    error: red,\n    // Used by `getContrastText()` to maximize the contrast between the background and\n    // the text.\n    contrastThreshold: 3,\n    // Used to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nReactDOM.render(\n  <HashRouter basename={baseUrl}>\n    <MuiThemeProvider theme={theme}>\n      <App />\n    </MuiThemeProvider>\n  </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}