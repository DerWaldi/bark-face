{"version":3,"sources":["examples.js","svg/SVGUtils.js","svg/geometry.js","App.js","serviceWorker.js","index.js"],"names":["A_1","CHARS","A","B","D","E","F","H","K","L","N","T","U","length","a","c","h","l","m","q","s","t","v","z","segment","parsePath","path","data","replace","_","command","args","type","toLowerCase","numbers","match","number","map","Number","parseValues","push","concat","splice","unshift","Error","writePath","segments","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","seg","value","i","err","return","rounden","srcPath","points","normals","roundingMagnitude","newPath","bbox","reduce","acc","val","x0","x","x1","y0","y","y1","roundingFunction","point","Math","sin","PI","pointer","lastSeg","Vector2D","stretch","magn","totalNormal","lastNormal","roughenPath","newPathSmoothed","roughPath","getSubPaths","subPath","properties","require","svgPathProperties","getTotalLength","startPoint","getPointAtLength","random","subPaths","j","crackPoints","age","_analyzePath","analyzePath","_loop","crackPoint","tangent","getTangentAtLength","crackNormal","crackWidth","crackLength","crackLength2","crackWidth2","crackOpositePoint","insidePolygon","add","crackMidPoint","some","pow","crack","apply","vs","inside","xi","yi","xj","yj","smoothPath","smoothing","newPoints","pathToPoints","bezierCommandCalc","controlPoint","cps","cpe","bezierCommand","line","smooth","current","previous","reverse","angle","cos","pointA","pointB","lengthX","lengthY","sqrt","atan2","endNormal","lastMIndex","lastMNormal","Array","fill","startNormal","copy","norm","normal","sign","arguments","Object","classCallCheck","this","createClass","key","vec","isNull","len","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","transformLetter","_this$state","state","text","resPath","circles","lines","setState","handleSelect","e","target","setTimeout","play","_this2","setInterval","_this2$state","_this3","classes","_this$state2","react_default","createElement","className","Typography","variant","TextField","onChange","Button","onClick","es5","Grid","container","transformContainer","item","xs","viewBox","index","transform","d","Component","withStyles","theme","height","canvas","width","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.313c099f.chunk.js","sourcesContent":["export const A_1 = \"M1538,1381.59l58,13c2,1,21,6,31,8c5,1,9,3,17,1l-12-7l-84-21c-14-2-18-9-23-23c-4-12-8-25-11-37c-2-8-3-15-4-23l-2-11 c-5-30-10-60-22-87c-19-43-37-88-54-136c-11-31-21-63-29-94c-5-19-9-32-30-45c-1,0-2-1-3-2c-4-2-7-4-7-1s1,4,0,6c-15,30-26,65-36,97 c-7,22-15,44-23,68c-8,23-18,47-26,71c-13,39-27,79-43,115c-4,9-9,11-20,9l-27-6c-7-2-13-3-19-4c-7-1-14-2-27-1c16,7,25,10,34,10 c1,0,3,1,5,1l25,6c17,4,19,9,15,19c-4,11-6,22-9,33c-2,7-4,15-6,22l-5,14l-4,10c-4,10-6,19-9,28c-15,44-27,86-27,130v26 c6-5,8-17,8-20v-14c0-46,12-80,29-127c7-20,18-52,23-73c2-8,4-18,8-28c3-8,8-11,24-8c2,1,16,5,29,9l21,7c21,7,41,11,61,15 c14,3,28,8,43,11c9,2,18,4,27,6c18,4,37,9,55,15c30,10,39,18,45,34c3,8,5,16,8,24c5,14,10,28,13,42c7,33,36,116,52,166 c7,22,11,37,12,40c7,21,11,43,16,65l21,87c6,24,14,49,24,73c3,7,4,13,6,20c1,3,2,5,5,5c3-1,1-4,1-8c0-7-3-15-7-24c-3-7-5-13-7-20 l-7-22c-6-19-11-38-16-57c-4-16-8-31-11-46l-6-29c-5-25-11-48-19-72l-6-17c-8-22-20-59-26-78c-2-6-3-10-4-12c-2-5-6-18-11-36 C1562,1462.59,1550,1409.59,1538,1381.59z M1372,927.59c10,5,19,24,22,32c3,7,4,14,6,21c3,10,6,20,9,29c15,45,31,90,49,135l18,45 c12,30,16,58,24,90c1,4,1,8,2,12c3,12,4,24,8,37c3,9,7,25,7,34c0,1-7-2-10-3l-114-29c-25-6-44-8-69-15c-11-3-25-8-38-13 c-10-4-20-7-29-9c-16-4-18-8-15-16l13-33c6-16,12-32,18-48l30-83l36-105c4-11,6-21,10-32c4-10,7-21,11-31 C1365,933.59,1368,927.59,1372,927.59z\";\r\n\r\nexport const A_2 = \"M1196,1391.59v1h-22l22,2v1h1v-1v-1v-1v-1H1196z M1201,1391.59v1v1v1l4-1l3,1h2h2l-2-1l-3-1L1201,1391.59z M1341,1329.59v6 l1,8l1-8v-4l1-7h-1h-1h-1h-1L1341,1329.59z M1336,1321.59h1h1h1h1v-1h-1l-1-10l-1-10l-1,20V1321.59z M1440,1348.59l1,30l1,4l1-28 l1-6v-1h-1h-1h-1h-1V1348.59z M1440,1345.59h1h1h1h1v-1l-1-20l-1-3v13l-2,10V1345.59z M1196,1297.59l2-9l1,12v-10l2-5v-1h-1h-1h-1 l-4,17L1196,1297.59z M1170,1271.59v3h1h1h1v-1l-1-5l-1-1l-1-7l-1,2L1170,1271.59z M1651,1819.59h-4l-4,1h7l7,2h1v-1v-1h-4h-1 L1651,1819.59z M1661,1809.59v1v1v1v1h6l7-2l-2-1l-2,1h-6L1661,1809.59z M1574,1542.59l-4,1l-8,1l4,1l4-1l11,2v-1v-1v-1v-1H1574z  M1584,1540.59v1v1v1v1h1l4-1l10-1l-10-1l-4-1H1584z M1567,1499.59l-20,1l-5,1h15l10,2h1v-1v-1v-1v-1H1567z M1571,1498.59v1v1v1v1h1 l6-3l14,1l-10-3l-10,1H1571z M1557,1467.59l-10,1l-10,1l10,1l10,1h1v-1v-1v-1v-1H1557z M1407,987.59v1v1v1v1h7l4-1l10-1h-7h-9 L1407,987.59z M1406,980.59v1v1v1v1v-1l6-2l12,1l-7-1l-5-2L1406,980.59z M1248,1237.59h-3l-10,2h2h9l6,1v-1v-1v-1v-1L1248,1237.59z  M1257,1232.59v1v1v1v1h1l6,1l10-3l-10,1l-6-3H1257z M1485,1212.59l-20,1l-10-1l10,3l20,1h1v-1v-1v-1v-1H1485z M1490,1208.59v1v1v1 v1h1l10-2h10v-1l-20-1H1490z M1310,1071.59v1l-14,1l14,1v1h1v-1v-1v-1v-1H1310z M1314,1072.59v1v1v1v1h1l4-3l3,1l8-2l-6,1 L1314,1072.59z M1538,1381.59l58,13c2,1,21,6,31,8c5,1,9,3,17,1l-12-7l-84-21c-14-2-18-9-23-23c-4-12-8-25-11-37c-2-8-3-15-4-23 l-2-11c-5-30-10-60-22-87c-19-43-37-88-54-136c-11-31-21-63-29-94c-5-19-9-32-30-45c-1,0-2-1-3-2c-4-2-7-4-7-1s1,4,0,6 c-15,30-26,65-36,97c-7,22-15,44-23,68c-8,23-18,47-26,71c-13,39-27,79-43,115c-4,9-9,11-20,9l-27-6c-7-2-13-3-19-4c-7-1-14-2-27-1 c16,7,25,10,34,10c1,0,3,1,5,1l25,6c17,4,19,9,15,19c-4,11-6,22-9,33c-2,7-4,15-6,22l-5,14l-4,10c-4,10-6,19-9,28 c-15,44-27,86-27,130v26c6-5,8-17,8-20v-14c0-46,12-80,29-127c7-20,18-52,23-73c2-8,4-18,8-28c3-8,8-11,24-8c2,1,16,5,29,9l21,7 c21,7,41,11,61,15c14,3,28,7,43,10c9,2,18,5,27,7c18,4,37,9,55,15c30,10,39,18,45,34c3,8,5,16,8,24c5,14,10,28,13,42 c7,34,36,116,52,166c7,22,11,37,12,40c7,21,11,43,16,65l21,87c6,24,14,49,24,73c3,7,4,13,6,20c1,3,2,5,5,5c3-1,1-4,1-8 c0-7-3-15-7-24c-3-7-5-13-7-20l-7-22c-6-19-11-38-16-57c-4-16-8-31-11-46l-6-29c-5-25-11-48-19-72l-6-17c-8-22-20-59-26-78 c-2-6-3-10-4-12c-2-5-6-18-11-36C1562,1462.59,1550,1409.59,1538,1381.59z M1372,927.59c10,5,19,24,22,32c3,7,4,14,6,21 c3,10,6,20,9,29c15,45,31,90,49,135l18,45c12,30,16,58,24,90c1,4,1,8,2,12c3,12,4,24,8,37c3,9,7,25,7,34c0,1-7-2-10-3l-114-29 c-25-6-44-8-69-15c-11-3-25-8-38-13c-10-4-20-7-29-9c-16-4-18-8-15-16l13-33c6-16,12-32,18-48l30-83l36-105c4-11,6-21,10-32 c4-10,7-21,11-31C1365,933.59,1368,927.59,1372,927.59z\";\r\n\r\nexport const A_3 = \"M1180.82,1379.82h-20l-12,1l10,3l4,1l19-1v-1v-1v-1v-1H1180.82z M1185.82,1379.82v1v1v1l7,1l10,1l12,1h2l-2-1l-5-1 L1185.82,1379.82z M1325.82,1317.82v16l1,8l1-8l2-14l-1-7h-1h-1h-1h-1L1325.82,1317.82z M1320.82,1309.82h1h1h1h1v-1h-1l-1-10l-1-10 l-1,20V1309.82z M1424.82,1336.82l1,40l1,4l1-38l1-6v-1h-1h-1h-1h-1V1336.82z M1424.82,1333.82h1h1h1h1v-1l-1-30l-1-3v13l-2,20 V1333.82z M1180.82,1295.82l2-13l1,16l2-14l1-10l-1-2h-1h-1h-1l-5,27L1180.82,1295.82z M1154.82,1259.82v3h1h1h1l-2-11l1-5l-1-1 l-1-17l-1,12L1154.82,1259.82z M1644.82,1806.82l-3,1l-4,1h7l17,2h1v-11v6h-4h-4L1644.82,1806.82z M1665.82,1797.82v1v1v1v5l16-2 l17-4l-6-1l-6-2l-18,3L1665.82,1797.82z M1575.82,1530.82l-14,1l-8,1l4,1l4-1l21,2v-1v-1v-1v-1H1575.82z M1585.82,1528.82v1v1v1v1h1 l4-1l40-1l-40-1l-4-1H1585.82z M1568.82,1487.82l-30,1l-5,1h15l20,2h1v-1v-1v-1v-1H1568.82z M1572.82,1486.82v1v1v1v1h1l18-1l22-1 l-10-3l-30,1H1572.82z M1558.82,1455.82l-20,1l-10,1l10,1l9,2l12-1v-1v-1v-1v-1H1558.82z M1401.82,975.82v1v1v1v1l12,1l9-2l10-1 l-7-1l-19,1L1401.82,975.82z M1400.82,968.82v1v1v1v1v-1l11-1h17l-7-1l-10-2L1400.82,968.82z M1222.82,1225.82h-3l-10,2h2h9l16,1v-1 v-1v-1v-5L1222.82,1225.82z M1241.82,1220.82v1v1v1v4l1,1l26-3l10-3l-10,1l-26-3H1241.82z M1472.82,1197.82l-30,4l-10-1l10,3l26-1 l15,2v-1v-1v-1v-1L1472.82,1197.82z M1487.82,1190.82v1v7v1v1h1h12l28-2l10-1l-34-3L1487.82,1190.82z M1299.82,1059.82l-24,1l-8,2 l9,1h23h1v-1v-1v-1v-1H1299.82z M1303.82,1060.82v1v1v1v1h1l11-2h16l8-2l-6,1L1303.82,1060.82z M1542.82,1373.82l2-1h4l4,1l3,2h6 l4,2l16,3l7,1h4l10,4l5,2l6-1l4,2l8,2l10,1l9,3l3-4l-5-3l-9-4l-5-5l-6-1l-6-2l-6-1l-5-1l-3-1l-7,1l-6,1l-2-2l-6-6h-4l-7,2l-7-2h-3 l-6-5l-9,3l-6-3l-3-3l-4-5v-3l-2-5l-2-8l-2-5l-1-5l1-6l-3-4l2-5l-3-5v-5v-5l-1-7v-5l-3-10l1-6l-1-7l1-7l-2-4v-5v-6l-3-5l-1-5l-3-8 l-4-6l-1-6l-3-4l-1-4l-4-3l-2-4l-3-4l-1-7l-7-7l-4-3l-1-5v-7l-1-3l-6-5v-3l-3-5l-1-6l-2-3l-2-6l-2-4l-1-4l-2-5l-4-5l-1-5l-3-6l-1-3 l-2-5l1-5l-2-5l-5-5v-5l-3-4l-2-4l-2-4l-3-7v-3l-5-11l-2-5v-3l-3-4l-2-7l1-4l-2-3l-2-7l-1-4l-1-4l-2-5l-4-5l-1-4l-1-5l-1-5l-2-6 l-1-3l-1-4v-5l-4-10v-6l-3-4l-1-6l-3-4l-2-4l-7-4l-3-3l-2-3l-3-4l-9-3l-9-3l-4,5l-3,7l-2,4l-3,5v4l-3,5v3l-5,6v3l-1,6l-4,5v4l-2,3 l-2,6l-1,4l-2,7l-4,3v5l-2,3l-1,5l-3,5l-3,9l1,5l-4,5l-1,7l-2,5l-2,5v3l-2,4l-3,6l1,5l-2,4l-4,6l-2,5l-4,10v4l-4,6l-1,4v3l-5,5l-2,5 l1,5l-4,5l-2,5l-1,3l-2,7l-2,3l-1,6l-3,8l-1,5l-3,6l-1,4l-1,6l-1,3l-3,4l-2,7l1,4l-3,3l-3,5l-2,6l-1,4l-3,3l-2,6v6l-2,2l-2,7l-4,3 l-1,5v4l-4,4l-2,6v5l-5,8l-5,5h-1l-4-2l-8-1h-6l-6-2l-6-3h-13l-6-2l-4-3h-11l-6,2h-5l-9-1v1l7,3l4,3h5l4,2l7,1h8l9,2l3,2l6,1l4,2 l13,3l3-1l4,2l1,7l1,3l-4,11v4l-1,5l-4,3l2,6l-3,6l-2,8l-2,3l-1,5v6l-6,8l-2,5l-2,8l-4,10l-3,7l1,4l-3,4l-1,4l-4,11v5l-2,5l-1,4 l-3,4l-1,5l-1,6l-1,3l-2,4l-2,5v6v4l-2,4v7l-3,4l-3,5l1,3v7l-2,4l-2,4l2,7l-4,5l-1,3l2,7v5l-2,4l2,9l-2,5l2,7v5l7,7l8-11v-6v-9v-7 l1-10v-3l1-6v-5l-1-4l3-5l-1-6v-4l3-4v-3l-1-7l2-5l2-5l1-5l2-6l1-6v-5l2-3l1-6l2-3l1-5l3-6l1-4l2-6l3-5l1-7l2-6l2-4l4-7v-4l2-3l4-7 l2-4l1-6l4-2l1-6l-1-5l1-5l1-7l4-8l1-6l1-3v-5l1-4l4-11l1-1l5-2l2,1l8-2l7,3l6,2h6l4,1l7,4l10,2l6,2l5,1l9,2l4,5l5-1l4,3l9,1h2l5,1 l6,1l3,2h8l3,3l6-1l9,3l5,2l5,1l10,2h6l4,1h5l10,5l4,1l7,1l4-1l5,2l9,2l7,1l4,2l4,2l7,1l6,2h4l4,3h5l6,3l10,3h4l5,3l5,2l7,3l4,2l3,1 l4,4l3,4l1,4l4,5l3,8v5l3,3l2,7l3,8l2,7l2,2l2,7l-2,4l3,5l2,5l2,3l3,11l-1,5l3,5v4l2,3l1,6l1,4l3,7l1,2l1,6l1,6l3,4l1,6v3l1,4l2,6 l4,4l1,4l1,7l1,5l2,2l2,6l3,5l1,5l1,5l2,3l1,6l4,6v4l3,5l1,5l1,2l2,7l1,5l2,9l4,5l1,6l2,4l-1,5l2,6l4,5l1,9v5l4,4v6l1,6l1,4l3,5v5 l2,5l2,5v3l2,5l3,10l1,6l1,4l1,5l3,12l1,2v6l2,6v5l2,3l3,6l-1,3l1,6l2,4v5l3,7l3,7l1,7l2,5l1,5l1,3l1,6l2,4l2,5v5l5,6l2,3l2,3l3,6 l1,6l5,10l1,6l5,12l13,24l-5-26l-1-9l-3-3v-7l-3-3l-3-10l-1-4l-1-6l-5-11v-3l-2-4l-1-4l-4-10l-2-6l-1-3v-6l-2-4l-4-6l1-4l-2-5l-1-4 l-2-5v-5l-3-11v-4l-3-5l-2-6v-5l-2-4l-1-4l-1-7l-3-9l-2-5v-5l-2-6l-1-5l-2-9l1-4l-3-6l-1-4v-5l-2-5v-4l-4-5v-6l-2-4l-1-5v-5l-3-3 l-1-6l-5-10v-3l-3-4l-1-9v-6l-5-4v-5l-2-5l-1-6l-2-5l-3-5v-3l-2-4l-3-6l-1-6l-1-4l-3-6l-2-4l-4-8l-1-6l-2-7l-2-4l-2-5l-1-3l-2-6l1-3 l-3-6l-3-10v-5l-3-4v-5l-3-4l-1-6l-2-4v-6v-4l-4-6l1-4l-3-7l-2-4l-1-3v-6l-1-6l-2-5l-1-5l-3-4l-1-5v-5l-3-3L1542.82,1373.82z  M1362.82,918.82h2l5,4l3,2l2,5l5,6v5l2,2l7,11l-2,4l3,5l4,11l2,4l1,7v3l2,7l3,8l2,4l-1,5l4,6v4l2,4l1,5l2,6l2,3l2,5l1,5l1,5l3,6 l3,4l1,5l2,3l2,6l2,3l2,5v5l3,5l1,5l2,4l4,3v6l4,4v6l3,3l4,10l1,3l4,5l2,5v5l2,3l2,7l3,2l1,5l2,10l2,6l3,4l2,4v5l3,3v7v5l3,3l1,4 l1,7l2,3v5l3,6l1,5v3l2,6l-1,4l3,11l2,11l3,4l-1,6v4l3,5l2,4l-1,4l5,9l1,5l2,5l1,6l-1,6l3,5l-6-2l-8-2h-3l-4-1l-5-1l-4-2l-6-1h-4h-6 l-5-3l-8-2l-3-1l-4-2h-4h-5l-8-2l-3-2l-5-1l-4-1l-4-2l-7,1l-6-2l-4-1l-6-1l-12-3h-4l-3-1l-5-2l-12-3l-4-2h-5l-7-1l-4,1l-6-2h-5l-5-2 l-9-4h-5l-7-2l-2-1l-8-5l-5,1l-4-1l-10-4l-4-2l-6-2l-5-1l-4-3l-13-3l-4,1l-4-4v-4l4-9l2-5l1-6l1-4l5-8l3-10l2-4l3-7v-5l3-3l2-6l4-8 v-7l6-9v-5l1-3l3-5l2-5v-5l3-5l2-3l3-6l1-5l1-3l2-5l1-5l4-5l-1-4l2-3l3-5l5-10l2-6l1-5v-3l2-6l3-5l2-5l1-3l2-6l1-3l4-5l-2-5l3-5l2-6 v-3l1-6l4-5l1-4l1-5l4-6v-5l4-9l2-4v-4l2-5v-5l4-4l6-8l-1-6l2-3l2-4v-6l3-5l2-10l2-3L1362.82,918.82z\";\r\n\r\nexport const A_4 = \"M1175.32,1351.59h-23l-13,1l11,3l5,1l21-1v-1v-1v-1v-1H1175.32z M1180.32,1351.59v1v1v1l8,1l11,2h2h3l-3-1l-5-1 L1180.32,1351.59z M1336.32,1289.59v6l1,8l2-8v-4l1-7h-1h-2h-1h-1L1336.32,1289.59z M1331.32,1281.59h1h1h1h1v-1h-1l-1-10l-1-10 l-1,20V1281.59z M1447.32,1308.59l1,40l1,4l1-38l1-6v-1h-1h-1h-1h-1V1308.59z M1447.32,1305.59h1h1h1h1v-1l-1-20l-1-3v13l-2,10 V1305.59z M1175.32,1267.59l2-13l1,16l2-14l1-10l-1-2h-1h-1h-1l-6,27L1175.32,1267.59z M1146.32,1231.59v3h1h1h1l-2-11l1-5l-1-1 l-1-17l-1,12L1146.32,1231.59z M1663.32,1779.59h-4l-5,1h8l19,2h1v-1v-1h-4h-2L1663.32,1779.59z M1685.32,1769.59v1v1v1v1h7l19-2 l-7-1l-6,1h-9L1685.32,1769.59z M1615.32,1502.59l-16,1l-8,1l4,1l4-1l24,2v-1v-1v-1v-1H1615.32z M1626.32,1500.59v1v1v1v1h1l5-1 l44-1l-44-1l-5-1H1626.32z M1607.32,1459.59l-33,1l-6,1h17l22,2h1v-1v-1v-1v-1H1607.32z M1612.32,1458.59v1v1v1v1h1l7-3l26,1l-11-3 l-22,1H1612.32z M1596.32,1427.59l-22,1l-11,1l11,1l10,2l13-1v-1v-1v-1v-1H1596.32z M1421.32,947.59v1v1v1v1l13,1l10-2l12-1l-8-1 l-21,1L1421.32,947.59z M1420.32,940.59v1v1v1v1v-1l12-1h19l-8-1l-11-2L1420.32,940.59z M1221.32,1197.59h-3l-11,2h2h10l18,1v-1v-1 v-1v-5L1221.32,1197.59z M1243.32,1192.59v1v1v1v4l1,1l29-3l11-3l-11,1l-29-3H1243.32z M1511.32,1172.59l-33,1l-11-1l11,3l18-1l16,2 v-1v-1v-1v-1H1511.32z M1517.32,1162.59v1v7v1v1h1h13l20-2l12-1l-27-3L1517.32,1162.59z M1307.32,1031.59l-15,1l-9,2l10,1h14h1v-1 v-1v-1v-1H1307.32z M1312.32,1032.59v1v1v1v1h1l12-2h7l9-2l-7,1L1312.32,1032.59z M1604.32,1354.59v-3l3,1h1h1l1,1l3,1l19,4l11,1h1 l12,4l9,2h4h1l11,3l10,1l26,6l24-3l-23-9l-19-6h-11h-2l-5-2l-10-2l-5-1l-6-3l-6-3l-2,1h-5l-8-1l-4-1l-4-2l-12-3h-4l-6-2h-9l-3-1 l-5-4l-1-2v-4l-3-7l-4-8v-3l-4-5v-6l-3-5l-2-4l-2-6l-1-7l-3-3v-7v-4l-3-10v-10l-5-5l-1-6v-5l-1-4v-4l-4-8v-4l-1-5v-2l-3-6v-6l-5-4 v-6v-2l-5-6v-6l-5-8l-3-5l-2-5l-3-4l-2-6l-4-4v-3v-4l-5-6l-2-3l-3-6l-4-4l-3-7v-2l-4-5l-2-8l-3-6l-1-4l-2-1l-3-4l-5-8l-1-5l-6-4v-6 l-1-4l-3-4l-2-5v-3l-5-10l-1-3v-3l-3-3l-5-8l-1-7l-2-2l-6-10l-1-3l-1-2l-1-8l-2-2l-2-6l-1-5l-1-6l-6-6v-3l-2-3v-4l-4-10v-6l-3-3 l-1-6l-4-4l-2-5l-9-4l-2-2l-2-3l-6-6l-15-5l-19-6l-8,9l-6,7l-2,4l-4,7v4l-3,5v3l-5,6v2l-1,8l-5,5v3l-1,1l-3,6l-2,4l-4,10l-3,3v4 l-2,4l-1,5l-2,2l-4,10l1,6l-4,6l-1,7l-3,2l-3,7v3l-1,2l-5,8l2,5l-2,2l-5,9v2l-7,12v5l-5,6l-1,2v5l-4,5l-2,4l1,5l-5,6l-2,2l-2,3 l-2,10l-2,3l-1,3l-4,8v5l-3,6l-3,5l-1,6l-1,5l-3,4l-2,5l1,5l-4,4l-2,2l-3,6l-4,7l-2,3l-2,4v8l-2,2l-1,7l-4,3l-1,3v6l-5,4l-3,5v5 l-6,5l-1,1l-2-2h-1l-2-1h-7l-5-2h-6l-15-5h-10l-5,1l-14-4l-8,3h-2l-32,1l10,3l10,7l9,1h5l2,1l12,2l10,1l4,1l5,2l8,1l3,2l12,1h1l4,4 l2,6l1,2l-6,12v3l-1,7l-3,2l1,5l-2,5l-2,11l-4,3l-1,3v7l-4,6l-2,5l-2,8l-5,10l-5,8l1,5l-3,5l-1,1l-4,12v6l-2,3l-2,7l-3,4l-1,2l-3,6 l-1,3l-2,4l-3,7v5v5l-2,4v7l-1,2l-4,7l1,2v8l-1,2l-2,5l1,8l-3,3l-2,4l2,7v6l-2,4l2,8l4,2l2,3l3,5l20,13l22-6l9-11l4-11v-9l-1-5l4-3 l-2-7v-7l2-2l-1-7l4-5v-2v-6v-4l2-3l-1-5l3-5l2-5l2-7l1-6v-6l2-4l1-6l3-3v-2l2-6l2-4l2-6l5-8l1-5l2-5l1-7l4-6v-4l1-1l1-3l2-4l5-7v-4 l1-7l4-4l1-3l1-9l1-2l1-4l1-3v-5l1-3l2-4v-3v-2l-1-3l1,1v-2l2-2h5h2h8l13,2l5,2l10,2l3,1l7,8l9-2l2,1l16,2h1l3,1h4l4,3h8l3,4l13-2 l8,3l3,1l8,2l14,2h5l3,1h5l10,4l7,2l12,1h2l5,1l11,2h4l5,3l3,1l23,2l7,2h3l4,3h7l8,3l11,3h3l6,3l4,2l-5,3l2,1h1l4,3l3,3l1,4l4,8l2,7 v4l3,2l-2,10l4,8l1,4l3,2l1,9l-1,4l3,6l1,2l3,3l-2,13l-1,4l3,5v4l2,2l1,8l1,2l2,6l3,3l2,8l1,4l3,4l2,8v3l1,5l2,3l3,4l1,6l1,7l1,3 l3,2l4,9l2,2v7l2,6l1,2l1,4l5,6v5l4,4l2,8l1,2l2,7l1,5l2,6l1,5l1,6l4,7l2,6l-2,4l4,6l-1,11v4l1,4l-1,7l2,5v8l1,3v5l1,7l-1,3v3l2,7 l-1,6l-1,6l1,4l-3,7l-3,8v5l-2,7l-1,6l-2,4l-2,5l-2,4l-2,3v4l-2,11v8l2,6v8l-1,6l1,7l-1,5l1,2l1,4l2,4l1,6l-1,5l6,7v1l-2,6v4l5,6 l7,15l12,15l13,13l21,9l19-3l20-6l11-8l5-13v-10v-6l-4-4v-4l-5-7l2-3l-3-6v-4l1-10l-1-8v-2l1-9l-2-7l-2-4l-3-7l-2-8l-1-4v-4l-4-6 l-3-5l1-4v-4l-3-6l1-4l-1-6v-6v-6l-1-10l-2-3l2-5l-3-8l-3-6v-9l-3-5l-3-6l1-3l1-4l-1-5l1-4l-2-6v-5l-1-7l1-2l-2-3l1-7v-4l-10-28v-3 l-3-3l-1-9l-4-4v-7l-1-5l-2-7l-1-6l-3-5l-2-3v-3l-6-6l-1-3l-1-8l-2-5l-5-6l-1-2l-4-10l-1-5l-3-8l-2-4l-3-5l-1-3l-1-5l1-3l-4-7v-9v-4 l-3-4v-5l-5-3l-1-6l-2-5v-7v-2l-6-8l2-4l-4-8l-2-4v-2v-6l-2-7l-2-5l-1-2l-4-4l-1-7v-4l-3-5L1604.32,1354.59z M1376.32,936.59v-1l1,2 v1v1v1l-1,5l4,6v3l1,8v3l3,8l6,7l1,2v5l6,6v4l3,6v5l3,6l1,3l2,3l1,6l2,6l1,3l6,4l1,5l2,3l2,6l2,3l3,6l1,5l3,4l2,8l2,1l4,4v5l4,4v6 l4,3l2,9l2,4l5,5l2,6v5l3,5l2,5l3,2l8,9l4,8l2,3l5,7l1,2v4l4,3l3,9v4l2,2l2,6l1,5l2,4v5l9,8v4v3l2,6l-1,4l3,11l2,9l4,5l-1,7v3l3,7 l1,2l-1,4l7,8l1,8l3,5l2,1l-2,1l2,1v1l1,1v1v1l-5-1l-2-1l-3-4h-11l-8-4l-9,2h-1l-4-3h-4l-18-2l-12-3h-4l-6-1l-6-1h-2l-4-2l-10-3 l-3-1l-7-1l-15-3h-5l-3-1l-6-2h-13l-4-2h-5l-10-6l-6,2l-5-1h-5l-3-2l-10-1l-5-2l-8-2l-3-2l-9-1l-5-2l-5-1l-12-5l-2-1l-7-2l-5-1l-1-1 l-3-3l3-5l3-11l5-4l1-4l1-6l2-8l2-10l3-4l3-6v-6l5-3l1-3l5-10v-7l3-9v-4v-2l3-5l3-7v-5l2-3l4-6l3-3l1-5v-3l3-5v-8l5-4l-1-4l4-4l1-2 l4-9l4-7l1-6v-3l1-5l3-5l2-5l2-3l2-6l2-4v-8v-1l4-5l3-7v-3v-8l3-5l1-2l1-7l6-6v-4l5-7v-6v-4l2-5v-5l-2-3l1-2l1-1l2-3l1-1l1-1v-1 L1376.32,936.59z\";\r\n\r\nexport const A_5 = \"M1447.21,1272.97c-18,0-68-15-111-15c-19,0-27-9-25-23c3-22,16-54,23-70c18-41,51-12,79,26 C1440.21,1227.97,1462.21,1272.97,1447.21,1272.97z M1458.21,1391.97c58,15,83,190,83,244c0,56-88,222,24,312s200,97,267,9 c79-104,10-196-10-275c-20-80-128-241-73-229c56,12,111,5,129-38c19-45-168-39-181-105c-20-100-82-237-145-313 c-66-80-160-213-213-175s-222,322-236,359c-14,38-35,42-71,37c-38-5-108-4-62,44s98,24,74,50c-28,30-91,202-45,266 c38,53,148,76,208,45c51-26,65-223,91-250C1329.21,1340.97,1387.21,1373.97,1458.21,1391.97z\";\r\n\r\nexport const A_6 = \"M1390.78,1228.85c-14,7-21-6-58-1c-8,1-10-8-6-20c5-16,10-22,19-35c6-8,14-9,28,12 C1388.78,1206.85,1403.78,1221.85,1390.78,1228.85z M1437.78,1414.85c8,1,46,144,46,224c0,87-83,203,61,312c121,91,268,94,336,9 c93-116,25-166-3-275c-8-31-114-206-92-202c86,16,157-9,152-65c-8-86-174-27-191-105c-22-100-85-226-161-313 c-108-124-244-221-310-175c-76,53-222,336-230,359c-1,3,5,22-33,17c-91-12-147,15-98,64c10,10,74,49,73,50c-75,75-92,205-47,266 c37,50,211,78,278,45c68-33,75-169,90-205C1317.78,1398.85,1367.78,1405.85,1437.78,1414.85z\";\r\n\r\nexport const A_ALL = [A_1, A_2, A_3, A_4, A_5, A_6];\r\n\r\nexport const B_1 = \"M1277.36,1679.82c0-29-1-60-1-89l1-91c0-19,1-38,2-59c27-4,54-5,79-5c45,0,78,9,104,19c49,19,117,51,144,88 c23,32,39,62,33,100c-7,43-61,82-114,99c-67,22-123,22-237,22l-2-18C1283.36,1722.82,1277.36,1701.82,1277.36,1679.82z  M1270.36,1228.82c0-38,2-73,2-106v-42c35,22,38,22,86,43c46,20,84,49,129,84c17,13,30,41,41,81c-13,41-35,74-47,85 c-20,18-52,33-78,38c-11,2-47,10-86,15l-38,5c2-42,6-87-1-128C1278.36,1303.82,1270.36,1249.82,1270.36,1228.82z M1250.36,1436.82 l8,4l11,1c-3,19-3,40-3,58c0,31,0,60,0,91v89c0,23,9,44,10,68l1,16c-31,0-65-1-92-4l4,8c30,3,58,4,89,4c1,9,3,20,3,29l9-3 c0-9,0-17-1-26c130,0,172-3,239-22c57-16,111-64,119-106c8-40-10-73-34-105c-30-41-74-65-146-90c-26-9-68-21-114-21l53-9 c24-4,54-21,81-40c14-10,38-46,51-88c-9-35-19-69-46-90c-48-37-84-60-128-82c-39-20-53-21-88-47c-16-12-47-31-70-38l11,10 c19,11,25,15,43,27c0,19,3,36,3,52c0,34-1,68-3,106c-1,19,9,76,9,76c6,40,2,85,0,128L1250.36,1436.82z\";\r\n\r\nexport const D_1 = \"M1269.55,1421.32c3,58,10,284,15,314c2,12,8,14,19,9c37-17,77-26,112-48c52-33,113-73,149-123c18-25,51-71,72-111 c9-17,43-75,44-81s-29-55-45-79c-27-40-94-96-143-129s-67-39-137-69c-28-12-64-29-100-34c-8-1-12,3-12,9c0,5,1,74,7,131 C1251.55,1219.32,1266.55,1367.32,1269.55,1421.32z M1148.55,1030.32c-13-10,28,7,65,18c14,4,19,6,21-1c2-6,9-3,9,3c0,5,1,10,24,15 c41,9,80,27,119,44c78,34,80,28,174,105c33,27,62,57,84,87c14,19,44,80,44,82c0,1-25,51-29,57c-32,48-85,132-92,143 c-28,44-96,87-152,123c-20,13-88,38-118,48c-6,2-10,5-8,16c1,5,4,20,4,28c0,19-3,6-11-20c-5-16-7-19-23-15c-11,3-58,19-58,19 c-3,0-7,2-10,1c-2-1-1-3,3-5c21-10,31-14,68-24c11-3,16-5,14-16c-1-7-14-307-15-316c-6-51.9-16-188-18-205c-4-31-8-136-8-138 c0-13-6-16-20-22C1197.55,1049.32,1163.55,1042.32,1148.55,1030.32z\";\r\n\r\nexport const E_1 = \"M1556.32,1228.02c-3,4-9,3-22,5c-39,6-126,18-147,22c-19,4-36,1-56,1c-18,0-66,3-72,3c-7,0-12,2-12,8 c0,3-2,91-3,106c-4,60-6,66,3,153c3,28,4,56,7,83c2,20,3,25,5,34c0,4,3,5,11,4c19-2,41-3,60-5c31-3,59-4,89-6c28-2,57-2,85-4 c23-2,46-4,69-7c11,0,23-1,35-2c-2,6-6,7-11,7c-21,3-91,10-98,10c-45,0-89,3-134,7l-93,8c-8,1-14,2-12,10c1,5,1,62-1,96 c-1,14-2,35,1,47l-12,24c-3-5,2-14,4-27c-1-32,0-58,0-91c0-14,1-43-1-57c-40,4-47,10-52,8s-1-4,1-5c10-5,38-7,44-9c5-2,7-5,7-9 c-3-15-7-45-7-55c0-28-5-57-8-84c-3-31-6-63-4-95c1-19,5-61,6-73c2-19,1-39,1-59c0-13-1-16-19-13c-6,1-12,4-18,0c0-6,15-7,26-8 c8-3,10-4,10-10c0-25-4-49-6-74c-1-16-4-32-7-49c-1-5-2-42-2-44c0-6-3-9-11-8c-10,3-36,9-43,6l6-4c10-3,21-7,30-8c23-3,45-8,65-13 c34-8,69-14,103-22c25-6,52-9,78-11c24-2,47-2,71-1c42,2,85-2,129-13c4-1,10-3,14,1c-2,8-51,10-83,16c-21,4-41,4-62,4 c-33,0-65,0-98,4c-39,5-115,22-146,29c-13,3-24,5-35,9c-6,2-10,6-10,12c0,9,0,20,1,31c1,15,5,42,6,50c2,14,8,62,8,85c1,5,4,6,10,6 c8,0,51-2,63-2c32,0,54,2,119-9c23-4,86-14,107-14C1547.32,1226.02,1554.32,1227.02,1556.32,1228.02z\"\r\n\r\nexport const F_1 = \"M1659.14,1047.32c-9,6-22,10-35,11c-17,1-35,2-51,2h-38c-34,0-68,3-103,5c-15,1-31,3-46,5c-38,5-76,6-114,6 c-27,0-54-2-81-2c-4,0-10,1-14,2c-1,1-2,3-2,4s2,3,3,3c3,0,8-1,12-1c7,0,17,0,24,1c8,1,14,2,15,12l3,34c1,16,3,33,3,49v68 c-2,20-3,40-1,61c1,13,1,17-11,17c-5,0-4,8,2,8c7,0,12,2,12,10c0,27,2,54,3,81c1,19,2,39,4,58c4,38,6,77-4,115c-3,11-3,22-5,32 l-13,65c-2,11-7,23-7,35c0,18,6,36,1,54c0,2-1,5,0,5c3,0,5-1,5-2c2-6,3-12,3-18c-3-23-3-46,5-69c3-9,3-18,6-27c4-25,7-50,12-75 c8-39,10-79,5-118l-3-24l-5-92v-19c0-9,1-13,15-13c26,0,53-2,81-2c11,0,25,1,37,0c30-2,60-2,89,2c6,0,13,0,19,0c3,0,10-2,12-5 c-3-1-10-1-13-1l-43-3c-16-1-33-1-48-1c-44,0-86,0-129,2c-19,1-21,0-23-17s0-34,1-51c2-26,1-51,0-77c-1-27-3-53-5-80 c-1-14,4-15,19-14c37,2,73,0,111-3c22-2,42-6,64-7l91-5c15-1,31-1,47-1h32c15,0,30-2,44-4 C1660.14,1061.32,1660.14,1063.32,1659.14,1047.32z\";\r\n\r\nexport const H_1 = \"M1179.82,995.82c3,8,6,19,6,28c0,44,2,92,2,136v168c0,24,2,30,19,32c46,6,91,14,139,19c28,3,57,3,84,5c26,2,52,2,76,1c22-1,24-2,24-27c0-15-1-32-1-47c0-27,1-55,1-82v-29c0-48,2-97,2-146c0-5-2-8,0-13c1-3,2-6,3-6c2,1,3,3,4,6c2,6,1,11,1,17c0,25-2,51-2,79c0,22,0,42,0,63c0,18-1,33-1,50c0,38,1,74,1,112c0,21,1,24,13,25c55,5,83,3,115,8c-32,0-48,2-103,0c-26-1-29,3-29,42c0,30-2,56-2,87c0,11,0,22,0,36l1,256c0,4-1,9-1,15c0,2-1,5-4,8c-3-4-4-7-4-10v-14c0-65,0-282,0-347v-57c0-13-4-18-19-18c-13,0-93-2-93-2c-12,0-24-1-37-2c-17-1-32-1-49-3c-33-4-68-10-100-16c-37-7-39-3-40,39c-1,48-8,195-8,244c0,9-1,18-1,27c0,1-3,3-3,3c-2,0-5-2-5-4v-19c0-69,8-237,10-306c2-66.99,1.07-131.61-1-201c-1.41-47.02,0-94,0-141C1177.82,1006.82,1177.82,1000.82,1179.82,995.82z\";\r\n\r\nexport const K_1 = \"M1205.1,1499.82c-2-18-2-36-1-73c1-54,1-165-2-226c-2-37-9-134-16-174c0-3-2-5-5-8c-6,9-3,10-1,21c4,24,5,43,14,155c3,141,1,139,1,318c3,43,5,86,7,130c1,19,6,95,6,109c0,11,2,19,6,18s2-13,2-21l-7-119c-2-36-4-73-5-110c-1-7,7-14,14-19c25-18,50-33,75-51c29-21,56-44,85-65c8-6,13-7,20,3c45,77,71,127,94,165c6,10,69,114,68,114c13,19,72,127,88,143c2,2,5,4,9,6c0-4-3-16-3-12c0,5-94-153-98-159c-21-31-40-64-58-97c-15-27-68-124-93-164c-8-13-9-17,5-30c47-43,60-58,116-114l108-107c7-6,12-10,3-15c-14,15-107,106-125,124c-78,78-80,80-98,98c-5,5-15,12-21,18c-15-14-23-33-34-47c-3-4-4-13-12-10c-6,2,0,8,6,17l25,37c5,7,4,14-4,22s-33,26-73,56C1273.1,1453.82,1239.1,1479.82,1205.1,1499.82z\";\r\n\r\nexport const L_1 = \"M1185.82,1756.32l1,8c19-2,38-2,55-4l1,8c1,12,2,21,2,25l7-3c0-2-2-32,0-32l41-3c25-2,51-1,78-4c21-2,43-1,65-2c49-2,173-14,213-14l-15-8c-40,0-149,9-199,14c-21,2-43,2-65,2c-26,0-52,1-78,3c-15,1-28,5-41,4c-2-24-4-55-4-82c0-41,1-84,1-114v-54c0-94-6-163-13-255c-5-66-9-133-12-200l-9-4c3,67,8,138,13,205c7,92,13,184,13,277v31c0,29,0,74-2,114l4,83C1222.82,1754.32,1204.82,1754.32,1185.82,1756.32z\";\r\n\r\nexport const N_1 = \"M1629.52,1599.89c-16-10-37-27-45-34c-40-35-78-69-117-102c-44-37-84-72-128-111l-159-160c-17-17-19-28-19-40c0-16-5-22-6-12c-1,13-7,16-24-1c-6-6-14-16-17-12c-3,3,5,11,6,12c28,28,35,37,34,77l-2,110c-4,206,7,260,7,280c0,46,2,176,2,219c0,8,0,17,0,24c0,3,0,6,3,6c9,0,5-13,5-16l-1-179c0-33-7-140-9-215c-1-41-1-126,2-179c3-50,0-74,0-84c3,4,157,163,174,178c46,40,92,82,138,119c51,41,98,89,144,122c7,5,9,10,10,17c6,52,6,101,10,149c1,9,0,22,4,22c2,0,4-4,4-19c-1-48-8-102-9-152l66,55c11,9,15,10,18,7c2-2-7-9-13-14c-17-14-37-26-53-42c-9-9-16-21-17-48c-2-55-6-111-8-166c-1-29-2-51,2-141v-222c0-32-2-38-2-59c0-3-7-16-8-7c-1,8,2,14,2,42c0,48,2,147,1,194l-4,180C1624.52,1468.89,1629.52,1560.89,1629.52,1599.89z\";\r\n\r\nexport const T_1 = \"M1705.02,1081.82h-12c-36,0-73,2-109,2c-17,0-36,1-52,2l-140,6c-11,0-13-1-9-27c0-4,0-7-3-11c-5,6-6,8-7,16c0,24-5,24-34,24c-41,0-111,0-190,2c-24,4-28,10,1,10c84,0,106-3,191-3c28,0,29,2,26,26c-2,17-3,34-5,51c-18,153-27,245-88,550c-2,10-6,20-8,31c0,4-4,16-2,20c6-4,7-14,11-26c15-62,28-125,39-189c38-221,35-234,63-442c1-19,2-22,19-22c19,0,37-3,56-4c25-1,50-3,76-4c22-1,44-3,66-3c31,0,63-2,95-2C1698.02,1088.82,1705.02,1086.82,1705.02,1081.82z\";\r\n\r\nexport const U_1 = \"M1655.67,997.69c1,7,0,13,0,19c0,17-5,36-6,52c-4,65-3,155-6,180c-7,59-7,117-11,175c-8,119-1,135-20,209c-14,54-36,73-92,117c-19,15-69,41-108,51c12,8,22,10,56,27c4,2,7,2,9,8c-4,3-9,0-14-2c-12-5-18-9-29-14c-27-12-30-21-58-10c-5,2-6,3-16,6c-6,2-11,6-18,2c3-7,7-6,13-8c10-3,16-5,27-9c-80-20-102-24-136-65c-22-27-51-59-56-123c-5-61-10-121-12-180c-1-31,4-60,6-90c4-60,7-121,15-180l3-22c1-2,2-4,5-3c3,0,1,4,1,7c0,42-6,84-10,126c-3,34-5,67-9,101c-6,51-2,102,2,153c7,93,7,111,18,137c16,38,58,96,95,109c26,9,61,22,94,24c40-10,68-18,93-34c27-17,53-39,76-61c32-30,50-104,53-171c3-59,3-119,8-179c6-74,11-147,11-221c0-28,4-69,7-105C1647.67,1011.69,1646.67,1001.69,1655.67,997.69z\";\r\n\r\nexport const CHARS = {\r\n  \"A\": A_1,\r\n  \"B\": B_1,\r\n  \"D\": D_1,\r\n  \"E\": E_1,\r\n  \"F\": F_1,\r\n  \"H\": H_1,\r\n  \"K\": K_1,\r\n  \"L\": L_1,\r\n  \"N\": N_1,\r\n  \"T\": T_1,\r\n  \"U\": U_1\r\n};","\r\n/**\r\n * expected argument lengths\r\n * @type {Object}\r\n */\r\n\r\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\r\n\r\n/**\r\n * segment pattern\r\n * @type {RegExp}\r\n */\r\n\r\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\r\n\r\n/**\r\n * parse an svg path data string. Generates an Array\r\n * of commands where each command is an Array of the\r\n * form `[command, arg1, arg2, ...]`\r\n *\r\n * @param {String} path\r\n * @return {Array}\r\n */\r\n\r\nexport function parsePath(path) {\r\n\tvar data = []\r\n\tpath.replace(segment, function(_, command, args){\r\n\t\tvar type = command.toLowerCase()\r\n\t\targs = parseValues(args)\r\n\r\n\t\t// overloaded moveTo\r\n\t\tif (type === 'm' && args.length > 2) {\r\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\r\n\t\t\ttype = 'l'\r\n\t\t\tcommand = command === 'm' ? 'l' : 'L'\r\n\t\t}\r\n\r\n\t\twhile (true) {\r\n\t\t\tif (args.length === length[type]) {\r\n\t\t\t\targs.unshift(command)\r\n\t\t\t\treturn data.push(args)\r\n\t\t\t}\r\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\r\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\r\n\t\t}\r\n\t})\r\n\treturn data\r\n}\r\n\r\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\r\n\r\nfunction parseValues(args) {\r\n\tvar numbers = args.match(number)\r\n\treturn numbers ? numbers.map(Number) : []\r\n}\r\n\r\nexport function writePath(segments) {\r\n  let path = \"\";\r\n  for(let seg of segments) {\r\n    path += seg[0];\r\n    for(let i = 1; i < seg.length; i++) {\r\n      if(i > 1) path += \",\";\r\n      path += seg[i];\r\n    }\r\n    path += \" \";\r\n  }\r\n  return path;\r\n}","import { writePath } from \"./SVGUtils\";\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\r\n\r\nexport function rounden(srcPath, points, normals, roundingMagnitude) {\r\n  let newPath = srcPath;\r\n\r\n  // calc bounding box\r\n  let bbox = points.reduce((acc, val) => {\r\n    acc.x0 = ( acc.x0 === undefined || val.x < acc.x0 ) ? val.x : acc.x0\r\n    acc.x1 = ( acc.x1 === undefined || val.x > acc.x1 ) ? val.x : acc.x1\r\n    acc.y0 = ( acc.y0 === undefined || val.y < acc.y0 ) ? val.y : acc.y0\r\n    acc.y1 = ( acc.y1 === undefined || val.y > acc.y1 ) ? val.y : acc.y1\r\n    return acc;\r\n  }, {x0: undefined, x1: undefined, y0:undefined, y1: undefined});\r\n\r\n  let roundingFunction = (point) => roundingMagnitude * Math.sin((point.y - bbox.y0) * (Math.PI / (bbox.y1-bbox.y0))) * (point.x < (bbox.x0 + bbox.x1)/2 ? -1 : 1);\r\n\r\n  // rounden\r\n  for(let i = 0; i < srcPath.length; i++) {\r\n    let pointer = points[i];\r\n    let lastSeg = srcPath[i];\r\n\r\n    let lastNormal = i > 0 ? normals[i-1] : new Vector2D();\r\n    if(lastSeg[0] === \"M\" || lastSeg[0] === \"L\") {\r\n      newPath[i][1] += roundingFunction(pointer);\r\n    } else if(lastSeg[0] === \"C\") {\r\n      newPath[i][1] += roundingFunction(pointer);\r\n      newPath[i][3] += roundingFunction(pointer);\r\n      newPath[i][5] += roundingFunction(pointer);\r\n    } else if(lastSeg[0] === \"S\") {\r\n      newPath[i][1] += roundingFunction(pointer);\r\n      newPath[i][3] += roundingFunction(pointer);\r\n    }\r\n  }\r\n  return newPath;\r\n}\r\n\r\nexport function stretch(newPath, points, normals, magn) {\r\n  for(let i = 0; i < newPath.length; i++) {\r\n    let pointer = points[i];\r\n    let lastSeg = newPath[i];\r\n    let totalNormal = normals[i];\r\n\r\n    let lastNormal = i > 0 ? normals[i-1] : new Vector2D();\r\n\r\n    if(lastSeg[0] === \"M\" || lastSeg[0] === \"L\") {\r\n      newPath[i][1] += totalNormal.x * magn.x;\r\n      newPath[i][2] += totalNormal.y * magn.y;\r\n    } else if(lastSeg[0] === \"C\") {\r\n      newPath[i][1] += lastNormal.x * magn.x;\r\n      newPath[i][2] += lastNormal.y * magn.y;\r\n      newPath[i][3] += totalNormal.x * magn.x;\r\n      newPath[i][4] += totalNormal.y * magn.y;\r\n      newPath[i][5] += totalNormal.x * magn.x;\r\n      newPath[i][6] += totalNormal.y * magn.y;\r\n    } else if(lastSeg[0] === \"S\") {\r\n      newPath[i][1] += lastNormal.x * magn.x;\r\n      newPath[i][2] += lastNormal.y * magn.y;\r\n      newPath[i][3] += totalNormal.x * magn.x;\r\n      newPath[i][4] += totalNormal.y * magn.y;\r\n    } else if(lastSeg[0] === \"V\") {\r\n      newPath[i][1] += totalNormal.y * magn.y;\r\n    }\r\n\r\n    // start points\r\n    if( i > 0 && i + 1 < newPath.length && totalNormal.y > 0.5 && normals[i-1].y < 0.5 && normals[i+1].y < 0.5 &&\r\n      points[i].y > points[i+1].y && points[i].y > points[i-1].y) {\r\n      if(lastSeg[0] === \"C\") {\r\n        //newPath[i][5] = newPath[i][5] + totalNormal.x * magn.x;\r\n        newPath[i][4] = newPath[i][4] + totalNormal.y * magn.y* 3;\r\n        newPath[i][6] = newPath[i][6] + totalNormal.y * magn.y* 3;\r\n      } else if(lastSeg[0] === \"V\") {\r\n        newPath[i][1] = newPath[i][1] + totalNormal.y * magn.y* 3;\r\n      }\r\n    }\r\n    /*lines.push({\r\n      x0: pointer.x, y0: pointer.y, \r\n      x1: pointer.x + totalNormal.x * 40, y1: pointer.y + totalNormal.y * 40, \r\n      stroke: \"green\"\r\n    });\r\n    \r\n    circles.push({\r\n      x: pointer.x, y: pointer.y, \r\n      r: 3, \r\n      fill: \"red\"\r\n    });*/\r\n  }\r\n  return newPath;\r\n}\r\n\r\nexport function roughenPath(newPathSmoothed, magn) {\r\n  let roughPath = [];\r\n  // roughen\r\n  for(let subPath of getSubPaths(newPathSmoothed)) {\r\n    var path = require(\"svg-path-properties\");\r\n    var properties = path.svgPathProperties(writePath(subPath));\r\n    var length = properties.getTotalLength();\r\n    \r\n    var startPoint = properties.getPointAtLength(0);\r\n    roughPath.push([\"M\", startPoint.x, startPoint.y]);\r\n\r\n    for(let i = 1; i < length; i+=20) {\r\n      var point = properties.getPointAtLength(i);\r\n      roughPath.push([\"L\", Math.random() * magn - magn/2 + point.x, Math.random() * magn - magn/2 + point.y]);      \r\n    }\r\n    roughPath.push([\"z\"]);\r\n  }\r\n  return roughPath;\r\n}\r\n\r\nexport function getSubPaths(path) {\r\n  let subPaths = [];\r\n  let j = 0;\r\n  for (let i = 0; i < path.length; i++) {\r\n    if(!subPaths[j]) \r\n      subPaths[j] = [];\r\n\r\n    subPaths[j].push(path[i]);\r\n\r\n    if(path[i][0] === \"z\") {\r\n      j++;\r\n    }\r\n  }\r\n  return subPaths;\r\n}\r\n\r\nexport function crackPoints(newPathSmoothed, age) {\r\n  // add zacken\r\n  let { points, normals } = analyzePath(newPathSmoothed);\r\n\r\n  let subPath = getSubPaths(newPathSmoothed)[0]\r\n  var path = require(\"svg-path-properties\");\r\n  var properties = path.svgPathProperties(writePath(subPath));\r\n  var length = properties.getTotalLength();\r\n\r\n  let crackPoints = [];\r\n  for(let j = 0; j < 100; j+=5) {\r\n    let l = j / 100 * length; \r\n    let crackPoint = properties.getPointAtLength(l);\r\n    let tangent = properties.getTangentAtLength(l);  \r\n    let crackNormal = new Vector2D(-tangent.y, tangent.x);\r\n\r\n    let crackWidth = age * 4 / 100 + Math.random()*1 + 1;\r\n    let crackLength = age * 40 / 100 + Math.random()*5;\r\n    let crackLength2 = crackLength * (0.2 + Math.random()*0.1);\r\n    let crackWidth2 = crackWidth/2 - 1 + Math.random()*2;\r\n\r\n    let crackOpositePoint = new Vector2D(\r\n      crackPoint.x - crackNormal.x * 5,\r\n      crackPoint.y - crackNormal.y * 5\r\n    );\r\n    for(let i = 0; i < 500; i++) {\r\n      if(!insidePolygon(crackOpositePoint, points)) {\r\n        break;\r\n      }\r\n      crackOpositePoint = crackOpositePoint.add(new Vector2D(\r\n        - crackNormal.x * 5,\r\n        - crackNormal.y * 5\r\n      ));\r\n    }\r\n    let crackMidPoint = new Vector2D((crackPoint.x + crackOpositePoint.x)/2, (crackPoint.y + crackOpositePoint.y)/2);\r\n\r\n    if(crackPoints.some(c => Math.pow(c.x - crackMidPoint.x, 2) + Math.pow(c.y - crackMidPoint.y, 2) < 200)) {\r\n      l--;\r\n      continue;\r\n    }\r\n\r\n    crackPoints.push(crackMidPoint)\r\n\r\n    let crack = [];\r\n    crack.push([\"M\", \r\n      crackPoint.x - crackNormal.x * 5,\r\n      crackPoint.y - crackNormal.y * 5\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength2,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength - crackNormal.y * -crackWidth2,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength + crackNormal.x * -crackWidth2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength2 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength2 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x - crackNormal.x * 5 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackPoint.y - crackNormal.y * 5 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    // back side\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x + crackNormal.x * 5 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackOpositePoint.y + crackNormal.y * 5 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength2 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength2 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength - crackNormal.y * -crackWidth2,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength + crackNormal.x * -crackWidth2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength2,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"z\"]);\r\n    newPathSmoothed.push(...crack);\r\n  }\r\n\r\n  /*\r\n  for(let i = 0; i < 10; i++) {\r\n    let crackIndex = Math.floor(Math.random() * (points.length - 1));\r\n    let crackPoint = points[crackIndex];\r\n    let crackNormal = normals[crackIndex].norm();      \r\n\r\n    let crackWidth = 2 + Math.random()*4;\r\n    let crackLength = 30 + Math.random()*20;\r\n    let crackLength2 = 5 + Math.random()*4;\r\n    let crackWidth2 = crackWidth/2 - 1 + Math.random()*2;\r\n\r\n    // can insert Crack?\r\n    if(newPathSmoothed[crackIndex][0] !== \"C\" || newPathSmoothed[crackIndex + 1][0] !== \"C\" || (crackNormal.x < 0.8 && crackNormal.x > -0.8)) {\r\n      i--;\r\n      continue;\r\n    }\r\n    \r\n    let crackOpositePoint = new Vector2D(\r\n      crackPoint.x - crackNormal.x * 5,\r\n      crackPoint.y - crackNormal.y * 5\r\n    );\r\n    for(let i = 0; i < 500; i++) {\r\n      if(!insidePolygon(crackOpositePoint, points)) {\r\n        break;\r\n      }\r\n      crackOpositePoint = crackOpositePoint.add(new Vector2D(\r\n        - crackNormal.x * 5,\r\n        - crackNormal.y * 5\r\n      ));\r\n    }\r\n\r\n    let crackMidPoint = new Vector2D((crackPoint.x + crackOpositePoint.x)/2, (crackPoint.y + crackOpositePoint.y)/2);\r\n\r\n    if(crackPoints.some(c => Math.pow(c.x - crackMidPoint.x, 2) + Math.pow(c.y - crackMidPoint.y, 2) < 200)) {\r\n      i--;\r\n      continue;\r\n    }\r\n\r\n    crackPoints.push(crackMidPoint)\r\n\r\n    let crack = [];\r\n    crack.push([\"M\", \r\n      crackPoint.x - crackNormal.x * 5,\r\n      crackPoint.y - crackNormal.y * 5\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength2,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength - crackNormal.y * -crackWidth2,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength + crackNormal.x * -crackWidth2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x + crackNormal.x * crackLength2 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackPoint.y + crackNormal.y * crackLength2 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackPoint.x - crackNormal.x * 5 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackPoint.y - crackNormal.y * 5 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    // back side\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x + crackNormal.x * 5 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackOpositePoint.y + crackNormal.y * 5 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength2 - crackNormal.y * -crackWidth,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength2 + crackNormal.x * -crackWidth// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength - crackNormal.y * -crackWidth2,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength + crackNormal.x * -crackWidth2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"L\", \r\n      crackOpositePoint.x - crackNormal.x * crackLength2,// + Math.random()*4-2, \r\n      crackOpositePoint.y - crackNormal.y * crackLength2// + Math.random()*4-2\r\n    ]);\r\n    crack.push([\"z\"]);\r\n    newPathSmoothed.push(...crack);\r\n    //newPathSmoothed.splice(crackIndex+1, 0, ...crack)\r\n  }*/\r\n\r\n  return newPathSmoothed;\r\n}\r\n\r\nexport function insidePolygon(point, vs) {\r\n  // ray-casting algorithm based on\r\n  // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n\r\n  var x = point.x, y = point.y;\r\n\r\n  var inside = false;\r\n  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\r\n      var xi = vs[i].x, yi = vs[i].y;\r\n      var xj = vs[j].x, yj = vs[j].y;\r\n\r\n      var intersect = ((yi > y) != (yj > y))\r\n          && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n      if (intersect) inside = !inside;\r\n  }\r\n\r\n  return inside;\r\n};\r\n\r\nexport function pathToPoints(newPath) {\r\n  let newPoints = [];\r\n  for(let i = 0; i < newPath.length; i++) {\r\n    let segment = newPath[i];\r\n    // move pointer\r\n    if(segment[0] === \"M\") {\r\n      newPoints[i] = new Vector2D(segment[1], segment[2]);\r\n    } else if(segment[0] === \"L\") {\r\n      newPoints[i] = new Vector2D(segment[1], segment[2]);\r\n    } else if(segment[0] === \"C\") {\r\n      newPoints[i] = new Vector2D(segment[5], segment[6]);\r\n    } else if(segment[0] === \"V\") {\r\n      newPoints[i] = new Vector2D(newPoints[i-1].x, segment[1]);\r\n    } else if(segment[0] === \"S\") {\r\n      newPoints[i] = new Vector2D(segment[3], segment[4]);\r\n    } else {\r\n      newPoints[i] = newPoints[i-1]\r\n    }\r\n  }\r\n  return newPoints;\r\n}\r\n\r\nexport function smoothPath(newPath, smoothing) {\r\n  \r\n  const line = (pointA, pointB) => {\r\n    const lengthX = pointB.x - pointA.x\r\n    const lengthY = pointB.y - pointA.y\r\n    return {\r\n      length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\r\n      angle: Math.atan2(lengthY, lengthX)\r\n    }\r\n  }\r\n  \r\n  const controlPoint = (line, smooth) => (current, previous, next, reverse) => {\r\n    const p = previous || current\r\n    const n = next || current\r\n    const l = line(p, n)\r\n\r\n    const angle = l.angle + (reverse ? Math.PI : 0)\r\n    const length = l.length * smooth\r\n    const x = current.x + Math.cos(angle) * length\r\n    const y = current.y + Math.sin(angle) * length\r\n    return new Vector2D(x, y);\r\n  }\r\n\r\n  const bezierCommand = (controlPoint) => (point, i, a) => {\r\n    const cps = controlPoint(a[i - 1], a[i - 2], point)\r\n    const cpe = controlPoint(point, a[i - 1], a[i + 1], true)\r\n    return ['C', cps.x, cps.y, cpe.x, cpe.y, point.x, point.y];\r\n  }\r\n\r\n  let newPathSmoothed = [];\r\n  let newPoints = pathToPoints(newPath);\r\n  \r\n  const bezierCommandCalc = bezierCommand(controlPoint(line, smoothing))    \r\n\r\n  for(let i = 0; i < newPath.length; i++) {\r\n    if(newPath[i][0] === \"M\" || newPath[i][0] === \"z\") {\r\n      newPathSmoothed.push(newPath[i]);\r\n    } else {\r\n      //newPathSmoothed.push([\"L\", newPoints[i].x, newPoints[i].y]);\r\n      newPathSmoothed.push(bezierCommandCalc(newPoints[i], i, newPoints));\r\n    }\r\n  }\r\n\r\n  return newPathSmoothed;\r\n}\r\n\r\nexport function analyzePath(path) {\r\n\r\n  let pointer = new Vector2D();\r\n  let endNormal = new Vector2D();    \r\n\r\n  let lastMIndex = 0;\r\n  let lastMNormal = new Vector2D();\r\n  let normals = Array(path.length).fill(new Vector2D());\r\n  let points = Array(path.length).fill(new Vector2D());\r\n  \r\n  for(let i = 0; i < path.length; i++) {\r\n    let segment = path[i];\r\n\r\n    let startNormal = new Vector2D();\r\n    let totalNormal = endNormal.copy();\r\n\r\n    // end of a subpath -> close back to beginning\r\n    if(i+1 < path.length && path[i+1][0] === \"z\") {\r\n      // calc normal\r\n      normals[lastMIndex] = lastMNormal.add(endNormal).norm();\r\n    }\r\n\r\n    // update pointer\r\n    if(segment[0] === \"M\") {\r\n      // move pointer\r\n      pointer = new Vector2D(segment[1], segment[2]);\r\n      // calc normal\r\n      endNormal = new Vector2D();\r\n    } else if(segment[0] === \"L\") {\r\n      // calc normal\r\n      endNormal = startNormal = new Vector2D(segment[1], segment[2]).normal();\r\n      // move pointer\r\n      pointer = new Vector2D(segment[1], segment[2]);\r\n    } else if(segment[0] === \"l\") {\r\n      // calc normal\r\n      endNormal = startNormal = new Vector2D(segment[1], segment[2]).normal();\r\n      // to absolute coords\r\n      segment[0] = \"L\"\r\n      segment[1] = pointer.x + segment[1];\r\n      segment[2] = pointer.y + segment[2];\r\n      // move pointer\r\n      pointer = new Vector2D(segment[1], segment[2]);\r\n    } else if(segment[0] === \"c\") {\r\n      // calc normal\r\n      endNormal = new Vector2D(segment[3], segment[4]).normal();\r\n      startNormal = new Vector2D(segment[1], segment[2]).normal();\r\n      // to absolute coords\r\n      segment[0] = \"C\"\r\n      segment[1] = pointer.x + segment[1];\r\n      segment[2] = pointer.y + segment[2];\r\n      segment[3] = pointer.x + segment[3];\r\n      segment[4] = pointer.y + segment[4];\r\n      segment[5] = pointer.x + segment[5];\r\n      segment[6] = pointer.y + segment[6];\r\n      // move pointer\r\n      pointer = new Vector2D(segment[5], segment[6]);\r\n    } else if(segment[0] === \"C\") {\r\n      // move pointer\r\n      pointer = new Vector2D(segment[5], segment[6]);\r\n      // calc normal\r\n      endNormal = new Vector2D(segment[3], segment[4]).normal();\r\n      startNormal = new Vector2D(segment[1], segment[2]).normal();\r\n    } else if(segment[0] === \"V\") {\r\n      // calc normal\r\n      startNormal = new Vector2D(-Math.sign(segment[1]), 0);\r\n      endNormal = new Vector2D(-Math.sign(segment[1]), 0);\r\n      // move pointer\r\n      pointer = new Vector2D(pointer.x, segment[1]);\r\n    } else if(segment[0] === \"v\") {\r\n      // calc normal\r\n      startNormal = new Vector2D(-Math.sign(segment[1]), 0);\r\n      endNormal = new Vector2D(-Math.sign(segment[1]), 0);\r\n      // to absolute coords\r\n      segment[0] = \"V\"\r\n      segment[1] = pointer.y + segment[1];\r\n      // move pointer\r\n      pointer = new Vector2D(pointer.x, segment[1]);\r\n    } else if(segment[0] === \"S\") {\r\n      // move pointer\r\n      pointer = new Vector2D(segment[3], segment[4]);\r\n    } else if(segment[0] === \"s\") {\r\n      // to absolute coords\r\n      segment[0] = \"S\"\r\n      segment[1] = pointer.x + segment[1];\r\n      segment[2] = pointer.y + segment[2];\r\n      segment[3] = pointer.x + segment[3];\r\n      segment[4] = pointer.y + segment[4];\r\n      // move pointer\r\n      pointer = new Vector2D(segment[3], segment[4]);\r\n    } else if(segment[0] === \"z\") {\r\n      endNormal = new Vector2D();\r\n    }\r\n\r\n    if(i+1 < path.length && path[i+1][0] === \"z\") {\r\n      // totalNormal stays unchanged\r\n    } else if(segment[0] === \"z\")\r\n      totalNormal = normals[lastMIndex].copy();\r\n    else if(segment[0] === \"S\")\r\n      totalNormal = endNormal.copy();\r\n    else\r\n      totalNormal = totalNormal.add(startNormal).norm();\r\n\r\n    // merge last end normal with this start normal\r\n    if(i > 0) {\r\n      normals[i-1] = totalNormal.copy();\r\n      // if last seg was start point, pointsve normal seperately\r\n      if(path[i-1][0] === \"M\") {\r\n        lastMNormal = totalNormal.copy();\r\n        lastMIndex = i-1;\r\n      }\r\n    }\r\n\r\n    // pointsve edge point position\r\n    points[i] = pointer.copy();\r\n  }\r\n\r\n  return {points, normals, path}\r\n}\r\n\r\nexport class Path {\r\n  segments = [];\r\n}\r\n\r\nexport class CubicBezier {\r\n  constructor(x0=0, y0=0, cx0=0, cy0=0, cx1=0, cy1=0, x1=0, y1=0) {\r\n    this.x0 = x0;\r\n    this.y0 = y0;\r\n    this.cx0 = cx0;\r\n    this.cy0 = cy0;\r\n    this.cx1 = cx1;\r\n    this.cy1 = cy1;\r\n    this.x1 = x1;\r\n    this.y1 = y1;\r\n  }\r\n\r\n  toString() {\r\n\r\n  }\r\n\r\n  static parse(str){\r\n\r\n  }\r\n}\r\n\r\nexport class QuadraticBezier {\r\n\r\n}\r\n\r\nexport class Line {\r\n\r\n}\r\n\r\nexport class VertivalLine {\r\n\r\n}\r\n\r\nexport class Move {\r\n  \r\n}\r\n\r\nexport class EndPath {\r\n  \r\n}\r\n\r\nexport class Vector2D {\r\n  constructor(x=0,y=0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  add(vec) {\r\n    return new Vector2D(this.x + vec.x, this.y + vec.y);\r\n  }\r\n\r\n  isNull() {\r\n    return this.x === 0 && this.y === 0;\r\n  }\r\n\r\n  copy() {\r\n    return new Vector2D(this.x, this.y);\r\n  }\r\n\r\n  length() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n\r\n  norm() {\r\n    if(this.isNull()) {\r\n      return new Vector2D();\r\n    }\r\n    let len = this.length();\r\n    return new Vector2D(this.x / len, this.y / len);\r\n  }\r\n\r\n  normal() {\r\n    let norm = this.norm();\r\n    return new Vector2D(-norm.y, norm.x);\r\n  }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Grid, Typography, Select, Button, MenuItem, TextField } from '@material-ui/core';\nimport { A_1, A_2, A_ALL, A_ALTERNATIVE_1, E_1, B_1, D_1, F_1, H_1, K_1, L_1, N_1, T_1, U_1, CHARS } from './examples';\nimport { withStyles } from '@material-ui/styles';\nimport { parsePath, writePath } from './svg/SVGUtils';\nimport { Vector2D, analyzePath, pathToPoints, smoothPath, insidePolygon, crackPoints, getSubPaths, roughenPath, stretch, rounden } from './svg/geometry';\nimport { Slider } from 'material-ui-slider';\n\nconst styles = theme => ({\n  transformContainer: {\n    height: 700,\n  },\n  canvas: {\n    width: \"100%\",\n    height: \"100%\",\n  }\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      srcPath: A_1,\n      resPath: [],\n      circles: [],\n      lines: [],\n      age: 0,\n      play: false,\n      text: \"ABDEFHKLNTU\"\n    }\n  }\n\n  componentDidMount() {    \n    this.transformLetter();\n    setInterval(() => {\n      const {age, play} = this.state;\n      if(play) {\n        if(age === 100) {\n          this.setState({age: 0})\n        } else {        \n          this.setState({age: age + 1})\n        }\n        this.transformLetter();\n      }\n    }, 200)\n  }\n\n  transformLetter = () => {\n    const {age, text} = this.state;\n    let resPath = [];\n\n    for(let c of text) {\n      var srcPath = parsePath(CHARS[c]);\n\n      // randomization parameters\n      let magn = new Vector2D(\n        age * 1.0 + Math.random() * 3, \n        age * 0.5 + Math.random() * 2\n      );\n      let roundingMagnitude = age + Math.random() * 3;\n\n      var circles = [];\n      var lines = [];\n\n      let { points, normals } = analyzePath(srcPath);\n\n      // rounden path\n      let newPath = rounden(srcPath, points, normals, roundingMagnitude);\n\n      // stretch\n      newPath = stretch(newPath, points, normals, magn)    \n\n      // smooth path\n      let newPathSmoothed = smoothPath(newPath, 0.15)\n\n      // roughen path\n      let roughPath = roughenPath(newPathSmoothed, age * 8/100);\n\n      // smooth roughened again\n      roughPath = smoothPath(roughPath, 0.15);\n\n      // crack points overlay\n      roughPath = crackPoints(roughPath, age);\n\n      resPath.push(writePath(roughPath));\n    }\n    \n    this.setState({\n      resPath: resPath,\n      circles: circles,\n      lines: lines\n    })\n  }\n\n  handleSelect = (e) => {\n    this.setState({\n      srcPath: e.target.value,\n    });\n    setTimeout(() => this.transformLetter(), 100);\n  }\n\n  render(){\n    const {classes} = this.props;\n    const {srcPath, resPath, circles, lines} = this.state;\n\n    const svgText = '<svg viewBox=\"1000 800 1000 1500\"><path d=\"' + resPath + '\"/><path d=\"' + srcPath + '\" fill=\"#ffff00\"/>  </svg>'\n    return (\n      <div className=\"App\">\n        <Typography variant=\"h5\">Calculation:</Typography>\n        <TextField value={this.state.text} onChange={(e) => {\n          this.setState({text: e.target.value});\n          setTimeout(() => this.transformLetter(), 10);\n        }} />\n        <Button onClick={() => this.setState({play: !this.state.play})}>{this.state.play ? \"Pause\": \"Play\"}</Button>\n        <Slider value={this.state.age} onChange={(e)=>{\n          this.setState({age: e});\n          setTimeout(() => this.transformLetter(), 10);\n        }}></Slider>\n        <Grid container className={classes.transformContainer}>\n          <Grid item xs={12}>\n            <svg viewBox={\"1000 800 \" + (1000 * resPath.length) + \" 1500\"}>\n              {resPath.map((path, index) => (\n                <path transform={\"translate(\" + (1000 * index) + \", 0)\"} d={path}/> \n              ))}   \n            </svg>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}